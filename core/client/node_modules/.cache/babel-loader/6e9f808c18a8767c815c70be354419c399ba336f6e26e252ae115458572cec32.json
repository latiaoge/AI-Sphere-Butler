{"ast":null,"code":"var _jsxFileName = \"D:\\\\XM\\\\AI-Sphere-Butler\\\\core\\\\client\\\\src\\\\components\\\\AudioTranscriber.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useRecorderContext } from '../contexts/RecorderProvider'; // 注意路径根据实际调整\n\n// 新增：获取动态服务地址函数\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction getDynamicUrls() {\n  try {\n    const serverUrlsStr = localStorage.getItem('serverUrls');\n    if (serverUrlsStr) {\n      const serverUrls = JSON.parse(serverUrlsStr);\n      return {\n        qwenerUrl: serverUrls.audioTranscriberQwenerUrl || 'https://192.168.168.77:9010/qwener',\n        uploadSpeakerUrl: serverUrls.audioTranscriberUploadSpeakerUrl || 'http://192.168.168.77:6007/api/uploadSpeaker'\n      };\n    }\n  } catch (e) {\n    console.warn('读取serverUrls配置失败，使用默认地址', e);\n  }\n  return {\n    qwenerUrl: 'https://192.168.168.77:9010/qwener',\n    uploadSpeakerUrl: 'http://192.168.168.77:6007/api/uploadSpeaker'\n  };\n}\nexport default function AudioTranscriber() {\n  _s();\n  // 从全局录音上下文中取状态和操作\n  const {\n    isRecording,\n    transcription,\n    lang,\n    speakerVerification,\n    wakeWordEnabled,\n    wakeWords,\n    setLang,\n    setSpeakerVerification,\n    setWakeWordEnabled,\n    setWakeWords,\n    startRecording,\n    stopRecording,\n    setTranscription,\n    // 新增：获取全局ASR面板可见性状态及更新方法\n    asrPanelVisible,\n    setAsrPanelVisible\n  } = useRecorderContext();\n\n  // 新增：面板显示/隐藏状态管理\n  const [panelVisible, setPanelVisible] = useState(asrPanelVisible); // 初始值从全局状态获取\n  const doubleClickTimerRef = useRef(null);\n  const panelStateKey = 'audioTranscriberPanelVisible';\n\n  // 拖拽相关引用\n  const micButtonRef = useRef(null);\n  const isDraggingRef = useRef(false);\n  const offsetXRef = useRef(0);\n  const offsetYRef = useRef(0);\n\n  // localStorage 保存位置的 key\n  const storageKey = 'audioTranscriberMicButtonPosition';\n\n  // 新增声纹识别录音状态和上传状态（保持本组件私有状态）\n  const [isSpeakerRecording, setIsSpeakerRecording] = useState(false);\n  const [speakerUploadStatus, setSpeakerUploadStatus] = useState('');\n  const speakerRecorderRef = useRef(null);\n  const speakerAudioChunksRef = useRef([]);\n\n  // 发送文本消息到 LLM 服务\n  const sendTextMessage = async text => {\n    if (!text.trim()) return;\n    const {\n      qwenerUrl\n    } = getDynamicUrls();\n    try {\n      const response = await fetch(qwenerUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text\n        })\n      });\n      if (!response.ok) {\n        throw new Error('网络响应失败，状态码: ' + response.status);\n      }\n      const data = await response.json();\n      console.log('文本发送成功，服务器返回：', data);\n    } catch (error) {\n      console.error('文本发送失败：', error);\n    }\n  };\n\n  // 组件卸载时清理资源\n  useEffect(() => {\n    return () => {\n      stopRecording();\n      stopSpeakerRecording();\n      if (doubleClickTimerRef.current) {\n        clearTimeout(doubleClickTimerRef.current);\n      }\n    };\n  }, []);\n\n  // 监听语言和声纹识别开关的变化，保存状态到 localStorage，确保切换页时记忆选择\n  useEffect(() => {\n    try {\n      localStorage.setItem('audioTranscriberLang', lang);\n    } catch {}\n  }, [lang]);\n  useEffect(() => {\n    try {\n      localStorage.setItem('audioTranscriberSpeakerVerification', speakerVerification.toString());\n    } catch {}\n  }, [speakerVerification]);\n\n  // 监听语音唤醒开关和唤醒词变化，保存到 localStorage\n  useEffect(() => {\n    try {\n      localStorage.setItem('wakeWordEnabled', wakeWordEnabled.toString());\n    } catch {}\n  }, [wakeWordEnabled]);\n  useEffect(() => {\n    try {\n      localStorage.setItem('wakeWords', wakeWords);\n    } catch {}\n  }, [wakeWords]);\n\n  // 新增：加载面板显示状态（改为从localStorage加载，同时同步到全局状态）\n  useEffect(() => {\n    try {\n      const savedState = localStorage.getItem(panelStateKey);\n      if (savedState !== null) {\n        const parsedState = JSON.parse(savedState);\n        setPanelVisible(parsedState);\n        // 同步到全局状态\n        setAsrPanelVisible(parsedState);\n      }\n    } catch (e) {\n      console.warn('加载面板状态失败:', e);\n    }\n  }, []);\n\n  // 新增：保存面板显示状态到localStorage，并同步到全局状态\n  useEffect(() => {\n    try {\n      localStorage.setItem(panelStateKey, JSON.stringify(panelVisible));\n      // 同步到全局状态\n      setAsrPanelVisible(panelVisible);\n    } catch (e) {\n      console.warn('保存面板状态失败:', e);\n    }\n  }, [panelVisible, setAsrPanelVisible]);\n\n  // 监听全局状态变化，保持与局部状态同步（处理多实例或其他组件修改全局状态的情况）\n  useEffect(() => {\n    if (panelVisible !== asrPanelVisible) {\n      setPanelVisible(asrPanelVisible);\n    }\n  }, [asrPanelVisible]);\n\n  // 录制声纹相关函数\n  function startSpeakerRecording() {\n    if (isSpeakerRecording) return;\n    setSpeakerUploadStatus('请求麦克风权限...');\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => {\n      setSpeakerUploadStatus('开始录音2秒...');\n      speakerAudioChunksRef.current = [];\n      const options = {\n        mimeType: 'audio/wav'\n      };\n      let mediaRecorder;\n      try {\n        mediaRecorder = new MediaRecorder(stream, options);\n      } catch (e) {\n        mediaRecorder = new MediaRecorder(stream);\n      }\n      speakerRecorderRef.current = mediaRecorder;\n      mediaRecorder.ondataavailable = event => {\n        if (event.data && event.data.size > 0) {\n          speakerAudioChunksRef.current.push(event.data);\n        }\n      };\n      mediaRecorder.onstop = async () => {\n        setSpeakerUploadStatus('录音结束，准备上传...');\n        const blob = new Blob(speakerAudioChunksRef.current, {\n          type: 'audio/wav'\n        });\n        try {\n          const formData = new FormData();\n          formData.append('file', blob, 'speaker.wav');\n          const {\n            uploadSpeakerUrl\n          } = getDynamicUrls();\n          const res = await fetch(uploadSpeakerUrl, {\n            method: 'POST',\n            body: formData\n          });\n          if (!res.ok) {\n            throw new Error(`上传失败，状态码: ${res.status}`);\n          }\n          const result = await res.json();\n          setSpeakerUploadStatus('上传成功');\n          console.log('上传成功，服务器返回：', result);\n        } catch (err) {\n          setSpeakerUploadStatus('上传失败: ' + err.message);\n          console.error('上传失败', err);\n        }\n        stream.getTracks().forEach(track => track.stop());\n        setTimeout(() => setSpeakerUploadStatus(''), 3000);\n        setIsSpeakerRecording(false);\n      };\n      mediaRecorder.start();\n      setIsSpeakerRecording(true);\n      setTimeout(() => {\n        if (speakerRecorderRef.current && speakerRecorderRef.current.state !== 'inactive') {\n          speakerRecorderRef.current.stop();\n        }\n      }, 2000);\n    }).catch(err => {\n      setSpeakerUploadStatus('获取麦克风权限失败: ' + err.message);\n      console.error('获取麦克风权限失败', err);\n    });\n  }\n  function stopSpeakerRecording() {\n    if (speakerRecorderRef.current && speakerRecorderRef.current.state !== 'inactive') {\n      speakerRecorderRef.current.stop();\n      setIsSpeakerRecording(false);\n    }\n  }\n\n  // 拖拽事件处理\n  useEffect(() => {\n    if (!micButtonRef.current) return;\n    const button = micButtonRef.current;\n    const savedPosStr = localStorage.getItem(storageKey);\n    let left = 26;\n    let top = 26;\n    if (savedPosStr) {\n      try {\n        const pos = JSON.parse(savedPosStr);\n        if (typeof pos.left === 'number' && typeof pos.top === 'number' && pos.left >= 0 && pos.top >= 0) {\n          left = pos.left;\n          top = pos.top;\n        }\n      } catch {}\n    }\n    button.style.position = 'fixed';\n    button.style.left = `${left}px`;\n    button.style.top = `${top}px`;\n    button.style.zIndex = '10000';\n    button.style.cursor = 'grab';\n    isDraggingRef.current = false;\n    offsetXRef.current = 0;\n    offsetYRef.current = 0;\n    const onMouseDown = e => {\n      if (e.button !== 0) return;\n      isDraggingRef.current = true;\n      offsetXRef.current = e.clientX - button.offsetLeft;\n      offsetYRef.current = e.clientY - button.offsetTop;\n      button.style.cursor = 'grabbing';\n      e.preventDefault();\n    };\n    const onMouseMove = e => {\n      if (!isDraggingRef.current) return;\n      let newLeft = e.clientX - offsetXRef.current;\n      let newTop = e.clientY - offsetYRef.current;\n      const maxLeft = window.innerWidth - button.offsetWidth;\n      const maxTop = window.innerHeight - button.offsetHeight;\n      newLeft = Math.min(Math.max(0, newLeft), maxLeft);\n      newTop = Math.min(Math.max(0, newTop), maxTop);\n      button.style.left = `${newLeft}px`;\n      button.style.top = `${newTop}px`;\n    };\n    const onMouseUp = () => {\n      if (!isDraggingRef.current) return;\n      isDraggingRef.current = false;\n      button.style.cursor = 'grab';\n      localStorage.setItem(storageKey, JSON.stringify({\n        left: button.offsetLeft,\n        top: button.offsetTop\n      }));\n    };\n    const onTouchStart = e => {\n      if (e.touches.length === 0) return;\n      isDraggingRef.current = true;\n      const touch = e.touches[0];\n      offsetXRef.current = touch.clientX - button.offsetLeft;\n      offsetYRef.current = touch.clientY - button.offsetTop;\n      button.style.cursor = 'grabbing';\n    };\n    const onTouchMove = e => {\n      if (!isDraggingRef.current || e.touches.length === 0) return;\n      const touch = e.touches[0];\n      let newLeft = touch.clientX - offsetXRef.current;\n      let newTop = touch.clientY - offsetYRef.current;\n      const maxLeft = window.innerWidth - button.offsetWidth;\n      const maxTop = window.innerHeight - button.offsetHeight;\n      newLeft = Math.min(Math.max(0, newLeft), maxLeft);\n      newTop = Math.min(Math.max(0, newTop), maxTop);\n      button.style.left = `${newLeft}px`;\n      button.style.top = `${newTop}px`;\n      e.preventDefault();\n    };\n    const onTouchEnd = () => {\n      if (!isDraggingRef.current) return;\n      isDraggingRef.current = false;\n      button.style.cursor = 'grab';\n      localStorage.setItem(storageKey, JSON.stringify({\n        left: button.offsetLeft,\n        top: button.offsetTop\n      }));\n    };\n    button.addEventListener('mousedown', onMouseDown);\n    document.addEventListener('mousemove', onMouseMove);\n    document.addEventListener('mouseup', onMouseUp);\n    button.addEventListener('touchstart', onTouchStart, {\n      passive: false\n    });\n    document.addEventListener('touchmove', onTouchMove, {\n      passive: false\n    });\n    document.addEventListener('touchend', onTouchEnd);\n    return () => {\n      button.removeEventListener('mousedown', onMouseDown);\n      document.removeEventListener('mousemove', onMouseMove);\n      document.removeEventListener('mouseup', onMouseUp);\n      button.removeEventListener('touchstart', onTouchStart);\n      document.removeEventListener('touchmove', onTouchMove);\n      document.removeEventListener('touchend', onTouchEnd);\n    };\n  }, []);\n\n  // 波纹动画相关\n  const [ripples, setRipples] = useState([]);\n  const rippleCountRef = useRef(0);\n  const speakerButtonRef = useRef(null);\n\n  // 录制声纹按钮点击函数封装，附加波纹效果\n  const handleSpeakerRecordClick = event => {\n    if (isRecording || isSpeakerRecording) return;\n    createRipple(event);\n    startSpeakerRecording();\n  };\n\n  // 创建波纹，添加到ripples数组\n  const createRipple = event => {\n    if (!speakerButtonRef.current) return;\n    const rect = speakerButtonRef.current.getBoundingClientRect();\n    const size = Math.max(rect.width, rect.height);\n    const x = event.clientX - rect.left - size / 2;\n    const y = event.clientY - rect.top - size / 2;\n    const newRipple = {\n      key: rippleCountRef.current,\n      size,\n      x,\n      y\n    };\n    rippleCountRef.current += 1;\n    setRipples(oldRipples => [...oldRipples, newRipple]);\n    setTimeout(() => {\n      setRipples(oldRipples => oldRipples.filter(r => r.key !== newRipple.key));\n    }, 1000);\n  };\n\n  // 新增：处理双击事件（区分单击和双击）\n  function handleMicClick() {\n    if (doubleClickTimerRef.current) {\n      // 双击事件：切换面板显示状态\n      clearTimeout(doubleClickTimerRef.current);\n      doubleClickTimerRef.current = null;\n      setPanelVisible(!panelVisible);\n    } else {\n      // 单击事件：处理录音\n      doubleClickTimerRef.current = setTimeout(function () {\n        if (isRecording) {\n          stopRecording();\n        } else {\n          startRecording();\n        }\n        doubleClickTimerRef.current = null;\n      }, 300); // 300ms内连续点击视为双击\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"style\", {\n      children: `\n        /* 麦克风按钮样式 */\n        #mic-button-wrapper {\n          position: fixed;\n          z-index: 10000;\n          user-select: none;\n          pointer-events: auto;\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          gap: 4px;\n        }\n\n        #listening-text {\n          font-size: 12px;\n          color: rgba(128, 128, 128, 0.7);\n          user-select: none;\n          pointer-events: none;\n          font-weight: 500;\n          opacity: 0;\n          transition: opacity 0.3s ease;\n          height: 16px;\n          line-height: 16px;\n        }\n        #listening-text.visible {\n          opacity: 1;\n        }\n\n        #mic-button {\n          background: none;\n          border: none;\n          padding: 0;\n          outline: none;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          filter: none;\n          transition: filter 0.3s ease;\n\n          width: 68px;\n          height: 68px;\n          cursor: grab;\n        }\n        #mic-button.recording {\n          filter: drop-shadow(0 0 5px red);\n        }\n        #mic-button img {\n          width: 48px;\n          height: 48px;\n          user-select: none;\n          pointer-events: none;\n          -webkit-user-drag: none;\n        }\n\n        /* 语言和声纹识别区域样式 */\n        #controls-container {\n          max-width: 700px;\n          margin: 20px auto 12px auto;\n          font-family: Arial, sans-serif;\n          color: white;\n          display: flex;\n          align-items: center;\n          gap: 20px;\n          user-select: none;\n          flex-wrap: wrap;\n        }\n        #controls-container label {\n          font-size: 14px;\n          user-select: none;\n          display: flex;\n          align-items: center;\n          gap: 6px;\n        }\n        #langInput, #wakeWordsInput {\n          padding: 6px;\n          font-size: 12px;\n          width: 140px;\n          background-color: #333;\n          border: 1px solid #666;\n          border-radius: 3px;\n          color: white;\n          user-select: text;\n        }\n        #speakerVerificationLabel {\n          font-size: 14px;\n        }\n        #wakeWordToggleLabel {\n          font-size: 14px;\n          display: flex;\n          align-items: center;\n          gap: 6px;\n        }\n\n        /* 纯 CSS 玻璃态录制声纹按钮 */\n        #speaker-record-button {\n          position: relative;\n          overflow: hidden;\n          background: rgba(255, 255, 255, 0.1);\n          border-radius: 16px;\n          border: 1px solid rgba(255, 255, 255, 0.3);\n          color: white;\n          padding: 3px 10px;\n          font-size: 13px;\n          font-weight: 600;\n          cursor: pointer;\n          user-select: none;\n          box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);\n          backdrop-filter: blur(10px);\n          -webkit-backdrop-filter: blur(12px);\n          WebkitBackdropFilter: 'blur(10px)',\n          transition: all 0.3s ease;\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          outline: none;\n          border-image: none;\n        }\n        #speaker-record-button:hover:not(:disabled) {\n          background: rgba(255, 255, 255, 0.2);\n          box-shadow: 0 8px 40px rgba(255, 255, 255, 0.3);\n          transform: scale(1.05);\n          filter: brightness(1.1);\n        }\n        #speaker-record-button:disabled {\n          opacity: 0.4;\n          cursor: not-allowed;\n          box-shadow: none;\n          background: rgba(255, 255, 255, 0.05);\n          filter: none;\n          transform: none;\n        }\n\n        /* 额外光泽层 */\n        #speaker-record-button::before {\n          content: '';\n          position: absolute;\n          top: -100%;\n          left: -100%;\n          width: 100%;\n          height: 100%;\n          background: radial-gradient(circle at 10% 10%, rgba(255, 255, 255, 0.3), transparent 10%);\n          pointer-events: none;\n          filter: blur(10px);\n          opacity: 0.6;\n          transition: opacity 0.3s ease;\n          border-radius: inherit;\n          z-index: 0;\n        }\n\n        /* 保留波纹效果的样式 */\n        .ripple {\n          position: absolute;\n          border-radius: 150%;\n          background: rgba(91, 155, 255, 0.7);\n          animation: rippleEffect 1s ease-out;\n          pointer-events: none;\n          transform: scale(0);\n          opacity: 0.75;\n          z-index: 1;\n        }\n\n        @keyframes rippleEffect {\n          to {\n            transform: scale(4);\n            opacity: 0;\n          }\n        }\n\n        /* 新增：面板显示/隐藏控制 */\n        #audio-panel-content {\n          transition: all 0.3s ease;\n        }\n        #audio-panel-content.hidden {\n          display: none;\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"mic-button-wrapper\",\n      ref: micButtonRef,\n      style: {\n        left: 26,\n        top: 26,\n        position: 'fixed'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"listening-text\",\n        className: isRecording ? 'visible' : '',\n        \"aria-live\": \"polite\",\n        role: \"status\",\n        children: \"\\u8046\\u542C\\u4E2D...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 597,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"mic-button\",\n        className: isRecording ? 'recording' : '',\n        onClick: handleMicClick,\n        onDoubleClick: e => e.preventDefault(),\n        \"aria-label\": isRecording ? '停止录音' : '开始录音',\n        title: isRecording ? '点击停止录音，双击切换面板' : '点击开始录音，双击切换面板',\n        type: \"button\",\n        disabled: isSpeakerRecording,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/core/client/ai-butler/image/mic-icon.png\",\n          alt: \"\\u9EA6\\u514B\\u98CE\",\n          draggable: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 611,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 601,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 592,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"audio-panel-content\",\n      className: panelVisible ? '' : 'hidden',\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"controls-container\",\n        \"aria-label\": \"\\u8BED\\u97F3\\u8BC6\\u522B\\u8BBE\\u7F6E\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"langInput\",\n          children: \"\\u8BED\\u8A00\\uFF1A\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 624,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"langInput\",\n          type: \"text\",\n          value: lang,\n          onChange: e => setLang(e.target.value),\n          disabled: isRecording || isSpeakerRecording,\n          placeholder: \"auto\",\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 625,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          id: \"speakerVerificationLabel\",\n          htmlFor: \"speakerVerificationCheckbox\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"speakerVerificationCheckbox\",\n            type: \"checkbox\",\n            checked: speakerVerification,\n            disabled: isRecording || isSpeakerRecording,\n            onChange: e => setSpeakerVerification(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 636,\n            columnNumber: 13\n          }, this), \"\\u58F0\\u7EB9\\u8BC6\\u522B\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 635,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          id: \"wakeWordToggleLabel\",\n          htmlFor: \"wakeWordToggleCheckbox\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"wakeWordToggleCheckbox\",\n            type: \"checkbox\",\n            checked: wakeWordEnabled,\n            disabled: isRecording || isSpeakerRecording,\n            onChange: e => setWakeWordEnabled(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 648,\n            columnNumber: 13\n          }, this), \"\\u8BED\\u97F3\\u5524\\u9192\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 647,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"wakeWordsInput\",\n          style: {\n            flexGrow: 1\n          },\n          children: [\"\\u5524\\u9192\\u8BCD\\uFF08\\u62FC\\u97F3\\uFF0C\\u591A\\u4E2A\\u7528\\u9017\\u53F7\\u5206\\u9694\\uFF09\\uFF1A\", /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"wakeWordsInput\",\n            type: \"text\",\n            value: wakeWords,\n            onChange: e => setWakeWords(e.target.value),\n            disabled: isRecording || isSpeakerRecording || !wakeWordEnabled,\n            placeholder: \"\\u5982\\uFF1Azhan qi lai, ni hao xiao qian\",\n            autoComplete: \"off\",\n            style: {\n              marginLeft: 8\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 661,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 659,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"speaker-record-button\",\n          ref: speakerButtonRef,\n          onClick: handleSpeakerRecordClick,\n          disabled: isRecording || isSpeakerRecording,\n          type: \"button\",\n          \"aria-live\": \"polite\",\n          \"aria-label\": \"\\u5F55\\u5236\\u58F0\\u7EB9\",\n          title: \"\\u5F55\\u5236\\u7EA62\\u79D2\\u58F0\\u97F3\\u7528\\u4E8E\\u58F0\\u7EB9\\u8BC6\\u522B\\uFF0C\\u5F55\\u5236\\u5B8C\\u6210\\u81EA\\u52A8\\u4E0A\\u4F20\",\n          children: [\"\\u5F55\\u5236\\u58F0\\u7EB9 (2\\u79D2)\", ripples.map(({\n            key,\n            size,\n            x,\n            y\n          }) => /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"ripple\",\n            style: {\n              width: size,\n              height: size,\n              top: y,\n              left: x\n            }\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 686,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 674,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 9\n      }, this), speakerUploadStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"speaker-record-status\",\n        role: \"alert\",\n        \"aria-live\": \"polite\",\n        \"aria-atomic\": \"true\",\n        style: {\n          maxWidth: 700,\n          margin: '4px auto 0 auto'\n        },\n        children: speakerUploadStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 702,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"transcriptionResult\",\n        style: {\n          maxWidth: 700,\n          margin: '12px auto 20px auto',\n          fontFamily: 'Arial, sans-serif',\n          whiteSpace: 'pre-wrap',\n          backgroundColor: 'transparent',\n          padding: 10,\n          border: '1px solid transparent',\n          borderRadius: 5,\n          minHeight: 150,\n          fontFamily: 'monospace',\n          fontSize: 14,\n          overflowY: 'auto',\n          maxHeight: 300,\n          userSelect: 'text',\n          color: transcription ? 'white' : 'rgba(255, 255, 255, 0.5)'\n        },\n        children: transcription || '识别文字展示区...'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 714,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 620,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(AudioTranscriber, \"s5gjJ/EgEVAxRHLvSRp5HlJJJp4=\", false, function () {\n  return [useRecorderContext];\n});\n_c = AudioTranscriber;\nvar _c;\n$RefreshReg$(_c, \"AudioTranscriber\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useRecorderContext","jsxDEV","_jsxDEV","Fragment","_Fragment","getDynamicUrls","serverUrlsStr","localStorage","getItem","serverUrls","JSON","parse","qwenerUrl","audioTranscriberQwenerUrl","uploadSpeakerUrl","audioTranscriberUploadSpeakerUrl","e","console","warn","AudioTranscriber","_s","isRecording","transcription","lang","speakerVerification","wakeWordEnabled","wakeWords","setLang","setSpeakerVerification","setWakeWordEnabled","setWakeWords","startRecording","stopRecording","setTranscription","asrPanelVisible","setAsrPanelVisible","panelVisible","setPanelVisible","doubleClickTimerRef","panelStateKey","micButtonRef","isDraggingRef","offsetXRef","offsetYRef","storageKey","isSpeakerRecording","setIsSpeakerRecording","speakerUploadStatus","setSpeakerUploadStatus","speakerRecorderRef","speakerAudioChunksRef","sendTextMessage","text","trim","response","fetch","method","headers","body","stringify","ok","Error","status","data","json","log","error","stopSpeakerRecording","current","clearTimeout","setItem","toString","savedState","parsedState","startSpeakerRecording","navigator","mediaDevices","getUserMedia","audio","then","stream","options","mimeType","mediaRecorder","MediaRecorder","ondataavailable","event","size","push","onstop","blob","Blob","type","formData","FormData","append","res","result","err","message","getTracks","forEach","track","stop","setTimeout","start","state","catch","button","savedPosStr","left","top","pos","style","position","zIndex","cursor","onMouseDown","clientX","offsetLeft","clientY","offsetTop","preventDefault","onMouseMove","newLeft","newTop","maxLeft","window","innerWidth","offsetWidth","maxTop","innerHeight","offsetHeight","Math","min","max","onMouseUp","onTouchStart","touches","length","touch","onTouchMove","onTouchEnd","addEventListener","document","passive","removeEventListener","ripples","setRipples","rippleCountRef","speakerButtonRef","handleSpeakerRecordClick","createRipple","rect","getBoundingClientRect","width","height","x","y","newRipple","key","oldRipples","filter","r","handleMicClick","children","fileName","_jsxFileName","lineNumber","columnNumber","id","ref","className","role","onClick","onDoubleClick","title","disabled","src","alt","draggable","htmlFor","value","onChange","target","placeholder","autoComplete","checked","flexGrow","marginLeft","map","maxWidth","margin","fontFamily","whiteSpace","backgroundColor","padding","border","borderRadius","minHeight","fontSize","overflowY","maxHeight","userSelect","color","_c","$RefreshReg$"],"sources":["D:/XM/AI-Sphere-Butler/core/client/src/components/AudioTranscriber.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { useRecorderContext } from '../contexts/RecorderProvider'; // 注意路径根据实际调整\r\n\r\n// 新增：获取动态服务地址函数\r\nfunction getDynamicUrls() {\r\n  try {\r\n    const serverUrlsStr = localStorage.getItem('serverUrls');\r\n    if (serverUrlsStr) {\r\n      const serverUrls = JSON.parse(serverUrlsStr);\r\n      return {\r\n        qwenerUrl: serverUrls.audioTranscriberQwenerUrl || 'https://192.168.168.77:9010/qwener',\r\n        uploadSpeakerUrl: serverUrls.audioTranscriberUploadSpeakerUrl || 'http://192.168.168.77:6007/api/uploadSpeaker',\r\n      };\r\n    }\r\n  } catch (e) {\r\n    console.warn('读取serverUrls配置失败，使用默认地址', e);\r\n  }\r\n  return {\r\n    qwenerUrl: 'https://192.168.168.77:9010/qwener',\r\n    uploadSpeakerUrl: 'http://192.168.168.77:6007/api/uploadSpeaker',\r\n  };\r\n}\r\n\r\nexport default function AudioTranscriber() {\r\n  // 从全局录音上下文中取状态和操作\r\n  const {\r\n    isRecording,\r\n    transcription,\r\n    lang,\r\n    speakerVerification,\r\n    wakeWordEnabled,\r\n    wakeWords,\r\n    setLang,\r\n    setSpeakerVerification,\r\n    setWakeWordEnabled,\r\n    setWakeWords,\r\n    startRecording,\r\n    stopRecording,\r\n    setTranscription,\r\n    // 新增：获取全局ASR面板可见性状态及更新方法\r\n    asrPanelVisible,\r\n    setAsrPanelVisible\r\n  } = useRecorderContext();\r\n\r\n  // 新增：面板显示/隐藏状态管理\r\n  const [panelVisible, setPanelVisible] = useState(asrPanelVisible); // 初始值从全局状态获取\r\n  const doubleClickTimerRef = useRef(null);\r\n  const panelStateKey = 'audioTranscriberPanelVisible';\r\n\r\n  // 拖拽相关引用\r\n  const micButtonRef = useRef(null);\r\n  const isDraggingRef = useRef(false);\r\n  const offsetXRef = useRef(0);\r\n  const offsetYRef = useRef(0);\r\n\r\n  // localStorage 保存位置的 key\r\n  const storageKey = 'audioTranscriberMicButtonPosition';\r\n\r\n  // 新增声纹识别录音状态和上传状态（保持本组件私有状态）\r\n  const [isSpeakerRecording, setIsSpeakerRecording] = useState(false);\r\n  const [speakerUploadStatus, setSpeakerUploadStatus] = useState('');\r\n  const speakerRecorderRef = useRef(null);\r\n  const speakerAudioChunksRef = useRef([]);\r\n\r\n  // 发送文本消息到 LLM 服务\r\n  const sendTextMessage = async (text) => {\r\n    if (!text.trim()) return;\r\n\r\n    const { qwenerUrl } = getDynamicUrls();\r\n\r\n    try {\r\n      const response = await fetch(qwenerUrl, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ text }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('网络响应失败，状态码: ' + response.status);\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('文本发送成功，服务器返回：', data);\r\n    } catch (error) {\r\n      console.error('文本发送失败：', error);\r\n    }\r\n  };\r\n\r\n  // 组件卸载时清理资源\r\n  useEffect(() => {\r\n    return () => {\r\n      stopRecording();\r\n      stopSpeakerRecording();\r\n      if (doubleClickTimerRef.current) {\r\n        clearTimeout(doubleClickTimerRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // 监听语言和声纹识别开关的变化，保存状态到 localStorage，确保切换页时记忆选择\r\n  useEffect(() => {\r\n    try {\r\n      localStorage.setItem('audioTranscriberLang', lang);\r\n    } catch {}\r\n  }, [lang]);\r\n\r\n  useEffect(() => {\r\n    try {\r\n      localStorage.setItem('audioTranscriberSpeakerVerification', speakerVerification.toString());\r\n    } catch {}\r\n  }, [speakerVerification]);\r\n\r\n  // 监听语音唤醒开关和唤醒词变化，保存到 localStorage\r\n  useEffect(() => {\r\n    try {\r\n      localStorage.setItem('wakeWordEnabled', wakeWordEnabled.toString());\r\n    } catch {}\r\n  }, [wakeWordEnabled]);\r\n\r\n  useEffect(() => {\r\n    try {\r\n      localStorage.setItem('wakeWords', wakeWords);\r\n    } catch {}\r\n  }, [wakeWords]);\r\n\r\n  // 新增：加载面板显示状态（改为从localStorage加载，同时同步到全局状态）\r\n  useEffect(() => {\r\n    try {\r\n      const savedState = localStorage.getItem(panelStateKey);\r\n      if (savedState !== null) {\r\n        const parsedState = JSON.parse(savedState);\r\n        setPanelVisible(parsedState);\r\n        // 同步到全局状态\r\n        setAsrPanelVisible(parsedState);\r\n      }\r\n    } catch (e) {\r\n      console.warn('加载面板状态失败:', e);\r\n    }\r\n  }, []);\r\n\r\n  // 新增：保存面板显示状态到localStorage，并同步到全局状态\r\n  useEffect(() => {\r\n    try {\r\n      localStorage.setItem(panelStateKey, JSON.stringify(panelVisible));\r\n      // 同步到全局状态\r\n      setAsrPanelVisible(panelVisible);\r\n    } catch (e) {\r\n      console.warn('保存面板状态失败:', e);\r\n    }\r\n  }, [panelVisible, setAsrPanelVisible]);\r\n\r\n  // 监听全局状态变化，保持与局部状态同步（处理多实例或其他组件修改全局状态的情况）\r\n  useEffect(() => {\r\n    if (panelVisible !== asrPanelVisible) {\r\n      setPanelVisible(asrPanelVisible);\r\n    }\r\n  }, [asrPanelVisible]);\r\n\r\n  // 录制声纹相关函数\r\n  function startSpeakerRecording() {\r\n    if (isSpeakerRecording) return;\r\n\r\n    setSpeakerUploadStatus('请求麦克风权限...');\r\n    navigator.mediaDevices.getUserMedia({ audio: true })\r\n      .then((stream) => {\r\n        setSpeakerUploadStatus('开始录音2秒...');\r\n        speakerAudioChunksRef.current = [];\r\n        const options = { mimeType: 'audio/wav' };\r\n        let mediaRecorder;\r\n        try {\r\n          mediaRecorder = new MediaRecorder(stream, options);\r\n        } catch (e) {\r\n          mediaRecorder = new MediaRecorder(stream);\r\n        }\r\n        speakerRecorderRef.current = mediaRecorder;\r\n\r\n        mediaRecorder.ondataavailable = (event) => {\r\n          if (event.data && event.data.size > 0) {\r\n            speakerAudioChunksRef.current.push(event.data);\r\n          }\r\n        };\r\n\r\n        mediaRecorder.onstop = async () => {\r\n          setSpeakerUploadStatus('录音结束，准备上传...');\r\n          const blob = new Blob(speakerAudioChunksRef.current, { type: 'audio/wav' });\r\n\r\n          try {\r\n            const formData = new FormData();\r\n            formData.append('file', blob, 'speaker.wav');\r\n\r\n            const { uploadSpeakerUrl } = getDynamicUrls();\r\n\r\n            const res = await fetch(uploadSpeakerUrl, {\r\n              method: 'POST',\r\n              body: formData,\r\n            });\r\n\r\n            if (!res.ok) {\r\n              throw new Error(`上传失败，状态码: ${res.status}`);\r\n            }\r\n            const result = await res.json();\r\n            setSpeakerUploadStatus('上传成功');\r\n            console.log('上传成功，服务器返回：', result);\r\n          } catch (err) {\r\n            setSpeakerUploadStatus('上传失败: ' + err.message);\r\n            console.error('上传失败', err);\r\n          }\r\n          stream.getTracks().forEach(track => track.stop());\r\n          setTimeout(() => setSpeakerUploadStatus(''), 3000);\r\n          setIsSpeakerRecording(false);\r\n        };\r\n\r\n        mediaRecorder.start();\r\n\r\n        setIsSpeakerRecording(true);\r\n\r\n        setTimeout(() => {\r\n          if (speakerRecorderRef.current && speakerRecorderRef.current.state !== 'inactive') {\r\n            speakerRecorderRef.current.stop();\r\n          }\r\n        }, 2000);\r\n      })\r\n      .catch((err) => {\r\n        setSpeakerUploadStatus('获取麦克风权限失败: ' + err.message);\r\n        console.error('获取麦克风权限失败', err);\r\n      });\r\n  }\r\n\r\n  function stopSpeakerRecording() {\r\n    if (speakerRecorderRef.current && speakerRecorderRef.current.state !== 'inactive') {\r\n      speakerRecorderRef.current.stop();\r\n      setIsSpeakerRecording(false);\r\n    }\r\n  }\r\n\r\n  // 拖拽事件处理\r\n  useEffect(() => {\r\n    if (!micButtonRef.current) return;\r\n    const button = micButtonRef.current;\r\n\r\n    const savedPosStr = localStorage.getItem(storageKey);\r\n    let left = 26;\r\n    let top = 26;\r\n    if (savedPosStr) {\r\n      try {\r\n        const pos = JSON.parse(savedPosStr);\r\n        if (\r\n          typeof pos.left === 'number' &&\r\n          typeof pos.top === 'number' &&\r\n          pos.left >= 0 &&\r\n          pos.top >= 0\r\n        ) {\r\n          left = pos.left;\r\n          top = pos.top;\r\n        }\r\n      } catch {}\r\n    }\r\n\r\n    button.style.position = 'fixed';\r\n    button.style.left = `${left}px`;\r\n    button.style.top = `${top}px`;\r\n    button.style.zIndex = '10000';\r\n    button.style.cursor = 'grab';\r\n\r\n    isDraggingRef.current = false;\r\n    offsetXRef.current = 0;\r\n    offsetYRef.current = 0;\r\n\r\n    const onMouseDown = (e) => {\r\n      if (e.button !== 0) return;\r\n      isDraggingRef.current = true;\r\n      offsetXRef.current = e.clientX - button.offsetLeft;\r\n      offsetYRef.current = e.clientY - button.offsetTop;\r\n      button.style.cursor = 'grabbing';\r\n      e.preventDefault();\r\n    };\r\n    const onMouseMove = (e) => {\r\n      if (!isDraggingRef.current) return;\r\n      let newLeft = e.clientX - offsetXRef.current;\r\n      let newTop = e.clientY - offsetYRef.current;\r\n\r\n      const maxLeft = window.innerWidth - button.offsetWidth;\r\n      const maxTop = window.innerHeight - button.offsetHeight;\r\n      newLeft = Math.min(Math.max(0, newLeft), maxLeft);\r\n      newTop = Math.min(Math.max(0, newTop), maxTop);\r\n\r\n      button.style.left = `${newLeft}px`;\r\n      button.style.top = `${newTop}px`;\r\n    };\r\n    const onMouseUp = () => {\r\n      if (!isDraggingRef.current) return;\r\n      isDraggingRef.current = false;\r\n      button.style.cursor = 'grab';\r\n\r\n      localStorage.setItem(\r\n        storageKey,\r\n        JSON.stringify({ left: button.offsetLeft, top: button.offsetTop })\r\n      );\r\n    };\r\n\r\n    const onTouchStart = (e) => {\r\n      if (e.touches.length === 0) return;\r\n      isDraggingRef.current = true;\r\n      const touch = e.touches[0];\r\n      offsetXRef.current = touch.clientX - button.offsetLeft;\r\n      offsetYRef.current = touch.clientY - button.offsetTop;\r\n      button.style.cursor = 'grabbing';\r\n    };\r\n    const onTouchMove = (e) => {\r\n      if (!isDraggingRef.current || e.touches.length === 0) return;\r\n      const touch = e.touches[0];\r\n      let newLeft = touch.clientX - offsetXRef.current;\r\n      let newTop = touch.clientY - offsetYRef.current;\r\n\r\n      const maxLeft = window.innerWidth - button.offsetWidth;\r\n      const maxTop = window.innerHeight - button.offsetHeight;\r\n      newLeft = Math.min(Math.max(0, newLeft), maxLeft);\r\n      newTop = Math.min(Math.max(0, newTop), maxTop);\r\n\r\n      button.style.left = `${newLeft}px`;\r\n      button.style.top = `${newTop}px`;\r\n\r\n      e.preventDefault();\r\n    };\r\n    const onTouchEnd = () => {\r\n      if (!isDraggingRef.current) return;\r\n      isDraggingRef.current = false;\r\n      button.style.cursor = 'grab';\r\n\r\n      localStorage.setItem(\r\n        storageKey,\r\n        JSON.stringify({ left: button.offsetLeft, top: button.offsetTop })\r\n      );\r\n    };\r\n\r\n    button.addEventListener('mousedown', onMouseDown);\r\n    document.addEventListener('mousemove', onMouseMove);\r\n    document.addEventListener('mouseup', onMouseUp);\r\n\r\n    button.addEventListener('touchstart', onTouchStart, { passive: false });\r\n    document.addEventListener('touchmove', onTouchMove, { passive: false });\r\n    document.addEventListener('touchend', onTouchEnd);\r\n\r\n    return () => {\r\n      button.removeEventListener('mousedown', onMouseDown);\r\n      document.removeEventListener('mousemove', onMouseMove);\r\n      document.removeEventListener('mouseup', onMouseUp);\r\n\r\n      button.removeEventListener('touchstart', onTouchStart);\r\n      document.removeEventListener('touchmove', onTouchMove);\r\n      document.removeEventListener('touchend', onTouchEnd);\r\n    };\r\n  }, []);\r\n\r\n  // 波纹动画相关\r\n  const [ripples, setRipples] = useState([]);\r\n  const rippleCountRef = useRef(0);\r\n  const speakerButtonRef = useRef(null);\r\n\r\n  // 录制声纹按钮点击函数封装，附加波纹效果\r\n  const handleSpeakerRecordClick = (event) => {\r\n    if (isRecording || isSpeakerRecording) return;\r\n\r\n    createRipple(event);\r\n    startSpeakerRecording();\r\n  };\r\n\r\n  // 创建波纹，添加到ripples数组\r\n  const createRipple = (event) => {\r\n    if (!speakerButtonRef.current) return;\r\n\r\n    const rect = speakerButtonRef.current.getBoundingClientRect();\r\n    const size = Math.max(rect.width, rect.height);\r\n    const x = event.clientX - rect.left - size / 2;\r\n    const y = event.clientY - rect.top - size / 2;\r\n\r\n    const newRipple = {\r\n      key: rippleCountRef.current,\r\n      size,\r\n      x,\r\n      y,\r\n    };\r\n    rippleCountRef.current += 1;\r\n\r\n    setRipples((oldRipples) => [...oldRipples, newRipple]);\r\n\r\n    setTimeout(() => {\r\n      setRipples((oldRipples) => oldRipples.filter(r => r.key !== newRipple.key));\r\n    }, 1000);\r\n  };\r\n\r\n  // 新增：处理双击事件（区分单击和双击）\r\n  function handleMicClick() {\r\n    if (doubleClickTimerRef.current) {\r\n      // 双击事件：切换面板显示状态\r\n      clearTimeout(doubleClickTimerRef.current);\r\n      doubleClickTimerRef.current = null;\r\n      setPanelVisible(!panelVisible);\r\n    } else {\r\n      // 单击事件：处理录音\r\n      doubleClickTimerRef.current = setTimeout(function() {\r\n        if (isRecording) {\r\n          stopRecording();\r\n        } else {\r\n          startRecording();\r\n        }\r\n        doubleClickTimerRef.current = null;\r\n      }, 300); // 300ms内连续点击视为双击\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <style>{`\r\n        /* 麦克风按钮样式 */\r\n        #mic-button-wrapper {\r\n          position: fixed;\r\n          z-index: 10000;\r\n          user-select: none;\r\n          pointer-events: auto;\r\n          display: flex;\r\n          flex-direction: column;\r\n          align-items: center;\r\n          gap: 4px;\r\n        }\r\n\r\n        #listening-text {\r\n          font-size: 12px;\r\n          color: rgba(128, 128, 128, 0.7);\r\n          user-select: none;\r\n          pointer-events: none;\r\n          font-weight: 500;\r\n          opacity: 0;\r\n          transition: opacity 0.3s ease;\r\n          height: 16px;\r\n          line-height: 16px;\r\n        }\r\n        #listening-text.visible {\r\n          opacity: 1;\r\n        }\r\n\r\n        #mic-button {\r\n          background: none;\r\n          border: none;\r\n          padding: 0;\r\n          outline: none;\r\n          display: flex;\r\n          align-items: center;\r\n          justify-content: center;\r\n          filter: none;\r\n          transition: filter 0.3s ease;\r\n\r\n          width: 68px;\r\n          height: 68px;\r\n          cursor: grab;\r\n        }\r\n        #mic-button.recording {\r\n          filter: drop-shadow(0 0 5px red);\r\n        }\r\n        #mic-button img {\r\n          width: 48px;\r\n          height: 48px;\r\n          user-select: none;\r\n          pointer-events: none;\r\n          -webkit-user-drag: none;\r\n        }\r\n\r\n        /* 语言和声纹识别区域样式 */\r\n        #controls-container {\r\n          max-width: 700px;\r\n          margin: 20px auto 12px auto;\r\n          font-family: Arial, sans-serif;\r\n          color: white;\r\n          display: flex;\r\n          align-items: center;\r\n          gap: 20px;\r\n          user-select: none;\r\n          flex-wrap: wrap;\r\n        }\r\n        #controls-container label {\r\n          font-size: 14px;\r\n          user-select: none;\r\n          display: flex;\r\n          align-items: center;\r\n          gap: 6px;\r\n        }\r\n        #langInput, #wakeWordsInput {\r\n          padding: 6px;\r\n          font-size: 12px;\r\n          width: 140px;\r\n          background-color: #333;\r\n          border: 1px solid #666;\r\n          border-radius: 3px;\r\n          color: white;\r\n          user-select: text;\r\n        }\r\n        #speakerVerificationLabel {\r\n          font-size: 14px;\r\n        }\r\n        #wakeWordToggleLabel {\r\n          font-size: 14px;\r\n          display: flex;\r\n          align-items: center;\r\n          gap: 6px;\r\n        }\r\n\r\n        /* 纯 CSS 玻璃态录制声纹按钮 */\r\n        #speaker-record-button {\r\n          position: relative;\r\n          overflow: hidden;\r\n          background: rgba(255, 255, 255, 0.1);\r\n          border-radius: 16px;\r\n          border: 1px solid rgba(255, 255, 255, 0.3);\r\n          color: white;\r\n          padding: 3px 10px;\r\n          font-size: 13px;\r\n          font-weight: 600;\r\n          cursor: pointer;\r\n          user-select: none;\r\n          box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);\r\n          backdrop-filter: blur(10px);\r\n          -webkit-backdrop-filter: blur(12px);\r\n          WebkitBackdropFilter: 'blur(10px)',\r\n          transition: all 0.3s ease;\r\n          display: inline-flex;\r\n          align-items: center;\r\n          justify-content: center;\r\n          outline: none;\r\n          border-image: none;\r\n        }\r\n        #speaker-record-button:hover:not(:disabled) {\r\n          background: rgba(255, 255, 255, 0.2);\r\n          box-shadow: 0 8px 40px rgba(255, 255, 255, 0.3);\r\n          transform: scale(1.05);\r\n          filter: brightness(1.1);\r\n        }\r\n        #speaker-record-button:disabled {\r\n          opacity: 0.4;\r\n          cursor: not-allowed;\r\n          box-shadow: none;\r\n          background: rgba(255, 255, 255, 0.05);\r\n          filter: none;\r\n          transform: none;\r\n        }\r\n\r\n        /* 额外光泽层 */\r\n        #speaker-record-button::before {\r\n          content: '';\r\n          position: absolute;\r\n          top: -100%;\r\n          left: -100%;\r\n          width: 100%;\r\n          height: 100%;\r\n          background: radial-gradient(circle at 10% 10%, rgba(255, 255, 255, 0.3), transparent 10%);\r\n          pointer-events: none;\r\n          filter: blur(10px);\r\n          opacity: 0.6;\r\n          transition: opacity 0.3s ease;\r\n          border-radius: inherit;\r\n          z-index: 0;\r\n        }\r\n\r\n        /* 保留波纹效果的样式 */\r\n        .ripple {\r\n          position: absolute;\r\n          border-radius: 150%;\r\n          background: rgba(91, 155, 255, 0.7);\r\n          animation: rippleEffect 1s ease-out;\r\n          pointer-events: none;\r\n          transform: scale(0);\r\n          opacity: 0.75;\r\n          z-index: 1;\r\n        }\r\n\r\n        @keyframes rippleEffect {\r\n          to {\r\n            transform: scale(4);\r\n            opacity: 0;\r\n          }\r\n        }\r\n\r\n        /* 新增：面板显示/隐藏控制 */\r\n        #audio-panel-content {\r\n          transition: all 0.3s ease;\r\n        }\r\n        #audio-panel-content.hidden {\r\n          display: none;\r\n        }\r\n      `}</style>\r\n\r\n      {/* 麦克风及“聆听中”容器，控制整体定位、拖拽 */}\r\n      <div\r\n        id=\"mic-button-wrapper\"\r\n        ref={micButtonRef}\r\n        style={{ left: 26, top: 26, position: 'fixed' }}\r\n      >\r\n        <div id=\"listening-text\" className={isRecording ? 'visible' : ''} aria-live=\"polite\" role=\"status\">\r\n          聆听中...\r\n        </div>\r\n\r\n        <button\r\n          id=\"mic-button\"\r\n          className={isRecording ? 'recording' : ''}\r\n          onClick={handleMicClick}\r\n          onDoubleClick={(e) => e.preventDefault()}\r\n          aria-label={isRecording ? '停止录音' : '开始录音'}\r\n          title={isRecording ? '点击停止录音，双击切换面板' : '点击开始录音，双击切换面板'}\r\n          type=\"button\"\r\n          disabled={isSpeakerRecording}\r\n        >\r\n          <img\r\n            src=\"/core/client/ai-butler/image/mic-icon.png\"\r\n            alt=\"麦克风\"\r\n            draggable={false}\r\n          />\r\n        </button>\r\n      </div>\r\n\r\n      {/* 新增：面板内容容器（控制显示/隐藏） */}\r\n      <div id=\"audio-panel-content\" className={panelVisible ? '' : 'hidden'}>\r\n        {/* 语言、声纹识别及语音唤醒控制区域 */}\r\n        <div id=\"controls-container\" aria-label=\"语音识别设置\">\r\n\r\n          <label htmlFor=\"langInput\">语言：</label>\r\n          <input\r\n            id=\"langInput\"\r\n            type=\"text\"\r\n            value={lang}\r\n            onChange={(e) => setLang(e.target.value)}\r\n            disabled={isRecording || isSpeakerRecording}\r\n            placeholder=\"auto\"\r\n            autoComplete=\"off\"\r\n          />\r\n\r\n          <label id=\"speakerVerificationLabel\" htmlFor=\"speakerVerificationCheckbox\">\r\n            <input\r\n              id=\"speakerVerificationCheckbox\"\r\n              type=\"checkbox\"\r\n              checked={speakerVerification}\r\n              disabled={isRecording || isSpeakerRecording}\r\n              onChange={(e) => setSpeakerVerification(e.target.checked)}\r\n            />\r\n            声纹识别\r\n          </label>\r\n\r\n          {/* 语音唤醒开关 */}\r\n          <label id=\"wakeWordToggleLabel\" htmlFor=\"wakeWordToggleCheckbox\">\r\n            <input\r\n              id=\"wakeWordToggleCheckbox\"\r\n              type=\"checkbox\"\r\n              checked={wakeWordEnabled}\r\n              disabled={isRecording || isSpeakerRecording}\r\n              onChange={(e) => setWakeWordEnabled(e.target.checked)}\r\n            />\r\n            语音唤醒\r\n          </label>\r\n\r\n          {/* 唤醒词输入框 */}\r\n          <label htmlFor=\"wakeWordsInput\" style={{ flexGrow: 1 }}>\r\n            唤醒词（拼音，多个用逗号分隔）：\r\n            <input\r\n              id=\"wakeWordsInput\"\r\n              type=\"text\"\r\n              value={wakeWords}\r\n              onChange={(e) => setWakeWords(e.target.value)}\r\n              disabled={isRecording || isSpeakerRecording || !wakeWordEnabled}\r\n              placeholder=\"如：zhan qi lai, ni hao xiao qian\"\r\n              autoComplete=\"off\"\r\n              style={{ marginLeft: 8 }}\r\n            />\r\n          </label>\r\n\r\n          {/* 纯 CSS 玻璃态录制声纹按钮 */}\r\n          <button\r\n            id=\"speaker-record-button\"\r\n            ref={speakerButtonRef}\r\n            onClick={handleSpeakerRecordClick}\r\n            disabled={isRecording || isSpeakerRecording}\r\n            type=\"button\"\r\n            aria-live=\"polite\"\r\n            aria-label=\"录制声纹\"\r\n            title=\"录制约2秒声音用于声纹识别，录制完成自动上传\"\r\n          >\r\n            录制声纹 (2秒)\r\n            {ripples.map(({ key, size, x, y }) => (\r\n              <span\r\n                key={key}\r\n                className=\"ripple\"\r\n                style={{\r\n                  width: size,\r\n                  height: size,\r\n                  top: y,\r\n                  left: x,\r\n                }}\r\n              />\r\n            ))}\r\n          </button>\r\n        </div>\r\n\r\n        {/* 声纹上传状态显示 */}\r\n        {speakerUploadStatus && (\r\n          <div\r\n            id=\"speaker-record-status\"\r\n            role=\"alert\"\r\n            aria-live=\"polite\"\r\n            aria-atomic=\"true\"\r\n            style={{ maxWidth: 700, margin: '4px auto 0 auto' }}\r\n          >\r\n            {speakerUploadStatus}\r\n          </div>\r\n        )}\r\n\r\n        {/* 转写结果展示 */}\r\n        <div\r\n          id=\"transcriptionResult\"\r\n          style={{\r\n            maxWidth: 700,\r\n            margin: '12px auto 20px auto',\r\n            fontFamily: 'Arial, sans-serif',\r\n            whiteSpace: 'pre-wrap',\r\n            backgroundColor: 'transparent',\r\n            padding: 10,\r\n            border: '1px solid transparent',\r\n            borderRadius: 5,\r\n            minHeight: 150,\r\n            fontFamily: 'monospace',\r\n            fontSize: 14,\r\n            overflowY: 'auto',\r\n            maxHeight: 300,\r\n            userSelect: 'text',\r\n            color: transcription ? 'white' : 'rgba(255, 255, 255, 0.5)',\r\n          }}\r\n        >\r\n          {transcription || '识别文字展示区...'}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}