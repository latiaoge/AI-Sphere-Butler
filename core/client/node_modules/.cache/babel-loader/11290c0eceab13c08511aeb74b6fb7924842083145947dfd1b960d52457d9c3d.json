{"ast":null,"code":"var _jsxFileName = \"D:\\\\XM\\\\AI-Sphere-Butler\\\\core\\\\client\\\\src\\\\contexts\\\\RecorderProvider.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useRef, useEffect, useContext } from 'react';\nimport { useRecorder } from '../hooks/useRecorder';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RecorderContext = /*#__PURE__*/createContext(null);\nexport function RecorderProvider({\n  children\n}) {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [transcription, setTranscription] = useState('');\n  const [lang, setLang] = useState(() => {\n    try {\n      return localStorage.getItem('audioTranscriberLang') || 'auto';\n    } catch {\n      return 'auto';\n    }\n  });\n  const [speakerVerification, setSpeakerVerification] = useState(() => {\n    try {\n      return localStorage.getItem('audioTranscriberSpeakerVerification') === 'true';\n    } catch {\n      return false;\n    }\n  });\n  const recorder = useRecorder();\n  const wsRef = useRef(null);\n  const intervalRef = useRef(null);\n  const unmountedRef = useRef(false);\n  const sendTextMessage = async text => {\n    if (!text.trim()) return;\n    try {\n      const response = await fetch('https://192.168.1.70:6010/qwener', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text\n        })\n      });\n      if (!response.ok) throw new Error('网络响应失败，状态码: ' + response.status);\n      const data = await response.json();\n      console.log('文本发送成功，服务器返回：', data);\n    } catch (error) {\n      console.error('文本发送失败：', error);\n    }\n  };\n  const stopRecording = () => {\n    if (!isRecording) {\n      console.log('[stopRecording] 当前非录音状态，忽略重复调用');\n      return;\n    }\n    console.trace('[stopRecording] 停止录音流程启动，调用栈');\n    if (wsRef.current) {\n      console.log('[stopRecording] 关闭 WebSocket 连接');\n      wsRef.current.onclose = null; // 避免触发 onclose 回调死循环\n      wsRef.current.close();\n      wsRef.current = null;\n    }\n    recorder.stop();\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n    setIsRecording(false);\n  };\n  const startRecording = () => {\n    if (isRecording) {\n      console.log('[startRecording] 已经在录音中，忽略重复调用');\n      return;\n    }\n    setIsRecording(true); // 先置为true，防止重复调用\n\n    console.log('[startRecording] 请求麦克风权限...');\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(() => {\n      if (unmountedRef.current) {\n        stopRecording();\n        return;\n      }\n      let params = [];\n      if (lang) params.push(`lang=${encodeURIComponent(lang)}`);\n      if (speakerVerification) params.push('sv=1');\n      const queryStr = params.length > 0 ? `?${params.join('&')}` : '';\n      const wsUrl = `ws://192.168.168.77:6007/ws/transcribe${queryStr}`;\n      console.log('[startRecording] 创建 WebSocket 连接', wsUrl);\n      const ws = new WebSocket(wsUrl);\n      ws.binaryType = 'arraybuffer';\n      ws.onopen = () => {\n        console.log('[WebSocket] 连接已打开');\n        recorder.start().then(() => {\n          console.log('[Recorder] 录音开始');\n          // isRecording 之前已设置true，无需重复set\n          intervalRef.current = setInterval(() => {\n            if (ws.readyState === 1) {\n              const audioBlob = recorder.getAudioBlob();\n              if (audioBlob.size > 0) {\n                console.log('[WebSocket] 发送音频数据，大小：', audioBlob.size);\n                ws.send(audioBlob);\n                recorder.clearBuffer();\n              }\n            }\n          }, 500);\n        }).catch(e => {\n          alert('启动录音失败: ' + e.message);\n          console.error('[Recorder] 启动失败', e);\n          ws.close();\n          setIsRecording(false);\n        });\n      };\n      ws.onmessage = evt => {\n        try {\n          const resJson = JSON.parse(evt.data);\n          if (resJson.code === 0) {\n            const recognizedText = resJson.data || '无识别结果';\n            setTranscription(prev => prev ? prev + '\\n' + recognizedText : recognizedText);\n            if (recognizedText && recognizedText.trim() && recognizedText !== '无识别结果') {\n              sendTextMessage(recognizedText);\n            }\n          } else {\n            console.warn('[WebSocket] 返回非0 code:', resJson);\n          }\n        } catch (e) {\n          console.error('[WebSocket] 解析转写消息失败', e);\n          setTranscription(prev => prev ? prev + '\\n' + evt.data : evt.data);\n        }\n      };\n      ws.onclose = event => {\n        console.log('[WebSocket] 连接关闭，代码:', event.code, '原因:', event.reason);\n        // 不再调用 stopRecording，防止死循环\n        setIsRecording(false);\n        if (intervalRef.current) {\n          clearInterval(intervalRef.current);\n          intervalRef.current = null;\n        }\n        wsRef.current = null;\n      };\n      ws.onerror = e => {\n        console.error('[WebSocket] 错误', e);\n        alert('WebSocket 连接出错，请检查服务器状态和网络连接。');\n      };\n      wsRef.current = ws;\n    }).catch(error => {\n      alert('请求麦克风权限失败: ' + error.message);\n      console.error('[startRecording] 获取麦克风权限失败', error);\n      setIsRecording(false);\n    });\n  };\n  useEffect(() => {\n    try {\n      localStorage.setItem('audioTranscriberLang', lang);\n    } catch {}\n  }, [lang]);\n  useEffect(() => {\n    try {\n      localStorage.setItem('audioTranscriberSpeakerVerification', speakerVerification.toString());\n    } catch {}\n  }, [speakerVerification]);\n  useEffect(() => {\n    unmountedRef.current = false;\n    return () => {\n      unmountedRef.current = true;\n      stopRecording();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(RecorderContext.Provider, {\n    value: {\n      isRecording,\n      transcription,\n      lang,\n      speakerVerification,\n      setLang,\n      setSpeakerVerification,\n      startRecording,\n      stopRecording,\n      setTranscription\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n}\n_s(RecorderProvider, \"6YE2lZxmcKFWbmgaj5U70vYc/mc=\", false, function () {\n  return [useRecorder];\n});\n_c = RecorderProvider;\nexport function useRecorderContext() {\n  _s2();\n  const context = useContext(RecorderContext);\n  if (!context) {\n    throw new Error('useRecorderContext 必须在 RecorderProvider 内使用');\n  }\n  return context;\n}\n_s2(useRecorderContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"RecorderProvider\");","map":{"version":3,"names":["React","createContext","useState","useRef","useEffect","useContext","useRecorder","jsxDEV","_jsxDEV","RecorderContext","RecorderProvider","children","_s","isRecording","setIsRecording","transcription","setTranscription","lang","setLang","localStorage","getItem","speakerVerification","setSpeakerVerification","recorder","wsRef","intervalRef","unmountedRef","sendTextMessage","text","trim","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","console","log","error","stopRecording","trace","current","onclose","close","stop","clearInterval","startRecording","navigator","mediaDevices","getUserMedia","audio","then","params","push","encodeURIComponent","queryStr","length","join","wsUrl","ws","WebSocket","binaryType","onopen","start","setInterval","readyState","audioBlob","getAudioBlob","size","send","clearBuffer","catch","e","alert","message","onmessage","evt","resJson","parse","code","recognizedText","prev","warn","event","reason","onerror","setItem","toString","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useRecorderContext","_s2","context","$RefreshReg$"],"sources":["D:/XM/AI-Sphere-Butler/core/client/src/contexts/RecorderProvider.jsx"],"sourcesContent":["import React, { createContext, useState, useRef, useEffect, useContext } from 'react';\r\nimport { useRecorder } from '../hooks/useRecorder';\r\n\r\nconst RecorderContext = createContext(null);\r\n\r\nexport function RecorderProvider({ children }) {\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [transcription, setTranscription] = useState('');\r\n  const [lang, setLang] = useState(() => {\r\n    try {\r\n      return localStorage.getItem('audioTranscriberLang') || 'auto';\r\n    } catch {\r\n      return 'auto';\r\n    }\r\n  });\r\n  const [speakerVerification, setSpeakerVerification] = useState(() => {\r\n    try {\r\n      return localStorage.getItem('audioTranscriberSpeakerVerification') === 'true';\r\n    } catch {\r\n      return false;\r\n    }\r\n  });\r\n\r\n  const recorder = useRecorder();\r\n\r\n  const wsRef = useRef(null);\r\n  const intervalRef = useRef(null);\r\n  const unmountedRef = useRef(false);\r\n\r\n  const sendTextMessage = async (text) => {\r\n    if (!text.trim()) return;\r\n    try {\r\n      const response = await fetch('https://192.168.1.70:6010/qwener', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ text }),\r\n      });\r\n      if (!response.ok) throw new Error('网络响应失败，状态码: ' + response.status);\r\n      const data = await response.json();\r\n      console.log('文本发送成功，服务器返回：', data);\r\n    } catch (error) {\r\n      console.error('文本发送失败：', error);\r\n    }\r\n  };\r\n\r\n  const stopRecording = () => {\r\n    if (!isRecording) {\r\n      console.log('[stopRecording] 当前非录音状态，忽略重复调用');\r\n      return;\r\n    }\r\n    console.trace('[stopRecording] 停止录音流程启动，调用栈');\r\n    if (wsRef.current) {\r\n      console.log('[stopRecording] 关闭 WebSocket 连接');\r\n      wsRef.current.onclose = null; // 避免触发 onclose 回调死循环\r\n      wsRef.current.close();\r\n      wsRef.current = null;\r\n    }\r\n    recorder.stop();\r\n    if (intervalRef.current) {\r\n      clearInterval(intervalRef.current);\r\n      intervalRef.current = null;\r\n    }\r\n    setIsRecording(false);\r\n  };\r\n\r\n  const startRecording = () => {\r\n    if (isRecording) {\r\n      console.log('[startRecording] 已经在录音中，忽略重复调用');\r\n      return;\r\n    }\r\n\r\n    setIsRecording(true); // 先置为true，防止重复调用\r\n\r\n    console.log('[startRecording] 请求麦克风权限...');\r\n    navigator.mediaDevices.getUserMedia({ audio: true })\r\n      .then(() => {\r\n        if (unmountedRef.current) {\r\n          stopRecording();\r\n          return;\r\n        }\r\n        let params = [];\r\n        if (lang) params.push(`lang=${encodeURIComponent(lang)}`);\r\n        if (speakerVerification) params.push('sv=1');\r\n        const queryStr = params.length > 0 ? `?${params.join('&')}` : '';\r\n\r\n        const wsUrl = `ws://192.168.168.77:6007/ws/transcribe${queryStr}`;\r\n        console.log('[startRecording] 创建 WebSocket 连接', wsUrl);\r\n        const ws = new WebSocket(wsUrl);\r\n        ws.binaryType = 'arraybuffer';\r\n\r\n        ws.onopen = () => {\r\n          console.log('[WebSocket] 连接已打开');\r\n          recorder.start()\r\n            .then(() => {\r\n              console.log('[Recorder] 录音开始');\r\n              // isRecording 之前已设置true，无需重复set\r\n              intervalRef.current = setInterval(() => {\r\n                if (ws.readyState === 1) {\r\n                  const audioBlob = recorder.getAudioBlob();\r\n                  if (audioBlob.size > 0) {\r\n                    console.log('[WebSocket] 发送音频数据，大小：', audioBlob.size);\r\n                    ws.send(audioBlob);\r\n                    recorder.clearBuffer();\r\n                  }\r\n                }\r\n              }, 500);\r\n            })\r\n            .catch(e => {\r\n              alert('启动录音失败: ' + e.message);\r\n              console.error('[Recorder] 启动失败', e);\r\n              ws.close();\r\n              setIsRecording(false);\r\n            });\r\n        };\r\n\r\n        ws.onmessage = evt => {\r\n          try {\r\n            const resJson = JSON.parse(evt.data);\r\n            if (resJson.code === 0) {\r\n              const recognizedText = resJson.data || '无识别结果';\r\n              setTranscription(prev => (prev ? prev + '\\n' + recognizedText : recognizedText));\r\n              if (recognizedText && recognizedText.trim() && recognizedText !== '无识别结果') {\r\n                sendTextMessage(recognizedText);\r\n              }\r\n            } else {\r\n              console.warn('[WebSocket] 返回非0 code:', resJson);\r\n            }\r\n          } catch (e) {\r\n            console.error('[WebSocket] 解析转写消息失败', e);\r\n            setTranscription(prev => (prev ? prev + '\\n' + evt.data : evt.data));\r\n          }\r\n        };\r\n\r\n        ws.onclose = (event) => {\r\n          console.log('[WebSocket] 连接关闭，代码:', event.code, '原因:', event.reason);\r\n          // 不再调用 stopRecording，防止死循环\r\n          setIsRecording(false);\r\n          if (intervalRef.current) {\r\n            clearInterval(intervalRef.current);\r\n            intervalRef.current = null;\r\n          }\r\n          wsRef.current = null;\r\n        };\r\n\r\n        ws.onerror = (e) => {\r\n          console.error('[WebSocket] 错误', e);\r\n          alert('WebSocket 连接出错，请检查服务器状态和网络连接。');\r\n        };\r\n\r\n        wsRef.current = ws;\r\n      })\r\n      .catch(error => {\r\n        alert('请求麦克风权限失败: ' + error.message);\r\n        console.error('[startRecording] 获取麦克风权限失败', error);\r\n        setIsRecording(false);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    try { localStorage.setItem('audioTranscriberLang', lang); } catch {}\r\n  }, [lang]);\r\n\r\n  useEffect(() => {\r\n    try { localStorage.setItem('audioTranscriberSpeakerVerification', speakerVerification.toString()); } catch {}\r\n  }, [speakerVerification]);\r\n\r\n  useEffect(() => {\r\n    unmountedRef.current = false;\r\n    return () => {\r\n      unmountedRef.current = true;\r\n      stopRecording();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <RecorderContext.Provider value={{\r\n      isRecording,\r\n      transcription,\r\n      lang,\r\n      speakerVerification,\r\n      setLang,\r\n      setSpeakerVerification,\r\n      startRecording,\r\n      stopRecording,\r\n      setTranscription,\r\n    }}>\r\n      {children}\r\n    </RecorderContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useRecorderContext() {\r\n  const context = useContext(RecorderContext);\r\n  if (!context) {\r\n    throw new Error('useRecorderContext 必须在 RecorderProvider 内使用');\r\n  }\r\n  return context;\r\n}\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AACrF,SAASC,WAAW,QAAQ,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,eAAe,gBAAGR,aAAa,CAAC,IAAI,CAAC;AAE3C,OAAO,SAASS,gBAAgBA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAC7C,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACa,aAAa,EAAEC,gBAAgB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACe,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAC,MAAM;IACrC,IAAI;MACF,OAAOiB,YAAY,CAACC,OAAO,CAAC,sBAAsB,CAAC,IAAI,MAAM;IAC/D,CAAC,CAAC,MAAM;MACN,OAAO,MAAM;IACf;EACF,CAAC,CAAC;EACF,MAAM,CAACC,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGpB,QAAQ,CAAC,MAAM;IACnE,IAAI;MACF,OAAOiB,YAAY,CAACC,OAAO,CAAC,qCAAqC,CAAC,KAAK,MAAM;IAC/E,CAAC,CAAC,MAAM;MACN,OAAO,KAAK;IACd;EACF,CAAC,CAAC;EAEF,MAAMG,QAAQ,GAAGjB,WAAW,CAAC,CAAC;EAE9B,MAAMkB,KAAK,GAAGrB,MAAM,CAAC,IAAI,CAAC;EAC1B,MAAMsB,WAAW,GAAGtB,MAAM,CAAC,IAAI,CAAC;EAChC,MAAMuB,YAAY,GAAGvB,MAAM,CAAC,KAAK,CAAC;EAElC,MAAMwB,eAAe,GAAG,MAAOC,IAAI,IAAK;IACtC,IAAI,CAACA,IAAI,CAACC,IAAI,CAAC,CAAC,EAAE;IAClB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EAAE;QAC/DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAER;QAAK,CAAC;MAC/B,CAAC,CAAC;MACF,IAAI,CAACE,QAAQ,CAACO,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,cAAc,GAAGR,QAAQ,CAACS,MAAM,CAAC;MACnE,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MAClCC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEH,IAAI,CAAC;IACpC,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;IACjC;EACF,CAAC;EAED,MAAMC,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAI,CAAChC,WAAW,EAAE;MAChB6B,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;MAC7C;IACF;IACAD,OAAO,CAACI,KAAK,CAAC,8BAA8B,CAAC;IAC7C,IAAItB,KAAK,CAACuB,OAAO,EAAE;MACjBL,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;MAC9CnB,KAAK,CAACuB,OAAO,CAACC,OAAO,GAAG,IAAI,CAAC,CAAC;MAC9BxB,KAAK,CAACuB,OAAO,CAACE,KAAK,CAAC,CAAC;MACrBzB,KAAK,CAACuB,OAAO,GAAG,IAAI;IACtB;IACAxB,QAAQ,CAAC2B,IAAI,CAAC,CAAC;IACf,IAAIzB,WAAW,CAACsB,OAAO,EAAE;MACvBI,aAAa,CAAC1B,WAAW,CAACsB,OAAO,CAAC;MAClCtB,WAAW,CAACsB,OAAO,GAAG,IAAI;IAC5B;IACAjC,cAAc,CAAC,KAAK,CAAC;EACvB,CAAC;EAED,MAAMsC,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAIvC,WAAW,EAAE;MACf6B,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;MAC7C;IACF;IAEA7B,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;;IAEtB4B,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC1CU,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC,CACjDC,IAAI,CAAC,MAAM;MACV,IAAI/B,YAAY,CAACqB,OAAO,EAAE;QACxBF,aAAa,CAAC,CAAC;QACf;MACF;MACA,IAAIa,MAAM,GAAG,EAAE;MACf,IAAIzC,IAAI,EAAEyC,MAAM,CAACC,IAAI,CAAC,QAAQC,kBAAkB,CAAC3C,IAAI,CAAC,EAAE,CAAC;MACzD,IAAII,mBAAmB,EAAEqC,MAAM,CAACC,IAAI,CAAC,MAAM,CAAC;MAC5C,MAAME,QAAQ,GAAGH,MAAM,CAACI,MAAM,GAAG,CAAC,GAAG,IAAIJ,MAAM,CAACK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE;MAEhE,MAAMC,KAAK,GAAG,yCAAyCH,QAAQ,EAAE;MACjEnB,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEqB,KAAK,CAAC;MACtD,MAAMC,EAAE,GAAG,IAAIC,SAAS,CAACF,KAAK,CAAC;MAC/BC,EAAE,CAACE,UAAU,GAAG,aAAa;MAE7BF,EAAE,CAACG,MAAM,GAAG,MAAM;QAChB1B,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;QAChCpB,QAAQ,CAAC8C,KAAK,CAAC,CAAC,CACbZ,IAAI,CAAC,MAAM;UACVf,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;UAC9B;UACAlB,WAAW,CAACsB,OAAO,GAAGuB,WAAW,CAAC,MAAM;YACtC,IAAIL,EAAE,CAACM,UAAU,KAAK,CAAC,EAAE;cACvB,MAAMC,SAAS,GAAGjD,QAAQ,CAACkD,YAAY,CAAC,CAAC;cACzC,IAAID,SAAS,CAACE,IAAI,GAAG,CAAC,EAAE;gBACtBhC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAE6B,SAAS,CAACE,IAAI,CAAC;gBACrDT,EAAE,CAACU,IAAI,CAACH,SAAS,CAAC;gBAClBjD,QAAQ,CAACqD,WAAW,CAAC,CAAC;cACxB;YACF;UACF,CAAC,EAAE,GAAG,CAAC;QACT,CAAC,CAAC,CACDC,KAAK,CAACC,CAAC,IAAI;UACVC,KAAK,CAAC,UAAU,GAAGD,CAAC,CAACE,OAAO,CAAC;UAC7BtC,OAAO,CAACE,KAAK,CAAC,iBAAiB,EAAEkC,CAAC,CAAC;UACnCb,EAAE,CAAChB,KAAK,CAAC,CAAC;UACVnC,cAAc,CAAC,KAAK,CAAC;QACvB,CAAC,CAAC;MACN,CAAC;MAEDmD,EAAE,CAACgB,SAAS,GAAGC,GAAG,IAAI;QACpB,IAAI;UACF,MAAMC,OAAO,GAAGhD,IAAI,CAACiD,KAAK,CAACF,GAAG,CAAC1C,IAAI,CAAC;UACpC,IAAI2C,OAAO,CAACE,IAAI,KAAK,CAAC,EAAE;YACtB,MAAMC,cAAc,GAAGH,OAAO,CAAC3C,IAAI,IAAI,OAAO;YAC9CxB,gBAAgB,CAACuE,IAAI,IAAKA,IAAI,GAAGA,IAAI,GAAG,IAAI,GAAGD,cAAc,GAAGA,cAAe,CAAC;YAChF,IAAIA,cAAc,IAAIA,cAAc,CAACzD,IAAI,CAAC,CAAC,IAAIyD,cAAc,KAAK,OAAO,EAAE;cACzE3D,eAAe,CAAC2D,cAAc,CAAC;YACjC;UACF,CAAC,MAAM;YACL5C,OAAO,CAAC8C,IAAI,CAAC,wBAAwB,EAAEL,OAAO,CAAC;UACjD;QACF,CAAC,CAAC,OAAOL,CAAC,EAAE;UACVpC,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEkC,CAAC,CAAC;UACxC9D,gBAAgB,CAACuE,IAAI,IAAKA,IAAI,GAAGA,IAAI,GAAG,IAAI,GAAGL,GAAG,CAAC1C,IAAI,GAAG0C,GAAG,CAAC1C,IAAK,CAAC;QACtE;MACF,CAAC;MAEDyB,EAAE,CAACjB,OAAO,GAAIyC,KAAK,IAAK;QACtB/C,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAE8C,KAAK,CAACJ,IAAI,EAAE,KAAK,EAAEI,KAAK,CAACC,MAAM,CAAC;QACpE;QACA5E,cAAc,CAAC,KAAK,CAAC;QACrB,IAAIW,WAAW,CAACsB,OAAO,EAAE;UACvBI,aAAa,CAAC1B,WAAW,CAACsB,OAAO,CAAC;UAClCtB,WAAW,CAACsB,OAAO,GAAG,IAAI;QAC5B;QACAvB,KAAK,CAACuB,OAAO,GAAG,IAAI;MACtB,CAAC;MAEDkB,EAAE,CAAC0B,OAAO,GAAIb,CAAC,IAAK;QAClBpC,OAAO,CAACE,KAAK,CAAC,gBAAgB,EAAEkC,CAAC,CAAC;QAClCC,KAAK,CAAC,+BAA+B,CAAC;MACxC,CAAC;MAEDvD,KAAK,CAACuB,OAAO,GAAGkB,EAAE;IACpB,CAAC,CAAC,CACDY,KAAK,CAACjC,KAAK,IAAI;MACdmC,KAAK,CAAC,aAAa,GAAGnC,KAAK,CAACoC,OAAO,CAAC;MACpCtC,OAAO,CAACE,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD9B,cAAc,CAAC,KAAK,CAAC;IACvB,CAAC,CAAC;EACN,CAAC;EAEDV,SAAS,CAAC,MAAM;IACd,IAAI;MAAEe,YAAY,CAACyE,OAAO,CAAC,sBAAsB,EAAE3E,IAAI,CAAC;IAAE,CAAC,CAAC,MAAM,CAAC;EACrE,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EAEVb,SAAS,CAAC,MAAM;IACd,IAAI;MAAEe,YAAY,CAACyE,OAAO,CAAC,qCAAqC,EAAEvE,mBAAmB,CAACwE,QAAQ,CAAC,CAAC,CAAC;IAAE,CAAC,CAAC,MAAM,CAAC;EAC9G,CAAC,EAAE,CAACxE,mBAAmB,CAAC,CAAC;EAEzBjB,SAAS,CAAC,MAAM;IACdsB,YAAY,CAACqB,OAAO,GAAG,KAAK;IAC5B,OAAO,MAAM;MACXrB,YAAY,CAACqB,OAAO,GAAG,IAAI;MAC3BF,aAAa,CAAC,CAAC;IACjB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACErC,OAAA,CAACC,eAAe,CAACqF,QAAQ;IAACC,KAAK,EAAE;MAC/BlF,WAAW;MACXE,aAAa;MACbE,IAAI;MACJI,mBAAmB;MACnBH,OAAO;MACPI,sBAAsB;MACtB8B,cAAc;MACdP,aAAa;MACb7B;IACF,CAAE;IAAAL,QAAA,EACCA;EAAQ;IAAAqF,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B;AAACvF,EAAA,CAxLeF,gBAAgB;EAAA,QAkBbJ,WAAW;AAAA;AAAA8F,EAAA,GAlBd1F,gBAAgB;AA0LhC,OAAO,SAAS2F,kBAAkBA,CAAA,EAAG;EAAAC,GAAA;EACnC,MAAMC,OAAO,GAAGlG,UAAU,CAACI,eAAe,CAAC;EAC3C,IAAI,CAAC8F,OAAO,EAAE;IACZ,MAAM,IAAIjE,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOiE,OAAO;AAChB;AAACD,GAAA,CANeD,kBAAkB;AAAA,IAAAD,EAAA;AAAAI,YAAA,CAAAJ,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}