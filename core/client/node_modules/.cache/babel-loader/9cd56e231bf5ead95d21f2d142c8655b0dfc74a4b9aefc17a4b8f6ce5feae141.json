{"ast":null,"code":"var _jsxFileName = \"D:\\\\XM\\\\AI-Sphere-Butler\\\\core\\\\client\\\\src\\\\components\\\\ButlersContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// ButlersContext.js\nimport React, { createContext, useState, useContext } from 'react';\n\n// 初始管家数据\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialButlers = [{\n  id: 'cs',\n  name: '管家禅师',\n  type: 'video',\n  src: '/core/client/ai-butler/video/豆包禅师.mp4'\n}, {\n  id: 'xl',\n  name: '管家小粒',\n  type: 'video',\n  src: '/core/client/ai-butler/video/小粒.mp4'\n}, {\n  id: 'butler3',\n  name: '管家小贾',\n  type: 'video',\n  src: '/core/client/ai-butler/video/小贾.mp4'\n}, {\n  id: 'butler4',\n  name: '管家星期天',\n  type: 'video',\n  src: '/core/client/ai-butler/video/星期天.mp4'\n}];\n\n// 创建Context\nconst ButlerContext = /*#__PURE__*/createContext({\n  activeButlerId: initialButlers[0].id,\n  setActiveButlerId: () => {},\n  butlers: initialButlers,\n  addButler: () => {} // 空函数，防止未包裹Provider报错\n});\n\n// Provider组件\nexport function ButlerProvider({\n  children\n}) {\n  _s();\n  // 用useState管理动态butlers\n  const [butlers, setButlers] = useState(initialButlers);\n  const [activeButlerId, setActiveButlerId] = useState(initialButlers[0].id);\n\n  // 动态添加管家方法\n  function addButler(newButler) {\n    setButlers(prevButlers => {\n      // 防止重复id，简单过滤\n      const exists = prevButlers.some(b => b.id === newButler.id);\n      if (exists) {\n        // 这里也可以改为更新逻辑\n        return prevButlers;\n      }\n      return [...prevButlers, newButler];\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(ButlerContext.Provider, {\n    value: {\n      activeButlerId,\n      setActiveButlerId,\n      butlers,\n      addButler\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n\n// 自定义hook\n_s(ButlerProvider, \"mXDsX7KHQ9dZcqIG1Q9QvIOLgPw=\");\n_c = ButlerProvider;\nexport function useButler() {\n  _s2();\n  return useContext(ButlerContext);\n}\n_s2(useButler, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"ButlerProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","initialButlers","id","name","type","src","ButlerContext","activeButlerId","setActiveButlerId","butlers","addButler","ButlerProvider","children","_s","setButlers","newButler","prevButlers","exists","some","b","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useButler","_s2","$RefreshReg$"],"sources":["D:/XM/AI-Sphere-Butler/core/client/src/components/ButlersContext.js"],"sourcesContent":["// ButlersContext.js\r\nimport React, { createContext, useState, useContext } from 'react';\r\n\r\n// 初始管家数据\r\nconst initialButlers = [\r\n  {\r\n    id: 'cs',\r\n    name: '管家禅师',\r\n    type: 'video',\r\n    src: '/core/client/ai-butler/video/豆包禅师.mp4',\r\n  },\r\n  {\r\n    id: 'xl',\r\n    name: '管家小粒',\r\n    type: 'video',\r\n    src: '/core/client/ai-butler/video/小粒.mp4',\r\n  },\r\n  {\r\n    id: 'butler3',\r\n    name: '管家小贾',\r\n    type: 'video',\r\n    src: '/core/client/ai-butler/video/小贾.mp4',\r\n  },\r\n  {\r\n    id: 'butler4',\r\n    name: '管家星期天',\r\n    type: 'video',\r\n    src: '/core/client/ai-butler/video/星期天.mp4',\r\n  },\r\n];\r\n\r\n// 创建Context\r\nconst ButlerContext = createContext({\r\n  activeButlerId: initialButlers[0].id,\r\n  setActiveButlerId: () => {},\r\n  butlers: initialButlers,\r\n  addButler: () => {}, // 空函数，防止未包裹Provider报错\r\n});\r\n\r\n// Provider组件\r\nexport function ButlerProvider({ children }) {\r\n  // 用useState管理动态butlers\r\n  const [butlers, setButlers] = useState(initialButlers);\r\n  const [activeButlerId, setActiveButlerId] = useState(initialButlers[0].id);\r\n\r\n  // 动态添加管家方法\r\n  function addButler(newButler) {\r\n    setButlers(prevButlers => {\r\n      // 防止重复id，简单过滤\r\n      const exists = prevButlers.some(b => b.id === newButler.id);\r\n      if (exists) {\r\n        // 这里也可以改为更新逻辑\r\n        return prevButlers;\r\n      }\r\n      return [...prevButlers, newButler];\r\n    });\r\n  }\r\n\r\n  return (\r\n    <ButlerContext.Provider value={{ activeButlerId, setActiveButlerId, butlers, addButler }}>\r\n      {children}\r\n    </ButlerContext.Provider>\r\n  );\r\n}\r\n\r\n// 自定义hook\r\nexport function useButler() {\r\n  return useContext(ButlerContext);\r\n}\r\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;;AAElE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,cAAc,GAAG,CACrB;EACEC,EAAE,EAAE,IAAI;EACRC,IAAI,EAAE,MAAM;EACZC,IAAI,EAAE,OAAO;EACbC,GAAG,EAAE;AACP,CAAC,EACD;EACEH,EAAE,EAAE,IAAI;EACRC,IAAI,EAAE,MAAM;EACZC,IAAI,EAAE,OAAO;EACbC,GAAG,EAAE;AACP,CAAC,EACD;EACEH,EAAE,EAAE,SAAS;EACbC,IAAI,EAAE,MAAM;EACZC,IAAI,EAAE,OAAO;EACbC,GAAG,EAAE;AACP,CAAC,EACD;EACEH,EAAE,EAAE,SAAS;EACbC,IAAI,EAAE,OAAO;EACbC,IAAI,EAAE,OAAO;EACbC,GAAG,EAAE;AACP,CAAC,CACF;;AAED;AACA,MAAMC,aAAa,gBAAGV,aAAa,CAAC;EAClCW,cAAc,EAAEN,cAAc,CAAC,CAAC,CAAC,CAACC,EAAE;EACpCM,iBAAiB,EAAEA,CAAA,KAAM,CAAC,CAAC;EAC3BC,OAAO,EAAER,cAAc;EACvBS,SAAS,EAAEA,CAAA,KAAM,CAAC,CAAC,CAAE;AACvB,CAAC,CAAC;;AAEF;AACA,OAAO,SAASC,cAAcA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAC3C;EACA,MAAM,CAACJ,OAAO,EAAEK,UAAU,CAAC,GAAGjB,QAAQ,CAACI,cAAc,CAAC;EACtD,MAAM,CAACM,cAAc,EAAEC,iBAAiB,CAAC,GAAGX,QAAQ,CAACI,cAAc,CAAC,CAAC,CAAC,CAACC,EAAE,CAAC;;EAE1E;EACA,SAASQ,SAASA,CAACK,SAAS,EAAE;IAC5BD,UAAU,CAACE,WAAW,IAAI;MACxB;MACA,MAAMC,MAAM,GAAGD,WAAW,CAACE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACjB,EAAE,KAAKa,SAAS,CAACb,EAAE,CAAC;MAC3D,IAAIe,MAAM,EAAE;QACV;QACA,OAAOD,WAAW;MACpB;MACA,OAAO,CAAC,GAAGA,WAAW,EAAED,SAAS,CAAC;IACpC,CAAC,CAAC;EACJ;EAEA,oBACEf,OAAA,CAACM,aAAa,CAACc,QAAQ;IAACC,KAAK,EAAE;MAAEd,cAAc;MAAEC,iBAAiB;MAAEC,OAAO;MAAEC;IAAU,CAAE;IAAAE,QAAA,EACtFA;EAAQ;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B;;AAEA;AAAAZ,EAAA,CAzBgBF,cAAc;AAAAe,EAAA,GAAdf,cAAc;AA0B9B,OAAO,SAASgB,SAASA,CAAA,EAAG;EAAAC,GAAA;EAC1B,OAAO9B,UAAU,CAACQ,aAAa,CAAC;AAClC;AAACsB,GAAA,CAFeD,SAAS;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}