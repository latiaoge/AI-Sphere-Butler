{"ast":null,"code":"// ButlersContext.js\nimport React,{createContext,useState,useContext}from'react';// 初始管家数据\nimport{jsx as _jsx}from\"react/jsx-runtime\";const initialButlers=[{id:'cs',name:'管家禅师',type:'video',src:'/core/client/ai-butler/video/豆包禅师.mp4'},{id:'xl',name:'管家小粒',type:'video',src:'/core/client/ai-butler/video/小粒.mp4'},{id:'xj',name:'管家小贾',type:'video',src:'/core/client/ai-butler/video/小贾.mp4'},{id:'xqt',name:'管家星期天',type:'video',src:'/core/client/ai-butler/video/星期天.mp4'}];// 创建Context\nconst ButlerContext=/*#__PURE__*/createContext({activeButlerId:initialButlers[0].id,setActiveButlerId:()=>{},butlers:initialButlers,addButler:()=>{}// 空函数，防止未包裹Provider报错\n});// Provider组件\nexport function ButlerProvider(_ref){let{children}=_ref;// 用useState管理动态butlers\nconst[butlers,setButlers]=useState(initialButlers);const[activeButlerId,setActiveButlerId]=useState(initialButlers[0].id);// 动态添加管家方法\nfunction addButler(newButler){setButlers(prevButlers=>{// 防止重复id，简单过滤\nconst exists=prevButlers.some(b=>b.id===newButler.id);if(exists){// 这里也可以改为更新逻辑\nreturn prevButlers;}return[...prevButlers,newButler];});}return/*#__PURE__*/_jsx(ButlerContext.Provider,{value:{activeButlerId,setActiveButlerId,butlers,addButler},children:children});}// 自定义hook\nexport function useButler(){return useContext(ButlerContext);}","map":{"version":3,"names":["React","createContext","useState","useContext","jsx","_jsx","initialButlers","id","name","type","src","ButlerContext","activeButlerId","setActiveButlerId","butlers","addButler","ButlerProvider","_ref","children","setButlers","newButler","prevButlers","exists","some","b","Provider","value","useButler"],"sources":["D:/XM/AI-Sphere-Butler/core/client/src/components/ButlersContext.js"],"sourcesContent":["// ButlersContext.js\r\nimport React, { createContext, useState, useContext } from 'react';\r\n\r\n// 初始管家数据\r\nconst initialButlers = [\r\n  {\r\n    id: 'cs',\r\n    name: '管家禅师',\r\n    type: 'video',\r\n    src: '/core/client/ai-butler/video/豆包禅师.mp4',\r\n  },\r\n  {\r\n    id: 'xl',\r\n    name: '管家小粒',\r\n    type: 'video',\r\n    src: '/core/client/ai-butler/video/小粒.mp4',\r\n  },\r\n  {\r\n    id: 'xj',\r\n    name: '管家小贾',\r\n    type: 'video',\r\n    src: '/core/client/ai-butler/video/小贾.mp4',\r\n  },\r\n  {\r\n    id: 'xqt',\r\n    name: '管家星期天',\r\n    type: 'video',\r\n    src: '/core/client/ai-butler/video/星期天.mp4',\r\n  },\r\n];\r\n\r\n// 创建Context\r\nconst ButlerContext = createContext({\r\n  activeButlerId: initialButlers[0].id,\r\n  setActiveButlerId: () => {},\r\n  butlers: initialButlers,\r\n  addButler: () => {}, // 空函数，防止未包裹Provider报错\r\n});\r\n\r\n// Provider组件\r\nexport function ButlerProvider({ children }) {\r\n  // 用useState管理动态butlers\r\n  const [butlers, setButlers] = useState(initialButlers);\r\n  const [activeButlerId, setActiveButlerId] = useState(initialButlers[0].id);\r\n\r\n  // 动态添加管家方法\r\n  function addButler(newButler) {\r\n    setButlers(prevButlers => {\r\n      // 防止重复id，简单过滤\r\n      const exists = prevButlers.some(b => b.id === newButler.id);\r\n      if (exists) {\r\n        // 这里也可以改为更新逻辑\r\n        return prevButlers;\r\n      }\r\n      return [...prevButlers, newButler];\r\n    });\r\n  }\r\n\r\n  return (\r\n    <ButlerContext.Provider value={{ activeButlerId, setActiveButlerId, butlers, addButler }}>\r\n      {children}\r\n    </ButlerContext.Provider>\r\n  );\r\n}\r\n\r\n// 自定义hook\r\nexport function useButler() {\r\n  return useContext(ButlerContext);\r\n}\r\n"],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,QAAQ,CAAEC,UAAU,KAAQ,OAAO,CAElE;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACA,KAAM,CAAAC,cAAc,CAAG,CACrB,CACEC,EAAE,CAAE,IAAI,CACRC,IAAI,CAAE,MAAM,CACZC,IAAI,CAAE,OAAO,CACbC,GAAG,CAAE,uCACP,CAAC,CACD,CACEH,EAAE,CAAE,IAAI,CACRC,IAAI,CAAE,MAAM,CACZC,IAAI,CAAE,OAAO,CACbC,GAAG,CAAE,qCACP,CAAC,CACD,CACEH,EAAE,CAAE,IAAI,CACRC,IAAI,CAAE,MAAM,CACZC,IAAI,CAAE,OAAO,CACbC,GAAG,CAAE,qCACP,CAAC,CACD,CACEH,EAAE,CAAE,KAAK,CACTC,IAAI,CAAE,OAAO,CACbC,IAAI,CAAE,OAAO,CACbC,GAAG,CAAE,sCACP,CAAC,CACF,CAED;AACA,KAAM,CAAAC,aAAa,cAAGV,aAAa,CAAC,CAClCW,cAAc,CAAEN,cAAc,CAAC,CAAC,CAAC,CAACC,EAAE,CACpCM,iBAAiB,CAAEA,CAAA,GAAM,CAAC,CAAC,CAC3BC,OAAO,CAAER,cAAc,CACvBS,SAAS,CAAEA,CAAA,GAAM,CAAC,CAAG;AACvB,CAAC,CAAC,CAEF;AACA,MAAO,SAAS,CAAAC,cAAcA,CAAAC,IAAA,CAAe,IAAd,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACzC;AACA,KAAM,CAACH,OAAO,CAAEK,UAAU,CAAC,CAAGjB,QAAQ,CAACI,cAAc,CAAC,CACtD,KAAM,CAACM,cAAc,CAAEC,iBAAiB,CAAC,CAAGX,QAAQ,CAACI,cAAc,CAAC,CAAC,CAAC,CAACC,EAAE,CAAC,CAE1E;AACA,QAAS,CAAAQ,SAASA,CAACK,SAAS,CAAE,CAC5BD,UAAU,CAACE,WAAW,EAAI,CACxB;AACA,KAAM,CAAAC,MAAM,CAAGD,WAAW,CAACE,IAAI,CAACC,CAAC,EAAIA,CAAC,CAACjB,EAAE,GAAKa,SAAS,CAACb,EAAE,CAAC,CAC3D,GAAIe,MAAM,CAAE,CACV;AACA,MAAO,CAAAD,WAAW,CACpB,CACA,MAAO,CAAC,GAAGA,WAAW,CAAED,SAAS,CAAC,CACpC,CAAC,CAAC,CACJ,CAEA,mBACEf,IAAA,CAACM,aAAa,CAACc,QAAQ,EAACC,KAAK,CAAE,CAAEd,cAAc,CAAEC,iBAAiB,CAAEC,OAAO,CAAEC,SAAU,CAAE,CAAAG,QAAA,CACtFA,QAAQ,CACa,CAAC,CAE7B,CAEA;AACA,MAAO,SAAS,CAAAS,SAASA,CAAA,CAAG,CAC1B,MAAO,CAAAxB,UAAU,CAACQ,aAAa,CAAC,CAClC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}