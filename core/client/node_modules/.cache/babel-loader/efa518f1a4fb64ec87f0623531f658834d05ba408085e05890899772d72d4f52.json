{"ast":null,"code":"var _jsxFileName = \"D:\\\\XM\\\\AI-Sphere-Butler\\\\core\\\\client\\\\src\\\\contexts\\\\RecorderProvider.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useRef, useEffect, useContext } from 'react';\nimport { useRecorder } from '../hooks/useRecorder';\nimport { useButler } from '../components/ButlersContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RecorderContext = /*#__PURE__*/createContext(null);\nexport function RecorderProvider({\n  children\n}) {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [transcription, setTranscription] = useState('');\n  const [lang, setLang] = useState(() => {\n    try {\n      return localStorage.getItem('audioTranscriberLang') || 'auto';\n    } catch {\n      return 'auto';\n    }\n  });\n  const [speakerVerification, setSpeakerVerification] = useState(() => {\n    try {\n      return localStorage.getItem('audioTranscriberSpeakerVerification') === 'true';\n    } catch {\n      return false;\n    }\n  });\n  const [wakeWordEnabled, setWakeWordEnabled] = useState(() => {\n    try {\n      const stored = localStorage.getItem('wakeWordEnabled');\n      return stored === null ? true : stored === 'true';\n    } catch {\n      return true;\n    }\n  });\n  const [wakeWords, setWakeWords] = useState(() => {\n    try {\n      const stored = localStorage.getItem('wakeWords');\n      return stored ? stored : 'xiao li';\n    } catch {\n      return 'xiao li';\n    }\n  });\n  const {\n    setActiveButlerId\n  } = useButler();\n  const recorder = useRecorder();\n  const wsRef = useRef(null);\n  const intervalRef = useRef(null);\n  const unmountedRef = useRef(false);\n\n  // 统一切换管家函数，发送请求并更新状态\n  const activateButler = async id => {\n    if (!id) return; // null、undefined、空字符串都会被过滤掉\n    if (id === activeButlerId) return; // 如果已经是当前激活管家，避免重复请求\n    try {\n      const resp = await fetch('https://192.168.1.70:6010/api/switch_avatar', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          butler_id: id\n        })\n      });\n      if (!resp.ok) throw new Error('后端错误，状态码: ' + resp.status);\n      const data = await resp.json();\n      if (data.error) throw new Error(data.error);\n      setActiveButlerId(id);\n      console.log('[activateButler] 成功切换管家:', id);\n    } catch (e) {\n      alert('切换管家失败: ' + e.message);\n      console.error('[activateButler] 切换管家失败:', e);\n    }\n  };\n\n  // 发送文本到服务器的辅助函数\n  const sendTextMessage = async text => {\n    if (!text.trim()) return;\n    try {\n      const response = await fetch('https://192.168.1.70:6010/qwener', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text\n        })\n      });\n      if (!response.ok) throw new Error('网络响应失败，状态码: ' + response.status);\n      const data = await response.json();\n      console.log('文本发送成功，服务器返回：', data);\n    } catch (error) {\n      console.error('文本发送失败：', error);\n    }\n  };\n\n  // 停止录音并关闭WebSocket连接\n  const stopRecording = () => {\n    if (!isRecording) {\n      console.log('[stopRecording] 当前非录音状态，忽略重复调用');\n      return;\n    }\n    console.trace('[stopRecording] 停止录音流程启动，调用栈');\n    if (wsRef.current) {\n      console.log('[stopRecording] 关闭 WebSocket 连接');\n      wsRef.current.onclose = null; // 避免触发 onclose 回调死循环\n      wsRef.current.close();\n      wsRef.current = null;\n    }\n    recorder.stop();\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n    setIsRecording(false);\n  };\n\n  // 开始录音并创建WebSocket连接发送音频数据\n  const startRecording = () => {\n    if (isRecording) {\n      console.log('[startRecording] 已经在录音中，忽略重复调用');\n      return;\n    }\n    setIsRecording(true);\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(() => {\n      if (unmountedRef.current) {\n        stopRecording();\n        return;\n      }\n      let params = [];\n      if (lang) params.push(`lang=${encodeURIComponent(lang)}`);\n      if (speakerVerification) params.push('sv=1');\n      if (wakeWordEnabled) params.push('wakeword=1');\n      if (wakeWords) {\n        const cleanedWakeWords = wakeWords.split(',').map(w => w.trim()).filter(w => w.length > 0).join(',');\n        if (cleanedWakeWords.length > 0) {\n          params.push(`wakewords=${encodeURIComponent(cleanedWakeWords)}`);\n        }\n      }\n      const queryStr = params.length > 0 ? `?${params.join('&')}` : '';\n      const wsUrl = `ws://192.168.168.77:6007/ws/transcribe${queryStr}`;\n      console.log('[startRecording] 创建 WebSocket 连接', wsUrl);\n      const ws = new WebSocket(wsUrl);\n      ws.binaryType = 'arraybuffer';\n\n      // 绑定 onmessage 事件\n      ws.onmessage = evt => {\n        try {\n          const resJson = JSON.parse(evt.data);\n          if (resJson.code === 0) {\n            const recognizedText = resJson.data || '无识别结果';\n            console.log('【原始识别文本】', recognizedText);\n            const cleanedText = recognizedText.replace(/[^\\u4e00-\\u9fa5a-zA-Z0-9]/g, '').trim();\n            console.log('【清洗后文本】', cleanedText);\n\n            // 更新转录文本\n            setTranscription(prev => prev ? prev + '\\n' + recognizedText : recognizedText);\n\n            // 匹配关键词切换管家\n            if (cleanedText) {\n              if (cleanedText.includes('切换小丽')) {\n                console.log('【匹配成功】切换到小丽');\n                activateButler('xl');\n              } else if (cleanedText.includes('切换法师')) {\n                activateButler('cs');\n              } else if (cleanedText.includes('小贾')) {\n                activateButler('butler3');\n              } else if (cleanedText.includes('星期天')) {\n                activateButler('butler4');\n              }\n              sendTextMessage(recognizedText);\n            }\n          }\n        } catch (e) {\n          console.error('【解析失败】', e);\n        }\n      };\n      ws.onopen = () => {\n        console.log('[WebSocket] 连接已打开');\n        recorder.start().then(() => {\n          console.log('[Recorder] 录音开始');\n          intervalRef.current = setInterval(() => {\n            if (ws.readyState === 1) {\n              const audioBlob = recorder.getAudioBlob();\n              if (audioBlob.size > 0) {\n                console.log('[WebSocket] 发送音频数据，大小：', audioBlob.size);\n                ws.send(audioBlob);\n                recorder.clearBuffer();\n              }\n            }\n          }, 500);\n        }).catch(e => {\n          alert('启动录音失败: ' + e.message);\n          console.error('[Recorder] 启动失败', e);\n          ws.close();\n          setIsRecording(false);\n        });\n      };\n      ws.onclose = event => {\n        console.log('[WebSocket] 连接关闭，代码:', event.code, '原因:', event.reason);\n        setIsRecording(false);\n        if (intervalRef.current) {\n          clearInterval(intervalRef.current);\n          intervalRef.current = null;\n        }\n        wsRef.current = null;\n      };\n      ws.onerror = e => {\n        console.error('[WebSocket] 错误', e);\n        alert('WebSocket 连接出错，请检查服务器状态和网络连接。');\n      };\n      wsRef.current = ws;\n    }).catch(error => {\n      alert('请求麦克风权限失败: ' + error.message);\n      console.error('[startRecording] 获取麦克风权限失败', error);\n      setIsRecording(false);\n    });\n  };\n\n  // 使用 useEffect 来设置组件卸载标志并停止录音\n  useEffect(() => {\n    unmountedRef.current = false;\n    return () => {\n      unmountedRef.current = true;\n      stopRecording();\n    };\n  }, []);\n\n  // 持久化语言、声纹识别开关、语音唤醒开关和唤醒词\n  useEffect(() => {\n    try {\n      localStorage.setItem('audioTranscriberLang', lang);\n    } catch {}\n  }, [lang]);\n  useEffect(() => {\n    try {\n      localStorage.setItem('audioTranscriberSpeakerVerification', speakerVerification.toString());\n    } catch {}\n  }, [speakerVerification]);\n  useEffect(() => {\n    try {\n      localStorage.setItem('wakeWordEnabled', wakeWordEnabled.toString());\n    } catch {}\n  }, [wakeWordEnabled]);\n  useEffect(() => {\n    try {\n      localStorage.setItem('wakeWords', wakeWords);\n    } catch {}\n  }, [wakeWords]);\n  return /*#__PURE__*/_jsxDEV(RecorderContext.Provider, {\n    value: {\n      isRecording,\n      transcription,\n      lang,\n      speakerVerification,\n      wakeWordEnabled,\n      wakeWords,\n      setLang,\n      setSpeakerVerification,\n      setWakeWordEnabled,\n      setWakeWords,\n      startRecording,\n      stopRecording,\n      setTranscription\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 251,\n    columnNumber: 5\n  }, this);\n}\n_s(RecorderProvider, \"NyNYm6PNRvzwRP9YgK9LawiDPhY=\", false, function () {\n  return [useButler, useRecorder];\n});\n_c = RecorderProvider;\nexport function useRecorderContext() {\n  _s2();\n  const context = useContext(RecorderContext);\n  if (!context) {\n    throw new Error('useRecorderContext 必须在 RecorderProvider 内使用');\n  }\n  return context;\n}\n_s2(useRecorderContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"RecorderProvider\");","map":{"version":3,"names":["React","createContext","useState","useRef","useEffect","useContext","useRecorder","useButler","jsxDEV","_jsxDEV","RecorderContext","RecorderProvider","children","_s","isRecording","setIsRecording","transcription","setTranscription","lang","setLang","localStorage","getItem","speakerVerification","setSpeakerVerification","wakeWordEnabled","setWakeWordEnabled","stored","wakeWords","setWakeWords","setActiveButlerId","recorder","wsRef","intervalRef","unmountedRef","activateButler","id","activeButlerId","resp","fetch","method","headers","body","JSON","stringify","butler_id","ok","Error","status","data","json","error","console","log","e","alert","message","sendTextMessage","text","trim","response","stopRecording","trace","current","onclose","close","stop","clearInterval","startRecording","navigator","mediaDevices","getUserMedia","audio","then","params","push","encodeURIComponent","cleanedWakeWords","split","map","w","filter","length","join","queryStr","wsUrl","ws","WebSocket","binaryType","onmessage","evt","resJson","parse","code","recognizedText","cleanedText","replace","prev","includes","onopen","start","setInterval","readyState","audioBlob","getAudioBlob","size","send","clearBuffer","catch","event","reason","onerror","setItem","toString","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useRecorderContext","_s2","context","$RefreshReg$"],"sources":["D:/XM/AI-Sphere-Butler/core/client/src/contexts/RecorderProvider.jsx"],"sourcesContent":["import React, { createContext, useState, useRef, useEffect, useContext } from 'react';\r\nimport { useRecorder } from '../hooks/useRecorder';\r\nimport { useButler } from '../components/ButlersContext';\r\n\r\nconst RecorderContext = createContext(null);\r\n\r\nexport function RecorderProvider({ children }) {\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [transcription, setTranscription] = useState('');\r\n  const [lang, setLang] = useState(() => {\r\n    try {\r\n      return localStorage.getItem('audioTranscriberLang') || 'auto';\r\n    } catch {\r\n      return 'auto';\r\n    }\r\n  });\r\n  const [speakerVerification, setSpeakerVerification] = useState(() => {\r\n    try {\r\n      return localStorage.getItem('audioTranscriberSpeakerVerification') === 'true';\r\n    } catch {\r\n      return false;\r\n    }\r\n  });\r\n\r\n  const [wakeWordEnabled, setWakeWordEnabled] = useState(() => {\r\n    try {\r\n      const stored = localStorage.getItem('wakeWordEnabled');\r\n      return stored === null ? true : stored === 'true';\r\n    } catch {\r\n      return true;\r\n    }\r\n  });\r\n  const [wakeWords, setWakeWords] = useState(() => {\r\n    try {\r\n      const stored = localStorage.getItem('wakeWords');\r\n      return stored ? stored : 'xiao li';\r\n    } catch {\r\n      return 'xiao li';\r\n    }\r\n  });\r\n\r\n  const { setActiveButlerId } = useButler();\r\n\r\n  const recorder = useRecorder();\r\n\r\n  const wsRef = useRef(null);\r\n  const intervalRef = useRef(null);\r\n  const unmountedRef = useRef(false);\r\n\r\n  // 统一切换管家函数，发送请求并更新状态\r\n  const activateButler = async (id) => {\r\n    if (!id) return;                  // null、undefined、空字符串都会被过滤掉\r\n    if (id === activeButlerId) return; // 如果已经是当前激活管家，避免重复请求\r\n    try {\r\n      const resp = await fetch('https://192.168.1.70:6010/api/switch_avatar', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ butler_id: id }),\r\n      });\r\n      if (!resp.ok) throw new Error('后端错误，状态码: ' + resp.status);\r\n      const data = await resp.json();\r\n      if (data.error) throw new Error(data.error);\r\n      setActiveButlerId(id);\r\n      console.log('[activateButler] 成功切换管家:', id);\r\n    } catch (e) {\r\n      alert('切换管家失败: ' + e.message);\r\n      console.error('[activateButler] 切换管家失败:', e);\r\n    }\r\n  };\r\n\r\n  // 发送文本到服务器的辅助函数\r\n  const sendTextMessage = async (text) => {\r\n    if (!text.trim()) return;\r\n    try {\r\n      const response = await fetch('https://192.168.1.70:6010/qwener', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ text }),\r\n      });\r\n      if (!response.ok) throw new Error('网络响应失败，状态码: ' + response.status);\r\n      const data = await response.json();\r\n      console.log('文本发送成功，服务器返回：', data);\r\n    } catch (error) {\r\n      console.error('文本发送失败：', error);\r\n    }\r\n  };\r\n\r\n  // 停止录音并关闭WebSocket连接\r\n  const stopRecording = () => {\r\n    if (!isRecording) {\r\n      console.log('[stopRecording] 当前非录音状态，忽略重复调用');\r\n      return;\r\n    }\r\n    console.trace('[stopRecording] 停止录音流程启动，调用栈');\r\n    if (wsRef.current) {\r\n      console.log('[stopRecording] 关闭 WebSocket 连接');\r\n      wsRef.current.onclose = null; // 避免触发 onclose 回调死循环\r\n      wsRef.current.close();\r\n      wsRef.current = null;\r\n    }\r\n    recorder.stop();\r\n    if (intervalRef.current) {\r\n      clearInterval(intervalRef.current);\r\n      intervalRef.current = null;\r\n    }\r\n    setIsRecording(false);\r\n  };\r\n\r\n  // 开始录音并创建WebSocket连接发送音频数据\r\n  const startRecording = () => {\r\n    if (isRecording) {\r\n      console.log('[startRecording] 已经在录音中，忽略重复调用');\r\n      return;\r\n    }\r\n  \r\n    setIsRecording(true);\r\n  \r\n    navigator.mediaDevices.getUserMedia({ audio: true })\r\n      .then(() => {\r\n        if (unmountedRef.current) {\r\n          stopRecording();\r\n          return;\r\n        }\r\n        let params = [];\r\n        if (lang) params.push(`lang=${encodeURIComponent(lang)}`);\r\n        if (speakerVerification) params.push('sv=1');\r\n        if (wakeWordEnabled) params.push('wakeword=1');\r\n        if (wakeWords) {\r\n          const cleanedWakeWords = wakeWords.split(',').map(w => w.trim()).filter(w => w.length > 0).join(',');\r\n          if (cleanedWakeWords.length > 0) {\r\n            params.push(`wakewords=${encodeURIComponent(cleanedWakeWords)}`);\r\n          }\r\n        }\r\n        const queryStr = params.length > 0 ? `?${params.join('&')}` : '';\r\n  \r\n        const wsUrl = `ws://192.168.168.77:6007/ws/transcribe${queryStr}`;\r\n        console.log('[startRecording] 创建 WebSocket 连接', wsUrl);\r\n        const ws = new WebSocket(wsUrl);\r\n        ws.binaryType = 'arraybuffer';\r\n  \r\n        // 绑定 onmessage 事件\r\n        ws.onmessage = (evt) => {\r\n          try {\r\n            const resJson = JSON.parse(evt.data);\r\n            if (resJson.code === 0) {\r\n              const recognizedText = resJson.data || '无识别结果';\r\n              console.log('【原始识别文本】', recognizedText);\r\n  \r\n              const cleanedText = recognizedText.replace(/[^\\u4e00-\\u9fa5a-zA-Z0-9]/g, '').trim();\r\n              console.log('【清洗后文本】', cleanedText);\r\n  \r\n              // 更新转录文本\r\n              setTranscription(prev => (prev ? prev + '\\n' + recognizedText : recognizedText));\r\n  \r\n              // 匹配关键词切换管家\r\n              if (cleanedText) {\r\n                if (cleanedText.includes('切换小丽')) {\r\n                  console.log('【匹配成功】切换到小丽');\r\n                  activateButler('xl');\r\n                } else if (cleanedText.includes('切换法师')) {\r\n                  activateButler('cs');\r\n                } else if (cleanedText.includes('小贾')) {\r\n                  activateButler('butler3');\r\n                } else if (cleanedText.includes('星期天')) {\r\n                  activateButler('butler4');\r\n                }\r\n  \r\n                sendTextMessage(recognizedText);\r\n              }\r\n            }\r\n          } catch (e) {\r\n            console.error('【解析失败】', e);\r\n          }\r\n        };\r\n  \r\n        ws.onopen = () => {\r\n          console.log('[WebSocket] 连接已打开');\r\n          recorder.start()\r\n            .then(() => {\r\n              console.log('[Recorder] 录音开始');\r\n              intervalRef.current = setInterval(() => {\r\n                if (ws.readyState === 1) {\r\n                  const audioBlob = recorder.getAudioBlob();\r\n                  if (audioBlob.size > 0) {\r\n                    console.log('[WebSocket] 发送音频数据，大小：', audioBlob.size);\r\n                    ws.send(audioBlob);\r\n                    recorder.clearBuffer();\r\n                  }\r\n                }\r\n              }, 500);\r\n            })\r\n            .catch(e => {\r\n              alert('启动录音失败: ' + e.message);\r\n              console.error('[Recorder] 启动失败', e);\r\n              ws.close();\r\n              setIsRecording(false);\r\n            });\r\n        };\r\n  \r\n        ws.onclose = (event) => {\r\n          console.log('[WebSocket] 连接关闭，代码:', event.code, '原因:', event.reason);\r\n          setIsRecording(false);\r\n          if (intervalRef.current) {\r\n            clearInterval(intervalRef.current);\r\n            intervalRef.current = null;\r\n          }\r\n          wsRef.current = null;\r\n        };\r\n  \r\n        ws.onerror = (e) => {\r\n          console.error('[WebSocket] 错误', e);\r\n          alert('WebSocket 连接出错，请检查服务器状态和网络连接。');\r\n        };\r\n  \r\n        wsRef.current = ws;\r\n      })\r\n      .catch(error => {\r\n        alert('请求麦克风权限失败: ' + error.message);\r\n        console.error('[startRecording] 获取麦克风权限失败', error);\r\n        setIsRecording(false);\r\n      });\r\n  };\r\n\r\n  // 使用 useEffect 来设置组件卸载标志并停止录音\r\n  useEffect(() => {\r\n    unmountedRef.current = false;\r\n    return () => {\r\n      unmountedRef.current = true;\r\n      stopRecording();\r\n    };\r\n  }, []);\r\n\r\n  // 持久化语言、声纹识别开关、语音唤醒开关和唤醒词\r\n  useEffect(() => {\r\n    try { localStorage.setItem('audioTranscriberLang', lang); } catch {}\r\n  }, [lang]);\r\n\r\n  useEffect(() => {\r\n    try { localStorage.setItem('audioTranscriberSpeakerVerification', speakerVerification.toString()); } catch {}\r\n  }, [speakerVerification]);\r\n\r\n  useEffect(() => {\r\n    try { localStorage.setItem('wakeWordEnabled', wakeWordEnabled.toString()); } catch {}\r\n  }, [wakeWordEnabled]);\r\n\r\n  useEffect(() => {\r\n    try { localStorage.setItem('wakeWords', wakeWords); } catch {}\r\n  }, [wakeWords]);\r\n\r\n  return (\r\n    <RecorderContext.Provider value={{\r\n      isRecording,\r\n      transcription,\r\n      lang,\r\n      speakerVerification,\r\n      wakeWordEnabled,\r\n      wakeWords,\r\n      setLang,\r\n      setSpeakerVerification,\r\n      setWakeWordEnabled,\r\n      setWakeWords,\r\n      startRecording,\r\n      stopRecording,\r\n      setTranscription,\r\n    }}>\r\n      {children}\r\n    </RecorderContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useRecorderContext() {\r\n  const context = useContext(RecorderContext);\r\n  if (!context) {\r\n    throw new Error('useRecorderContext 必须在 RecorderProvider 内使用');\r\n  }\r\n  return context;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}