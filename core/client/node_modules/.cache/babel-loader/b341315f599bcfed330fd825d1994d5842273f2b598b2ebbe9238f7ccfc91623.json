{"ast":null,"code":"var _jsxFileName = \"D:\\\\XM\\\\AI-Sphere-Butler\\\\core\\\\client\\\\src\\\\components\\\\WallpaperManager.jsx\",\n  _s = $RefreshSig$();\n// components/WallpaperManager.jsx\nimport React, { useState, useEffect } from 'react';\n\n// 定义各菜单对应的本地壁纸路径\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const menuWallpapers = {\n  home: '/core/client/ai-butler/image/bg-home.jpeg',\n  butler: '/core/client/ai-butler/image/bg-butler.jpeg',\n  car: '/core/client/ai-butler/image/bg-car.jpeg',\n  homeassistant: '/core/client/ai-butler/image/bg-homeassistant.jpeg',\n  ops: '/core/client/ai-butler/image/bg-ops.jpeg',\n  settings: '/core/client/ai-butler/image/bg-settings.jpeg'\n};\nconst WallpaperManager = ({\n  selectedMenu,\n  showGlassTransition,\n  onTransitionEnd\n}) => {\n  _s();\n  const [currentWallpaper, setCurrentWallpaper] = useState(menuWallpapers[selectedMenu] || menuWallpapers.home);\n  const [isChangingWallpaper, setIsChangingWallpaper] = useState(false);\n  const [isImageValid, setIsImageValid] = useState(true);\n\n  // 检查图片是否有效\n  const checkImageValidity = url => {\n    return new Promise(resolve => {\n      const img = new Image();\n      img.onload = () => resolve(true);\n      img.onerror = () => resolve(false);\n      img.src = url;\n    });\n  };\n\n  // 监听菜单变化，更新壁纸\n  useEffect(() => {\n    if (showGlassTransition) {\n      setIsChangingWallpaper(true);\n\n      // 获取当前菜单配置的壁纸路径\n      const targetWallpaper = menuWallpapers[selectedMenu] || menuWallpapers.home;\n\n      // 检查壁纸是否有效\n      checkImageValidity(targetWallpaper).then(valid => {\n        setIsImageValid(valid);\n\n        // 延迟更新壁纸，与菜单过渡动画同步\n        setTimeout(() => {\n          // 如果图片无效或未配置，使用主页壁纸\n          setCurrentWallpaper(valid ? targetWallpaper : menuWallpapers.home);\n\n          // 通知父组件壁纸更新完成\n          setTimeout(() => {\n            setIsChangingWallpaper(false);\n            onTransitionEnd === null || onTransitionEnd === void 0 ? void 0 : onTransitionEnd();\n          }, 300);\n        }, 400);\n      });\n    }\n  }, [selectedMenu, showGlassTransition]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-wallpaper\",\n      style: {\n        backgroundImage: `url(${currentWallpaper})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        zIndex: -2,\n        transition: 'opacity 0.5s ease-in-out',\n        opacity: isChangingWallpaper ? 0.8 : 1\n      },\n      \"aria-hidden\": \"true\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), showGlassTransition && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"glass-transition-overlay\",\n      style: {\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        backgroundColor: 'rgba(0, 0, 0, 0.5)',\n        backdropFilter: 'blur(10px)',\n        zIndex: 999,\n        transition: 'opacity 0.4s ease'\n      },\n      \"aria-hidden\": \"true\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(WallpaperManager, \"npF02itMElb0v6L+ScSuSl3FeWs=\");\n_c = WallpaperManager;\nexport default WallpaperManager;\nvar _c;\n$RefreshReg$(_c, \"WallpaperManager\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","menuWallpapers","home","butler","car","homeassistant","ops","settings","WallpaperManager","selectedMenu","showGlassTransition","onTransitionEnd","_s","currentWallpaper","setCurrentWallpaper","isChangingWallpaper","setIsChangingWallpaper","isImageValid","setIsImageValid","checkImageValidity","url","Promise","resolve","img","Image","onload","onerror","src","targetWallpaper","then","valid","setTimeout","children","className","style","backgroundImage","backgroundSize","backgroundPosition","position","top","left","width","height","zIndex","transition","opacity","fileName","_jsxFileName","lineNumber","columnNumber","backgroundColor","backdropFilter","_c","$RefreshReg$"],"sources":["D:/XM/AI-Sphere-Butler/core/client/src/components/WallpaperManager.jsx"],"sourcesContent":["// components/WallpaperManager.jsx\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n// 定义各菜单对应的本地壁纸路径\r\nexport const menuWallpapers = {\r\n  home: '/core/client/ai-butler/image/bg-home.jpeg',\r\n  butler: '/core/client/ai-butler/image/bg-butler.jpeg',\r\n  car: '/core/client/ai-butler/image/bg-car.jpeg',\r\n  homeassistant: '/core/client/ai-butler/image/bg-homeassistant.jpeg',\r\n  ops: '/core/client/ai-butler/image/bg-ops.jpeg',\r\n  settings: '/core/client/ai-butler/image/bg-settings.jpeg',\r\n};\r\n\r\nconst WallpaperManager = ({ selectedMenu, showGlassTransition, onTransitionEnd }) => {\r\n  const [currentWallpaper, setCurrentWallpaper] = useState(menuWallpapers[selectedMenu] || menuWallpapers.home);\r\n  const [isChangingWallpaper, setIsChangingWallpaper] = useState(false);\r\n  const [isImageValid, setIsImageValid] = useState(true);\r\n\r\n  // 检查图片是否有效\r\n  const checkImageValidity = (url) => {\r\n    return new Promise((resolve) => {\r\n      const img = new Image();\r\n      img.onload = () => resolve(true);\r\n      img.onerror = () => resolve(false);\r\n      img.src = url;\r\n    });\r\n  };\r\n\r\n  // 监听菜单变化，更新壁纸\r\n  useEffect(() => {\r\n    if (showGlassTransition) {\r\n      setIsChangingWallpaper(true);\r\n      \r\n      // 获取当前菜单配置的壁纸路径\r\n      const targetWallpaper = menuWallpapers[selectedMenu] || menuWallpapers.home;\r\n      \r\n      // 检查壁纸是否有效\r\n      checkImageValidity(targetWallpaper).then((valid) => {\r\n        setIsImageValid(valid);\r\n        \r\n        // 延迟更新壁纸，与菜单过渡动画同步\r\n        setTimeout(() => {\r\n          // 如果图片无效或未配置，使用主页壁纸\r\n          setCurrentWallpaper(valid ? targetWallpaper : menuWallpapers.home);\r\n          \r\n          // 通知父组件壁纸更新完成\r\n          setTimeout(() => {\r\n            setIsChangingWallpaper(false);\r\n            onTransitionEnd?.();\r\n          }, 300);\r\n        }, 400);\r\n      });\r\n    }\r\n  }, [selectedMenu, showGlassTransition]);\r\n\r\n  return (\r\n    <>\r\n      {/* 壁纸容器 */}\r\n      <div \r\n        className=\"app-wallpaper\"\r\n        style={{\r\n          backgroundImage: `url(${currentWallpaper})`,\r\n          backgroundSize: 'cover',\r\n          backgroundPosition: 'center',\r\n          position: 'fixed',\r\n          top: 0,\r\n          left: 0,\r\n          width: '100%',\r\n          height: '100%',\r\n          zIndex: -2,\r\n          transition: 'opacity 0.5s ease-in-out',\r\n          opacity: isChangingWallpaper ? 0.8 : 1\r\n        }}\r\n        aria-hidden=\"true\"\r\n      />\r\n      \r\n      {/* 遮罩层，用于平滑过渡 */}\r\n      {showGlassTransition && (\r\n        <div\r\n          className=\"glass-transition-overlay\"\r\n          style={{\r\n            position: 'fixed',\r\n            top: 0,\r\n            left: 0,\r\n            width: '100%',\r\n            height: '100%',\r\n            backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n            backdropFilter: 'blur(10px)',\r\n            zIndex: 999,\r\n            transition: 'opacity 0.4s ease'\r\n          }}\r\n          aria-hidden=\"true\"\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WallpaperManager;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}