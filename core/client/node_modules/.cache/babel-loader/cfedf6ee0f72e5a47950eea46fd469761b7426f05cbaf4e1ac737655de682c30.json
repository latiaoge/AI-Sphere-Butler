{"ast":null,"code":"// src/hooks/useRecorder.js\nimport{useEffect,useRef,useCallback,useState}from'react';export function useRecorder(){const audioContextRef=useRef(null);const processorRef=useRef(null);const sourceRef=useRef(null);const streamRef=useRef(null);const audioDataRef=useRef({size:0,buffer:[]});const[isRecording,setIsRecording]=useState(false);const[error,setError]=useState(null);// 目标输出参数\nconst outputSampleRate=16000;const sampleBits=16;// 降采样函数\nconst downsampleBuffer=useCallback((buffer,inputRate,outputRate)=>{if(outputRate===inputRate)return buffer;const ratio=inputRate/outputRate;const newLength=Math.round(buffer.length/ratio);const result=new Float32Array(newLength);let offsetResult=0;let offsetBuffer=0;while(offsetResult<newLength){let nextOffsetBuffer=Math.round((offsetResult+1)*ratio);let accum=0,count=0;for(let i=offsetBuffer;i<nextOffsetBuffer&&i<buffer.length;i++){accum+=buffer[i];count++;}result[offsetResult]=accum/count;offsetResult++;offsetBuffer=nextOffsetBuffer;}return result;},[]);// PCM编码函数\nconst encodePCM=useCallback(()=>{const buffer=audioDataRef.current.buffer;const size=audioDataRef.current.size;let mergedBuffers=new Float32Array(size);let offset=0;for(let i=0;i<buffer.length;i++){mergedBuffers.set(buffer[i],offset);offset+=buffer[i].length;}const dataLength=mergedBuffers.length*(sampleBits/8);const bufferArray=new ArrayBuffer(dataLength);const dataView=new DataView(bufferArray);let dataOffset=0;for(let i=0;i<mergedBuffers.length;i++,dataOffset+=2){let s=Math.max(-1,Math.min(1,mergedBuffers[i]));dataView.setInt16(dataOffset,s<0?s*0x8000:s*0x7fff,true);}return new Blob([dataView],{type:'audio/pcm'});},[sampleBits]);// 清空缓存\nconst clearBuffer=useCallback(()=>{audioDataRef.current.buffer=[];audioDataRef.current.size=0;},[]);// 开始录音\nconst start=useCallback(async()=>{if(isRecording)return;try{const stream=await navigator.mediaDevices.getUserMedia({audio:true});streamRef.current=stream;const AudioContextClass=window.AudioContext||window.webkitAudioContext;audioContextRef.current=new AudioContextClass();sourceRef.current=audioContextRef.current.createMediaStreamSource(stream);// 获取真实采样率\nconst inputSampleRate=audioContextRef.current.sampleRate;processorRef.current=audioContextRef.current.createScriptProcessor(4096,1,1);audioDataRef.current.buffer=[];audioDataRef.current.size=0;processorRef.current.onaudioprocess=e=>{const inputData=e.inputBuffer.getChannelData(0);const downsampled=downsampleBuffer(inputData,inputSampleRate,outputSampleRate);audioDataRef.current.buffer.push(downsampled);audioDataRef.current.size+=downsampled.length;};sourceRef.current.connect(processorRef.current);processorRef.current.connect(audioContextRef.current.destination);setIsRecording(true);setError(null);}catch(err){console.error('获取麦克风失败',err);setError(err);throw err;}},[downsampleBuffer,isRecording]);// 停止录音\nconst stop=useCallback(()=>{if(!isRecording)return;try{if(processorRef.current){processorRef.current.disconnect();processorRef.current.onaudioprocess=null;processorRef.current=null;}if(sourceRef.current){sourceRef.current.disconnect();sourceRef.current=null;}if(streamRef.current){streamRef.current.getTracks().forEach(t=>t.stop());streamRef.current=null;}if(audioContextRef.current){audioContextRef.current.close();audioContextRef.current=null;}}catch(e){console.warn('停止录音时出错',e);}finally{setIsRecording(false);}},[isRecording]);// 组件卸载时自动释放资源的副作用\nuseEffect(()=>{return()=>{stop();};},[stop]);return{start,stop,getAudioBlob:encodePCM,clearBuffer,isRecording,error};}","map":{"version":3,"names":["useEffect","useRef","useCallback","useState","useRecorder","audioContextRef","processorRef","sourceRef","streamRef","audioDataRef","size","buffer","isRecording","setIsRecording","error","setError","outputSampleRate","sampleBits","downsampleBuffer","inputRate","outputRate","ratio","newLength","Math","round","length","result","Float32Array","offsetResult","offsetBuffer","nextOffsetBuffer","accum","count","i","encodePCM","current","mergedBuffers","offset","set","dataLength","bufferArray","ArrayBuffer","dataView","DataView","dataOffset","s","max","min","setInt16","Blob","type","clearBuffer","start","stream","navigator","mediaDevices","getUserMedia","audio","AudioContextClass","window","AudioContext","webkitAudioContext","createMediaStreamSource","inputSampleRate","sampleRate","createScriptProcessor","onaudioprocess","e","inputData","inputBuffer","getChannelData","downsampled","push","connect","destination","err","console","stop","disconnect","getTracks","forEach","t","close","warn","getAudioBlob"],"sources":["D:/XM/AI-Sphere-Butler/core/client/src/hooks/useRecorder.js"],"sourcesContent":["// src/hooks/useRecorder.js\r\nimport { useEffect, useRef, useCallback, useState } from 'react';\r\n\r\nexport function useRecorder() {\r\n  const audioContextRef = useRef(null);\r\n  const processorRef = useRef(null);\r\n  const sourceRef = useRef(null);\r\n  const streamRef = useRef(null);\r\n  const audioDataRef = useRef({\r\n    size: 0,\r\n    buffer: [],\r\n  });\r\n\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // 目标输出参数\r\n  const outputSampleRate = 16000;\r\n  const sampleBits = 16;\r\n\r\n  // 降采样函数\r\n  const downsampleBuffer = useCallback((buffer, inputRate, outputRate) => {\r\n    if (outputRate === inputRate) return buffer;\r\n    const ratio = inputRate / outputRate;\r\n    const newLength = Math.round(buffer.length / ratio);\r\n    const result = new Float32Array(newLength);\r\n    let offsetResult = 0;\r\n    let offsetBuffer = 0;\r\n    while (offsetResult < newLength) {\r\n      let nextOffsetBuffer = Math.round((offsetResult + 1) * ratio);\r\n      let accum = 0,\r\n        count = 0;\r\n      for (let i = offsetBuffer; i < nextOffsetBuffer && i < buffer.length; i++) {\r\n        accum += buffer[i];\r\n        count++;\r\n      }\r\n      result[offsetResult] = accum / count;\r\n      offsetResult++;\r\n      offsetBuffer = nextOffsetBuffer;\r\n    }\r\n    return result;\r\n  }, []);\r\n\r\n  // PCM编码函数\r\n  const encodePCM = useCallback(() => {\r\n    const buffer = audioDataRef.current.buffer;\r\n    const size = audioDataRef.current.size;\r\n    let mergedBuffers = new Float32Array(size);\r\n    let offset = 0;\r\n    for (let i = 0; i < buffer.length; i++) {\r\n      mergedBuffers.set(buffer[i], offset);\r\n      offset += buffer[i].length;\r\n    }\r\n    const dataLength = mergedBuffers.length * (sampleBits / 8);\r\n    const bufferArray = new ArrayBuffer(dataLength);\r\n    const dataView = new DataView(bufferArray);\r\n    let dataOffset = 0;\r\n    for (let i = 0; i < mergedBuffers.length; i++, dataOffset += 2) {\r\n      let s = Math.max(-1, Math.min(1, mergedBuffers[i]));\r\n      dataView.setInt16(dataOffset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\r\n    }\r\n    return new Blob([dataView], { type: 'audio/pcm' });\r\n  }, [sampleBits]);\r\n\r\n  // 清空缓存\r\n  const clearBuffer = useCallback(() => {\r\n    audioDataRef.current.buffer = [];\r\n    audioDataRef.current.size = 0;\r\n  }, []);\r\n\r\n  // 开始录音\r\n  const start = useCallback(async () => {\r\n    if (isRecording) return;\r\n\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n      streamRef.current = stream;\r\n\r\n      const AudioContextClass = window.AudioContext || window.webkitAudioContext;\r\n      audioContextRef.current = new AudioContextClass();\r\n\r\n      sourceRef.current = audioContextRef.current.createMediaStreamSource(stream);\r\n\r\n      // 获取真实采样率\r\n      const inputSampleRate = audioContextRef.current.sampleRate;\r\n\r\n      processorRef.current = audioContextRef.current.createScriptProcessor(4096, 1, 1);\r\n\r\n      audioDataRef.current.buffer = [];\r\n      audioDataRef.current.size = 0;\r\n\r\n      processorRef.current.onaudioprocess = (e) => {\r\n        const inputData = e.inputBuffer.getChannelData(0);\r\n        const downsampled = downsampleBuffer(inputData, inputSampleRate, outputSampleRate);\r\n        audioDataRef.current.buffer.push(downsampled);\r\n        audioDataRef.current.size += downsampled.length;\r\n      };\r\n\r\n      sourceRef.current.connect(processorRef.current);\r\n      processorRef.current.connect(audioContextRef.current.destination);\r\n\r\n      setIsRecording(true);\r\n      setError(null);\r\n    } catch (err) {\r\n      console.error('获取麦克风失败', err);\r\n      setError(err);\r\n      throw err;\r\n    }\r\n  }, [downsampleBuffer, isRecording]);\r\n\r\n  // 停止录音\r\n  const stop = useCallback(() => {\r\n    if (!isRecording) return;\r\n\r\n    try {\r\n      if (processorRef.current) {\r\n        processorRef.current.disconnect();\r\n        processorRef.current.onaudioprocess = null;\r\n        processorRef.current = null;\r\n      }\r\n      if (sourceRef.current) {\r\n        sourceRef.current.disconnect();\r\n        sourceRef.current = null;\r\n      }\r\n      if (streamRef.current) {\r\n        streamRef.current.getTracks().forEach((t) => t.stop());\r\n        streamRef.current = null;\r\n      }\r\n      if (audioContextRef.current) {\r\n        audioContextRef.current.close();\r\n        audioContextRef.current = null;\r\n      }\r\n    } catch (e) {\r\n      console.warn('停止录音时出错', e);\r\n    } finally {\r\n      setIsRecording(false);\r\n    }\r\n  }, [isRecording]);\r\n\r\n  // 组件卸载时自动释放资源的副作用\r\n  useEffect(() => {\r\n    return () => {\r\n      stop();\r\n    };\r\n  }, [stop]);\r\n\r\n  return {\r\n    start,\r\n    stop,\r\n    getAudioBlob: encodePCM,\r\n    clearBuffer,\r\n    isRecording,\r\n    error,\r\n  };\r\n}\r\n"],"mappings":"AAAA;AACA,OAASA,SAAS,CAAEC,MAAM,CAAEC,WAAW,CAAEC,QAAQ,KAAQ,OAAO,CAEhE,MAAO,SAAS,CAAAC,WAAWA,CAAA,CAAG,CAC5B,KAAM,CAAAC,eAAe,CAAGJ,MAAM,CAAC,IAAI,CAAC,CACpC,KAAM,CAAAK,YAAY,CAAGL,MAAM,CAAC,IAAI,CAAC,CACjC,KAAM,CAAAM,SAAS,CAAGN,MAAM,CAAC,IAAI,CAAC,CAC9B,KAAM,CAAAO,SAAS,CAAGP,MAAM,CAAC,IAAI,CAAC,CAC9B,KAAM,CAAAQ,YAAY,CAAGR,MAAM,CAAC,CAC1BS,IAAI,CAAE,CAAC,CACPC,MAAM,CAAE,EACV,CAAC,CAAC,CAEF,KAAM,CAACC,WAAW,CAAEC,cAAc,CAAC,CAAGV,QAAQ,CAAC,KAAK,CAAC,CACrD,KAAM,CAACW,KAAK,CAAEC,QAAQ,CAAC,CAAGZ,QAAQ,CAAC,IAAI,CAAC,CAExC;AACA,KAAM,CAAAa,gBAAgB,CAAG,KAAK,CAC9B,KAAM,CAAAC,UAAU,CAAG,EAAE,CAErB;AACA,KAAM,CAAAC,gBAAgB,CAAGhB,WAAW,CAAC,CAACS,MAAM,CAAEQ,SAAS,CAAEC,UAAU,GAAK,CACtE,GAAIA,UAAU,GAAKD,SAAS,CAAE,MAAO,CAAAR,MAAM,CAC3C,KAAM,CAAAU,KAAK,CAAGF,SAAS,CAAGC,UAAU,CACpC,KAAM,CAAAE,SAAS,CAAGC,IAAI,CAACC,KAAK,CAACb,MAAM,CAACc,MAAM,CAAGJ,KAAK,CAAC,CACnD,KAAM,CAAAK,MAAM,CAAG,GAAI,CAAAC,YAAY,CAACL,SAAS,CAAC,CAC1C,GAAI,CAAAM,YAAY,CAAG,CAAC,CACpB,GAAI,CAAAC,YAAY,CAAG,CAAC,CACpB,MAAOD,YAAY,CAAGN,SAAS,CAAE,CAC/B,GAAI,CAAAQ,gBAAgB,CAAGP,IAAI,CAACC,KAAK,CAAC,CAACI,YAAY,CAAG,CAAC,EAAIP,KAAK,CAAC,CAC7D,GAAI,CAAAU,KAAK,CAAG,CAAC,CACXC,KAAK,CAAG,CAAC,CACX,IAAK,GAAI,CAAAC,CAAC,CAAGJ,YAAY,CAAEI,CAAC,CAAGH,gBAAgB,EAAIG,CAAC,CAAGtB,MAAM,CAACc,MAAM,CAAEQ,CAAC,EAAE,CAAE,CACzEF,KAAK,EAAIpB,MAAM,CAACsB,CAAC,CAAC,CAClBD,KAAK,EAAE,CACT,CACAN,MAAM,CAACE,YAAY,CAAC,CAAGG,KAAK,CAAGC,KAAK,CACpCJ,YAAY,EAAE,CACdC,YAAY,CAAGC,gBAAgB,CACjC,CACA,MAAO,CAAAJ,MAAM,CACf,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAQ,SAAS,CAAGhC,WAAW,CAAC,IAAM,CAClC,KAAM,CAAAS,MAAM,CAAGF,YAAY,CAAC0B,OAAO,CAACxB,MAAM,CAC1C,KAAM,CAAAD,IAAI,CAAGD,YAAY,CAAC0B,OAAO,CAACzB,IAAI,CACtC,GAAI,CAAA0B,aAAa,CAAG,GAAI,CAAAT,YAAY,CAACjB,IAAI,CAAC,CAC1C,GAAI,CAAA2B,MAAM,CAAG,CAAC,CACd,IAAK,GAAI,CAAAJ,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGtB,MAAM,CAACc,MAAM,CAAEQ,CAAC,EAAE,CAAE,CACtCG,aAAa,CAACE,GAAG,CAAC3B,MAAM,CAACsB,CAAC,CAAC,CAAEI,MAAM,CAAC,CACpCA,MAAM,EAAI1B,MAAM,CAACsB,CAAC,CAAC,CAACR,MAAM,CAC5B,CACA,KAAM,CAAAc,UAAU,CAAGH,aAAa,CAACX,MAAM,EAAIR,UAAU,CAAG,CAAC,CAAC,CAC1D,KAAM,CAAAuB,WAAW,CAAG,GAAI,CAAAC,WAAW,CAACF,UAAU,CAAC,CAC/C,KAAM,CAAAG,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAACH,WAAW,CAAC,CAC1C,GAAI,CAAAI,UAAU,CAAG,CAAC,CAClB,IAAK,GAAI,CAAAX,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGG,aAAa,CAACX,MAAM,CAAEQ,CAAC,EAAE,CAAEW,UAAU,EAAI,CAAC,CAAE,CAC9D,GAAI,CAAAC,CAAC,CAAGtB,IAAI,CAACuB,GAAG,CAAC,CAAC,CAAC,CAAEvB,IAAI,CAACwB,GAAG,CAAC,CAAC,CAAEX,aAAa,CAACH,CAAC,CAAC,CAAC,CAAC,CACnDS,QAAQ,CAACM,QAAQ,CAACJ,UAAU,CAAEC,CAAC,CAAG,CAAC,CAAGA,CAAC,CAAG,MAAM,CAAGA,CAAC,CAAG,MAAM,CAAE,IAAI,CAAC,CACtE,CACA,MAAO,IAAI,CAAAI,IAAI,CAAC,CAACP,QAAQ,CAAC,CAAE,CAAEQ,IAAI,CAAE,WAAY,CAAC,CAAC,CACpD,CAAC,CAAE,CAACjC,UAAU,CAAC,CAAC,CAEhB;AACA,KAAM,CAAAkC,WAAW,CAAGjD,WAAW,CAAC,IAAM,CACpCO,YAAY,CAAC0B,OAAO,CAACxB,MAAM,CAAG,EAAE,CAChCF,YAAY,CAAC0B,OAAO,CAACzB,IAAI,CAAG,CAAC,CAC/B,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAA0C,KAAK,CAAGlD,WAAW,CAAC,SAAY,CACpC,GAAIU,WAAW,CAAE,OAEjB,GAAI,CACF,KAAM,CAAAyC,MAAM,CAAG,KAAM,CAAAC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC,CAAEC,KAAK,CAAE,IAAK,CAAC,CAAC,CACzEjD,SAAS,CAAC2B,OAAO,CAAGkB,MAAM,CAE1B,KAAM,CAAAK,iBAAiB,CAAGC,MAAM,CAACC,YAAY,EAAID,MAAM,CAACE,kBAAkB,CAC1ExD,eAAe,CAAC8B,OAAO,CAAG,GAAI,CAAAuB,iBAAiB,CAAC,CAAC,CAEjDnD,SAAS,CAAC4B,OAAO,CAAG9B,eAAe,CAAC8B,OAAO,CAAC2B,uBAAuB,CAACT,MAAM,CAAC,CAE3E;AACA,KAAM,CAAAU,eAAe,CAAG1D,eAAe,CAAC8B,OAAO,CAAC6B,UAAU,CAE1D1D,YAAY,CAAC6B,OAAO,CAAG9B,eAAe,CAAC8B,OAAO,CAAC8B,qBAAqB,CAAC,IAAI,CAAE,CAAC,CAAE,CAAC,CAAC,CAEhFxD,YAAY,CAAC0B,OAAO,CAACxB,MAAM,CAAG,EAAE,CAChCF,YAAY,CAAC0B,OAAO,CAACzB,IAAI,CAAG,CAAC,CAE7BJ,YAAY,CAAC6B,OAAO,CAAC+B,cAAc,CAAIC,CAAC,EAAK,CAC3C,KAAM,CAAAC,SAAS,CAAGD,CAAC,CAACE,WAAW,CAACC,cAAc,CAAC,CAAC,CAAC,CACjD,KAAM,CAAAC,WAAW,CAAGrD,gBAAgB,CAACkD,SAAS,CAAEL,eAAe,CAAE/C,gBAAgB,CAAC,CAClFP,YAAY,CAAC0B,OAAO,CAACxB,MAAM,CAAC6D,IAAI,CAACD,WAAW,CAAC,CAC7C9D,YAAY,CAAC0B,OAAO,CAACzB,IAAI,EAAI6D,WAAW,CAAC9C,MAAM,CACjD,CAAC,CAEDlB,SAAS,CAAC4B,OAAO,CAACsC,OAAO,CAACnE,YAAY,CAAC6B,OAAO,CAAC,CAC/C7B,YAAY,CAAC6B,OAAO,CAACsC,OAAO,CAACpE,eAAe,CAAC8B,OAAO,CAACuC,WAAW,CAAC,CAEjE7D,cAAc,CAAC,IAAI,CAAC,CACpBE,QAAQ,CAAC,IAAI,CAAC,CAChB,CAAE,MAAO4D,GAAG,CAAE,CACZC,OAAO,CAAC9D,KAAK,CAAC,SAAS,CAAE6D,GAAG,CAAC,CAC7B5D,QAAQ,CAAC4D,GAAG,CAAC,CACb,KAAM,CAAAA,GAAG,CACX,CACF,CAAC,CAAE,CAACzD,gBAAgB,CAAEN,WAAW,CAAC,CAAC,CAEnC;AACA,KAAM,CAAAiE,IAAI,CAAG3E,WAAW,CAAC,IAAM,CAC7B,GAAI,CAACU,WAAW,CAAE,OAElB,GAAI,CACF,GAAIN,YAAY,CAAC6B,OAAO,CAAE,CACxB7B,YAAY,CAAC6B,OAAO,CAAC2C,UAAU,CAAC,CAAC,CACjCxE,YAAY,CAAC6B,OAAO,CAAC+B,cAAc,CAAG,IAAI,CAC1C5D,YAAY,CAAC6B,OAAO,CAAG,IAAI,CAC7B,CACA,GAAI5B,SAAS,CAAC4B,OAAO,CAAE,CACrB5B,SAAS,CAAC4B,OAAO,CAAC2C,UAAU,CAAC,CAAC,CAC9BvE,SAAS,CAAC4B,OAAO,CAAG,IAAI,CAC1B,CACA,GAAI3B,SAAS,CAAC2B,OAAO,CAAE,CACrB3B,SAAS,CAAC2B,OAAO,CAAC4C,SAAS,CAAC,CAAC,CAACC,OAAO,CAAEC,CAAC,EAAKA,CAAC,CAACJ,IAAI,CAAC,CAAC,CAAC,CACtDrE,SAAS,CAAC2B,OAAO,CAAG,IAAI,CAC1B,CACA,GAAI9B,eAAe,CAAC8B,OAAO,CAAE,CAC3B9B,eAAe,CAAC8B,OAAO,CAAC+C,KAAK,CAAC,CAAC,CAC/B7E,eAAe,CAAC8B,OAAO,CAAG,IAAI,CAChC,CACF,CAAE,MAAOgC,CAAC,CAAE,CACVS,OAAO,CAACO,IAAI,CAAC,SAAS,CAAEhB,CAAC,CAAC,CAC5B,CAAC,OAAS,CACRtD,cAAc,CAAC,KAAK,CAAC,CACvB,CACF,CAAC,CAAE,CAACD,WAAW,CAAC,CAAC,CAEjB;AACAZ,SAAS,CAAC,IAAM,CACd,MAAO,IAAM,CACX6E,IAAI,CAAC,CAAC,CACR,CAAC,CACH,CAAC,CAAE,CAACA,IAAI,CAAC,CAAC,CAEV,MAAO,CACLzB,KAAK,CACLyB,IAAI,CACJO,YAAY,CAAElD,SAAS,CACvBiB,WAAW,CACXvC,WAAW,CACXE,KACF,CAAC,CACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}