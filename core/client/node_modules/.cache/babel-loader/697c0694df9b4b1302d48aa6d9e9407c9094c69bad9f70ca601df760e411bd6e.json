{"ast":null,"code":"var _jsxFileName = \"D:\\\\XM\\\\AI-Sphere-Butler\\\\core\\\\client\\\\src\\\\components\\\\AudioTranscriber.jsx\",\n  _s = $RefreshSig$();\n// src/components/AudioTranscriber.jsx\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useRecorder } from '../hooks/useRecorder';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AudioTranscriber() {\n  _s();\n  // 录音状态\n  const [isRecording, setIsRecording] = useState(false);\n  // 转写文本内容\n  const [transcription, setTranscription] = useState('');\n  // 语言参数，默认 auto\n  const [lang, setLang] = useState('auto');\n  // 是否开启声纹识别\n  const [speakerVerification, setSpeakerVerification] = useState(false);\n\n  // 自定义录音 Hook，管理录音功能\n  const recorder = useRecorder();\n\n  // WebSocket 实例引用\n  const wsRef = useRef(null);\n  // 定时发送音频的定时器引用\n  const intervalRef = useRef(null);\n\n  /**\r\n   * 发送文本消息到 LLM 服务\r\n   * @param {string} text - 要发送的文本\r\n   */\n  const sendTextMessage = async text => {\n    if (!text.trim()) return;\n    try {\n      const response = await fetch('https://192.168.1.70:6010/qwener', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text\n        })\n      });\n      if (!response.ok) {\n        throw new Error('网络响应失败，状态码: ' + response.status);\n      }\n      const data = await response.json();\n      console.log('文本发送成功，服务器返回：', data);\n    } catch (error) {\n      console.error('文本发送失败：', error);\n    }\n  };\n\n  // 组件卸载时清理资源\n  useEffect(() => {\n    return () => {\n      stopRecording();\n    };\n  }, []);\n\n  /**\r\n   * 启动录音并建立 WebSocket 连接\r\n   */\n  function startRecording() {\n    if (isRecording) return;\n\n    // 根据语言和声纹识别参数拼接 WebSocket URL 查询参数\n    let params = [];\n    if (lang) params.push(`lang=${encodeURIComponent(lang)}`);\n    if (speakerVerification) params.push('sv=1'); // 声纹识别参数，勾选时添加\n    const queryStr = params.length > 0 ? `?${params.join('&')}` : '';\n\n    // 请根据实际服务器地址修改此处 ws 地址和端口\n    const wsUrl = `ws://192.168.168.77:6007/ws/transcribe${queryStr}`;\n    const ws = new WebSocket(wsUrl);\n    ws.binaryType = 'arraybuffer';\n    ws.onopen = () => {\n      console.log('WebSocket 已连接');\n\n      // 启动录音\n      recorder.start().catch(e => {\n        alert('启动录音失败: ' + e.message);\n        ws.close();\n      });\n\n      // 定时发送音频数据（每 500ms 发送一次）\n      intervalRef.current = setInterval(() => {\n        if (ws.readyState === 1) {\n          const audioBlob = recorder.getAudioBlob();\n          if (audioBlob.size > 0) {\n            console.log('发送音频数据，大小：', audioBlob.size);\n            ws.send(audioBlob);\n            recorder.clearBuffer();\n          }\n        }\n      }, 500);\n    };\n    ws.onmessage = evt => {\n      try {\n        const resJson = JSON.parse(evt.data);\n        if (resJson.code === 0) {\n          // 收到转写正确结果\n          const recognizedText = resJson.data || '无识别结果';\n\n          // 更新转写文本展示\n          setTranscription(prev => prev + '\\n' + recognizedText);\n\n          // 识别到有效文本时，发送给后端 LLM 服务\n          if (recognizedText && recognizedText.trim() && recognizedText !== '无识别结果') {\n            sendTextMessage(recognizedText);\n          }\n        } else {\n          // 其他情况输出原始数据\n          setTranscription(prev => prev + '\\n' + evt.data);\n        }\n      } catch (e) {\n        console.error('解析转写消息失败', e);\n        setTranscription(prev => prev + '\\n' + evt.data);\n      }\n    };\n    ws.onclose = () => {\n      console.log('WebSocket 已关闭');\n      stopRecording();\n    };\n    ws.onerror = e => {\n      console.error('WebSocket 错误', e);\n    };\n    wsRef.current = ws;\n    setIsRecording(true);\n  }\n\n  /**\r\n   * 停止录音并关闭 WebSocket 连接\r\n   */\n  function stopRecording() {\n    if (!isRecording) return;\n    if (wsRef.current) {\n      wsRef.current.close();\n      wsRef.current = null;\n    }\n    recorder.stop();\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n    setIsRecording(false);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: 700,\n      margin: '20px auto',\n      fontFamily: 'Arial, sans-serif'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => isRecording ? stopRecording() : startRecording(),\n      style: {\n        padding: '8px 16px',\n        fontSize: 16,\n        backgroundColor: isRecording ? 'red' : '#4CAF50',\n        color: 'white',\n        border: 'none',\n        borderRadius: 4,\n        cursor: 'pointer',\n        marginBottom: 12\n      },\n      children: isRecording ? 'Stop Recording' : 'Start Recording'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: 12\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"langInput\",\n        style: {\n          marginRight: 8\n        },\n        children: \"Language:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"langInput\",\n        type: \"text\",\n        value: lang,\n        onChange: e => setLang(e.target.value),\n        disabled: isRecording,\n        style: {\n          padding: 4,\n          fontSize: 14,\n          width: 120\n        },\n        placeholder: \"auto\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: 20\n      },\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: speakerVerification,\n          disabled: isRecording,\n          onChange: e => setSpeakerVerification(e.target.checked),\n          style: {\n            marginRight: 6\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this), \"Speaker Verification\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"transcriptionResult\",\n      style: {\n        whiteSpace: 'pre-wrap',\n        backgroundColor: '#00e5ff',\n        padding: 10,\n        border: '1px solid #ddd',\n        borderRadius: 5,\n        minHeight: 150,\n        fontFamily: 'monospace',\n        fontSize: 14,\n        overflowY: 'auto',\n        maxHeight: 300,\n        userSelect: 'text'\n      },\n      children: transcription || 'Transcription result will be displayed here...'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n}\n_s(AudioTranscriber, \"VwFjtSr5yTsZykcmQS99JeodP8A=\", false, function () {\n  return [useRecorder];\n});\n_c = AudioTranscriber;\nvar _c;\n$RefreshReg$(_c, \"AudioTranscriber\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useRecorder","jsxDEV","_jsxDEV","AudioTranscriber","_s","isRecording","setIsRecording","transcription","setTranscription","lang","setLang","speakerVerification","setSpeakerVerification","recorder","wsRef","intervalRef","sendTextMessage","text","trim","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","console","log","error","stopRecording","startRecording","params","push","encodeURIComponent","queryStr","length","join","wsUrl","ws","WebSocket","binaryType","onopen","start","catch","e","alert","message","close","current","setInterval","readyState","audioBlob","getAudioBlob","size","send","clearBuffer","onmessage","evt","resJson","parse","code","recognizedText","prev","onclose","onerror","stop","clearInterval","style","maxWidth","margin","fontFamily","children","onClick","padding","fontSize","backgroundColor","color","border","borderRadius","cursor","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","marginRight","id","type","value","onChange","target","disabled","width","placeholder","checked","whiteSpace","minHeight","overflowY","maxHeight","userSelect","_c","$RefreshReg$"],"sources":["D:/XM/AI-Sphere-Butler/core/client/src/components/AudioTranscriber.jsx"],"sourcesContent":["// src/components/AudioTranscriber.jsx\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport { useRecorder } from '../hooks/useRecorder';\r\n\r\nexport default function AudioTranscriber() {\r\n  // 录音状态\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  // 转写文本内容\r\n  const [transcription, setTranscription] = useState('');\r\n  // 语言参数，默认 auto\r\n  const [lang, setLang] = useState('auto');\r\n  // 是否开启声纹识别\r\n  const [speakerVerification, setSpeakerVerification] = useState(false);\r\n\r\n  // 自定义录音 Hook，管理录音功能\r\n  const recorder = useRecorder();\r\n\r\n  // WebSocket 实例引用\r\n  const wsRef = useRef(null);\r\n  // 定时发送音频的定时器引用\r\n  const intervalRef = useRef(null);\r\n\r\n  /**\r\n   * 发送文本消息到 LLM 服务\r\n   * @param {string} text - 要发送的文本\r\n   */\r\n  const sendTextMessage = async (text) => {\r\n    if (!text.trim()) return;\r\n\r\n    try {\r\n      const response = await fetch('https://192.168.1.70:6010/qwener', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ text }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('网络响应失败，状态码: ' + response.status);\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('文本发送成功，服务器返回：', data);\r\n    } catch (error) {\r\n      console.error('文本发送失败：', error);\r\n    }\r\n  };\r\n\r\n  // 组件卸载时清理资源\r\n  useEffect(() => {\r\n    return () => {\r\n      stopRecording();\r\n    };\r\n  }, []);\r\n\r\n  /**\r\n   * 启动录音并建立 WebSocket 连接\r\n   */\r\n  function startRecording() {\r\n    if (isRecording) return;\r\n\r\n    // 根据语言和声纹识别参数拼接 WebSocket URL 查询参数\r\n    let params = [];\r\n    if (lang) params.push(`lang=${encodeURIComponent(lang)}`);\r\n    if (speakerVerification) params.push('sv=1'); // 声纹识别参数，勾选时添加\r\n    const queryStr = params.length > 0 ? `?${params.join('&')}` : '';\r\n\r\n    // 请根据实际服务器地址修改此处 ws 地址和端口\r\n    const wsUrl = `ws://192.168.168.77:6007/ws/transcribe${queryStr}`;\r\n    const ws = new WebSocket(wsUrl);\r\n    ws.binaryType = 'arraybuffer';\r\n\r\n    ws.onopen = () => {\r\n      console.log('WebSocket 已连接');\r\n\r\n      // 启动录音\r\n      recorder.start().catch((e) => {\r\n        alert('启动录音失败: ' + e.message);\r\n        ws.close();\r\n      });\r\n\r\n      // 定时发送音频数据（每 500ms 发送一次）\r\n      intervalRef.current = setInterval(() => {\r\n        if (ws.readyState === 1) {\r\n          const audioBlob = recorder.getAudioBlob();\r\n          if (audioBlob.size > 0) {\r\n            console.log('发送音频数据，大小：', audioBlob.size);\r\n            ws.send(audioBlob);\r\n            recorder.clearBuffer();\r\n          }\r\n        }\r\n      }, 500);\r\n    };\r\n\r\n    ws.onmessage = (evt) => {\r\n      try {\r\n        const resJson = JSON.parse(evt.data);\r\n        if (resJson.code === 0) {\r\n          // 收到转写正确结果\r\n          const recognizedText = resJson.data || '无识别结果';\r\n\r\n          // 更新转写文本展示\r\n          setTranscription((prev) => prev + '\\n' + recognizedText);\r\n\r\n          // 识别到有效文本时，发送给后端 LLM 服务\r\n          if (recognizedText && recognizedText.trim() && recognizedText !== '无识别结果') {\r\n            sendTextMessage(recognizedText);\r\n          }\r\n        } else {\r\n          // 其他情况输出原始数据\r\n          setTranscription((prev) => prev + '\\n' + evt.data);\r\n        }\r\n      } catch (e) {\r\n        console.error('解析转写消息失败', e);\r\n        setTranscription((prev) => prev + '\\n' + evt.data);\r\n      }\r\n    };\r\n\r\n    ws.onclose = () => {\r\n      console.log('WebSocket 已关闭');\r\n      stopRecording();\r\n    };\r\n\r\n    ws.onerror = (e) => {\r\n      console.error('WebSocket 错误', e);\r\n    };\r\n\r\n    wsRef.current = ws;\r\n    setIsRecording(true);\r\n  }\r\n\r\n  /**\r\n   * 停止录音并关闭 WebSocket 连接\r\n   */\r\n  function stopRecording() {\r\n    if (!isRecording) return;\r\n\r\n    if (wsRef.current) {\r\n      wsRef.current.close();\r\n      wsRef.current = null;\r\n    }\r\n    recorder.stop();\r\n\r\n    if (intervalRef.current) {\r\n      clearInterval(intervalRef.current);\r\n      intervalRef.current = null;\r\n    }\r\n\r\n    setIsRecording(false);\r\n  }\r\n\r\n  return (\r\n    <div style={{ maxWidth: 700, margin: '20px auto', fontFamily: 'Arial, sans-serif' }}>\r\n      {/* 录音控制按钮 */}\r\n      <button\r\n        onClick={() => (isRecording ? stopRecording() : startRecording())}\r\n        style={{\r\n          padding: '8px 16px',\r\n          fontSize: 16,\r\n          backgroundColor: isRecording ? 'red' : '#4CAF50',\r\n          color: 'white',\r\n          border: 'none',\r\n          borderRadius: 4,\r\n          cursor: 'pointer',\r\n          marginBottom: 12,\r\n        }}\r\n      >\r\n        {isRecording ? 'Stop Recording' : 'Start Recording'}\r\n      </button>\r\n\r\n      {/* 语言输入 */}\r\n      <div style={{ marginBottom: 12 }}>\r\n        <label htmlFor=\"langInput\" style={{ marginRight: 8 }}>\r\n          Language:\r\n        </label>\r\n        <input\r\n          id=\"langInput\"\r\n          type=\"text\"\r\n          value={lang}\r\n          onChange={(e) => setLang(e.target.value)}\r\n          disabled={isRecording}\r\n          style={{ padding: 4, fontSize: 14, width: 120 }}\r\n          placeholder=\"auto\"\r\n        />\r\n      </div>\r\n\r\n      {/* 声纹识别开关 */}\r\n      <div style={{ marginBottom: 20 }}>\r\n        <label>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={speakerVerification}\r\n            disabled={isRecording}\r\n            onChange={(e) => setSpeakerVerification(e.target.checked)}\r\n            style={{ marginRight: 6 }}\r\n          />\r\n          Speaker Verification\r\n        </label>\r\n      </div>\r\n\r\n      {/* 转写结果展示区域 */}\r\n      <div\r\n        id=\"transcriptionResult\"\r\n        style={{\r\n          whiteSpace: 'pre-wrap',\r\n          backgroundColor: '#00e5ff',\r\n          padding: 10,\r\n          border: '1px solid #ddd',\r\n          borderRadius: 5,\r\n          minHeight: 150,\r\n          fontFamily: 'monospace',\r\n          fontSize: 14,\r\n          overflowY: 'auto',\r\n          maxHeight: 300,\r\n          userSelect: 'text',\r\n        }}\r\n      >\r\n        {transcription || 'Transcription result will be displayed here...'}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}