{"ast":null,"code":"var _jsxFileName = \"D:\\\\XM\\\\AI-Sphere-Butler\\\\core\\\\client\\\\src\\\\contexts\\\\RecorderProvider.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useRef, useEffect, useContext } from 'react';\nimport { useRecorder } from '../hooks/useRecorder';\nimport { useButler } from '../components/ButlersContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RecorderContext = /*#__PURE__*/createContext(null);\nexport function RecorderProvider({\n  children\n}) {\n  _s();\n  const {\n    activeButlerId,\n    setActiveButlerId\n  } = useButler();\n  const [isRecording, setIsRecording] = useState(false);\n  const [transcription, setTranscription] = useState('');\n  const [lang, setLang] = useState(() => {\n    try {\n      return localStorage.getItem('audioTranscriberLang') || 'auto';\n    } catch {\n      return 'auto';\n    }\n  });\n  const [speakerVerification, setSpeakerVerification] = useState(() => {\n    try {\n      return localStorage.getItem('audioTranscriberSpeakerVerification') === 'true';\n    } catch {\n      return false;\n    }\n  });\n  const [wakeWordEnabled, setWakeWordEnabled] = useState(() => {\n    try {\n      const stored = localStorage.getItem('wakeWordEnabled');\n      return stored === null ? true : stored === 'true';\n    } catch {\n      return true;\n    }\n  });\n  const [wakeWords, setWakeWords] = useState(() => {\n    try {\n      const stored = localStorage.getItem('wakeWords');\n      return stored ? stored : 'xiao li';\n    } catch {\n      return 'xiao li';\n    }\n  });\n  const recorder = useRecorder();\n  const wsRef = useRef(null);\n  const intervalRef = useRef(null);\n  const unmountedRef = useRef(false);\n\n  // 新增：后台数字人说话打断关键词列表，检测到任意关键字即触发打断\n  // 这里可根据需求增加更多打断词\n  const interruptKeywords = ['先说', '你停一下', '等等', '暂停', '打断'];\n\n  // 统一切换管家函数（核心功能）\n  const activateButler = async id => {\n    if (!id) return;\n    if (id === activeButlerId) return;\n    try {\n      const resp = await fetch('http://192.168.168.77:6010/api/switch_avatar', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          butler_id: id\n        })\n      });\n      if (!resp.ok) throw new Error('后端错误，状态码: ' + resp.status);\n      const data = await resp.json();\n      if (data.error) throw new Error(data.error);\n      setActiveButlerId(id);\n      console.log('[activateButler] 成功切换管家:', id);\n    } catch (e) {\n      alert('切换管家失败: ' + e.message);\n      console.error('[activateButler] 切换失败:', e);\n    }\n  };\n\n  // 新增函数：通知后台停止数字人当前说话（打断功能）\n  // 假设后端提供了停止接口，您需要后端配合实现此接口\n  const interruptSpeaking = async () => {\n    try {\n      const resp = await fetch('http://192.168.168.77:6010/api/interrupt_speaking', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!resp.ok) {\n        console.warn('[interruptSpeaking] 后端停止接口调用失败，状态码:', resp.status);\n      } else {\n        console.log('[interruptSpeaking] 成功通知后台打断数字人说话');\n      }\n    } catch (e) {\n      console.error('[interruptSpeaking] 调用停止接口异常:', e);\n    }\n  };\n\n  // 发送文本消息到服务器\n  const sendTextMessage = async text => {\n    if (!text.trim()) return;\n    try {\n      const response = await fetch('http://192.168.168.77:6010/qwener', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text\n        })\n      });\n      if (!response.ok) throw new Error('网络响应失败，状态码: ' + response.status);\n      const data = await response.json();\n      console.log('文本发送成功，服务器返回：', data);\n    } catch (error) {\n      console.error('文本发送失败：', error);\n    }\n  };\n\n  // 停止录音\n  const stopRecording = () => {\n    if (!isRecording) {\n      console.log('[stopRecording] 当前非录音状态，忽略重复调用');\n      return;\n    }\n    if (wsRef.current) {\n      wsRef.current.onclose = null;\n      wsRef.current.close();\n      wsRef.current = null;\n    }\n    recorder.stop();\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n    setIsRecording(false);\n  };\n\n  // 开始录音\n  const startRecording = () => {\n    if (isRecording) {\n      console.log('[startRecording] 已经在录音中，忽略重复调用');\n      return;\n    }\n    setIsRecording(true);\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(() => {\n      if (unmountedRef.current) {\n        stopRecording();\n        return;\n      }\n      let params = [];\n      if (lang) params.push(`lang=${encodeURIComponent(lang)}`);\n      if (speakerVerification) params.push('sv=1');\n      if (wakeWordEnabled) params.push('wakeword=1');\n      if (wakeWords) {\n        const cleanedWakeWords = wakeWords.split(',').map(w => w.trim()).filter(w => w.length > 0).join(',');\n        if (cleanedWakeWords.length > 0) {\n          params.push(`wakewords=${encodeURIComponent(cleanedWakeWords)}`);\n        }\n      }\n      const queryStr = params.length > 0 ? `?${params.join('&')}` : '';\n      const wsUrl = `ws://192.168.168.77:6007/ws/transcribe${queryStr}`;\n      console.log('[startRecording] 创建 WebSocket 连接', wsUrl);\n      const ws = new WebSocket(wsUrl);\n      ws.binaryType = 'arraybuffer';\n      ws.onmessage = evt => {\n        try {\n          const resJson = JSON.parse(evt.data);\n          if (resJson.code === 0) {\n            const recognizedText = resJson.data || '无识别结果';\n            console.log('【原始识别文本】', recognizedText);\n            const cleanedText = recognizedText.replace(/[^\\u4e00-\\u9fa5a-zA-Z0-9]/g, '').trim();\n            console.log('【清洗后文本】', cleanedText);\n            setTranscription(prev => prev ? prev + '\\n' + recognizedText : recognizedText);\n            if (cleanedText) {\n              // 先检测是否包含打断关键词，若包含，先中断后台数字人说话并停止当前录音/播放等\n              if (interruptKeywords.some(kw => cleanedText.includes(kw))) {\n                console.log('【检测到打断关键词】', cleanedText);\n                // 调用后台打断接口\n                interruptSpeaking();\n                // 也可以停止当前录音，重新开始录音（如果需要）\n                stopRecording();\n                // 这里也可以根据需求决定是否立即开始新一轮录音或其他逻辑\n                // startRecording(); // 若想自动开始新录音，可解开此注释\n              }\n\n              // 语音指令切换管家\n              if (cleanedText.includes('切换小丽')) {\n                console.log('【匹配成功】切换到小丽');\n                activateButler('xl');\n              } else if (cleanedText.includes('切换法师')) {\n                activateButler('cs');\n              } else if (cleanedText.includes('小贾')) {\n                activateButler('butler3');\n              } else if (cleanedText.includes('星期天')) {\n                activateButler('butler4');\n              }\n              sendTextMessage(recognizedText);\n            }\n          }\n        } catch (e) {\n          console.error('【解析失败】', e);\n        }\n      };\n      ws.onopen = () => {\n        console.log('[WebSocket] 连接已打开');\n        recorder.start().then(() => {\n          console.log('[Recorder] 录音开始');\n          intervalRef.current = setInterval(() => {\n            if (ws.readyState === 1) {\n              const audioBlob = recorder.getAudioBlob();\n              if (audioBlob.size > 0) {\n                console.log('[WebSocket] 发送音频数据，大小：', audioBlob.size);\n                ws.send(audioBlob);\n                recorder.clearBuffer();\n              }\n            }\n          }, 500);\n        }).catch(e => {\n          alert('启动录音失败: ' + e.message);\n          console.error('[Recorder] 启动失败', e);\n          ws.close();\n          setIsRecording(false);\n        });\n      };\n      ws.onclose = event => {\n        console.log('[WebSocket] 连接关闭，代码:', event.code, '原因:', event.reason);\n        setIsRecording(false);\n        if (intervalRef.current) {\n          clearInterval(intervalRef.current);\n          intervalRef.current = null;\n        }\n        wsRef.current = null;\n      };\n      ws.onerror = e => {\n        console.error('[WebSocket] 错误', e);\n        alert('WebSocket 连接出错，请检查服务器状态和网络连接。');\n      };\n      wsRef.current = ws;\n    }).catch(error => {\n      alert('请求麦克风权限失败: ' + error.message);\n      console.error('[startRecording] 获取麦克风权限失败', error);\n      setIsRecording(false);\n    });\n  };\n\n  // 组件卸载清理\n  useEffect(() => {\n    unmountedRef.current = false;\n    return () => {\n      unmountedRef.current = true;\n      stopRecording();\n    };\n  }, []);\n\n  // 持久化设置\n  useEffect(() => {\n    try {\n      localStorage.setItem('audioTranscriberLang', lang);\n    } catch {}\n  }, [lang]);\n  useEffect(() => {\n    try {\n      localStorage.setItem('audioTranscriberSpeakerVerification', speakerVerification.toString());\n    } catch {}\n  }, [speakerVerification]);\n  useEffect(() => {\n    try {\n      localStorage.setItem('wakeWordEnabled', wakeWordEnabled.toString());\n    } catch {}\n  }, [wakeWordEnabled]);\n  useEffect(() => {\n    try {\n      localStorage.setItem('wakeWords', wakeWords);\n    } catch {}\n  }, [wakeWords]);\n\n  // 暴露所有状态和方法（关键：包含activateButler）\n  return /*#__PURE__*/_jsxDEV(RecorderContext.Provider, {\n    value: {\n      isRecording,\n      transcription,\n      lang,\n      speakerVerification,\n      wakeWordEnabled,\n      wakeWords,\n      setLang,\n      setSpeakerVerification,\n      setWakeWordEnabled,\n      setWakeWords,\n      startRecording,\n      stopRecording,\n      setTranscription,\n      activateButler,\n      // 暴露切换管家函数\n      interruptSpeaking // 暴露打断后台数字人说话函数\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 282,\n    columnNumber: 5\n  }, this);\n}\n_s(RecorderProvider, \"4mxtDLhYRXMw1FT/OJv3sYymwtE=\", false, function () {\n  return [useButler, useRecorder];\n});\n_c = RecorderProvider;\nexport function useRecorderContext() {\n  _s2();\n  const context = useContext(RecorderContext);\n  if (!context) {\n    throw new Error('useRecorderContext 必须在 RecorderProvider 内使用');\n  }\n  return context;\n}\n_s2(useRecorderContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"RecorderProvider\");","map":{"version":3,"names":["React","createContext","useState","useRef","useEffect","useContext","useRecorder","useButler","jsxDEV","_jsxDEV","RecorderContext","RecorderProvider","children","_s","activeButlerId","setActiveButlerId","isRecording","setIsRecording","transcription","setTranscription","lang","setLang","localStorage","getItem","speakerVerification","setSpeakerVerification","wakeWordEnabled","setWakeWordEnabled","stored","wakeWords","setWakeWords","recorder","wsRef","intervalRef","unmountedRef","interruptKeywords","activateButler","id","resp","fetch","method","headers","body","JSON","stringify","butler_id","ok","Error","status","data","json","error","console","log","e","alert","message","interruptSpeaking","warn","sendTextMessage","text","trim","response","stopRecording","current","onclose","close","stop","clearInterval","startRecording","navigator","mediaDevices","getUserMedia","audio","then","params","push","encodeURIComponent","cleanedWakeWords","split","map","w","filter","length","join","queryStr","wsUrl","ws","WebSocket","binaryType","onmessage","evt","resJson","parse","code","recognizedText","cleanedText","replace","prev","some","kw","includes","onopen","start","setInterval","readyState","audioBlob","getAudioBlob","size","send","clearBuffer","catch","event","reason","onerror","setItem","toString","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useRecorderContext","_s2","context","$RefreshReg$"],"sources":["D:/XM/AI-Sphere-Butler/core/client/src/contexts/RecorderProvider.jsx"],"sourcesContent":["import React, { createContext, useState, useRef, useEffect, useContext } from 'react';\r\nimport { useRecorder } from '../hooks/useRecorder';\r\nimport { useButler } from '../components/ButlersContext';\r\n\r\nconst RecorderContext = createContext(null);\r\n\r\nexport function RecorderProvider({ children }) {\r\n  const { activeButlerId, setActiveButlerId } = useButler();\r\n\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [transcription, setTranscription] = useState('');\r\n  const [lang, setLang] = useState(() => {\r\n    try {\r\n      return localStorage.getItem('audioTranscriberLang') || 'auto';\r\n    } catch {\r\n      return 'auto';\r\n    }\r\n  });\r\n  const [speakerVerification, setSpeakerVerification] = useState(() => {\r\n    try {\r\n      return localStorage.getItem('audioTranscriberSpeakerVerification') === 'true';\r\n    } catch {\r\n      return false;\r\n    }\r\n  });\r\n\r\n  const [wakeWordEnabled, setWakeWordEnabled] = useState(() => {\r\n    try {\r\n      const stored = localStorage.getItem('wakeWordEnabled');\r\n      return stored === null ? true : stored === 'true';\r\n    } catch {\r\n      return true;\r\n    }\r\n  });\r\n  const [wakeWords, setWakeWords] = useState(() => {\r\n    try {\r\n      const stored = localStorage.getItem('wakeWords');\r\n      return stored ? stored : 'xiao li';\r\n    } catch {\r\n      return 'xiao li';\r\n    }\r\n  });\r\n\r\n  const recorder = useRecorder();\r\n\r\n  const wsRef = useRef(null);\r\n  const intervalRef = useRef(null);\r\n  const unmountedRef = useRef(false);\r\n\r\n  // 新增：后台数字人说话打断关键词列表，检测到任意关键字即触发打断\r\n  // 这里可根据需求增加更多打断词\r\n  const interruptKeywords = ['先说', '你停一下', '等等', '暂停', '打断'];\r\n\r\n  // 统一切换管家函数（核心功能）\r\n  const activateButler = async (id) => {\r\n    if (!id) return;\r\n    if (id === activeButlerId) return;\r\n\r\n    try {\r\n      const resp = await fetch('http://192.168.168.77:6010/api/switch_avatar', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ butler_id: id }),\r\n      });\r\n      if (!resp.ok) throw new Error('后端错误，状态码: ' + resp.status);\r\n      const data = await resp.json();\r\n      if (data.error) throw new Error(data.error);\r\n      setActiveButlerId(id);\r\n      console.log('[activateButler] 成功切换管家:', id);\r\n    } catch (e) {\r\n      alert('切换管家失败: ' + e.message);\r\n      console.error('[activateButler] 切换失败:', e);\r\n    }\r\n  };\r\n\r\n  // 新增函数：通知后台停止数字人当前说话（打断功能）\r\n  // 假设后端提供了停止接口，您需要后端配合实现此接口\r\n  const interruptSpeaking = async () => {\r\n    try {\r\n      const resp = await fetch('http://192.168.168.77:6010/api/interrupt_speaking', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n      });\r\n      if (!resp.ok) {\r\n        console.warn('[interruptSpeaking] 后端停止接口调用失败，状态码:', resp.status);\r\n      } else {\r\n        console.log('[interruptSpeaking] 成功通知后台打断数字人说话');\r\n      }\r\n    } catch (e) {\r\n      console.error('[interruptSpeaking] 调用停止接口异常:', e);\r\n    }\r\n  };\r\n\r\n  // 发送文本消息到服务器\r\n  const sendTextMessage = async (text) => {\r\n    if (!text.trim()) return;\r\n    try {\r\n      const response = await fetch('http://192.168.168.77:6010/qwener', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ text }),\r\n      });\r\n      if (!response.ok) throw new Error('网络响应失败，状态码: ' + response.status);\r\n      const data = await response.json();\r\n      console.log('文本发送成功，服务器返回：', data);\r\n    } catch (error) {\r\n      console.error('文本发送失败：', error);\r\n    }\r\n  };\r\n\r\n  // 停止录音\r\n  const stopRecording = () => {\r\n    if (!isRecording) {\r\n      console.log('[stopRecording] 当前非录音状态，忽略重复调用');\r\n      return;\r\n    }\r\n    if (wsRef.current) {\r\n      wsRef.current.onclose = null;\r\n      wsRef.current.close();\r\n      wsRef.current = null;\r\n    }\r\n    recorder.stop();\r\n    if (intervalRef.current) {\r\n      clearInterval(intervalRef.current);\r\n      intervalRef.current = null;\r\n    }\r\n    setIsRecording(false);\r\n  };\r\n\r\n  // 开始录音\r\n  const startRecording = () => {\r\n    if (isRecording) {\r\n      console.log('[startRecording] 已经在录音中，忽略重复调用');\r\n      return;\r\n    }\r\n\r\n    setIsRecording(true);\r\n\r\n    navigator.mediaDevices.getUserMedia({ audio: true })\r\n      .then(() => {\r\n        if (unmountedRef.current) {\r\n          stopRecording();\r\n          return;\r\n        }\r\n        let params = [];\r\n        if (lang) params.push(`lang=${encodeURIComponent(lang)}`);\r\n        if (speakerVerification) params.push('sv=1');\r\n        if (wakeWordEnabled) params.push('wakeword=1');\r\n        if (wakeWords) {\r\n          const cleanedWakeWords = wakeWords.split(',').map(w => w.trim()).filter(w => w.length > 0).join(',');\r\n          if (cleanedWakeWords.length > 0) {\r\n            params.push(`wakewords=${encodeURIComponent(cleanedWakeWords)}`);\r\n          }\r\n        }\r\n        const queryStr = params.length > 0 ? `?${params.join('&')}` : '';\r\n\r\n        const wsUrl = `ws://192.168.168.77:6007/ws/transcribe${queryStr}`;\r\n        console.log('[startRecording] 创建 WebSocket 连接', wsUrl);\r\n        const ws = new WebSocket(wsUrl);\r\n        ws.binaryType = 'arraybuffer';\r\n\r\n        ws.onmessage = (evt) => {\r\n          try {\r\n            const resJson = JSON.parse(evt.data);\r\n            if (resJson.code === 0) {\r\n              const recognizedText = resJson.data || '无识别结果';\r\n              console.log('【原始识别文本】', recognizedText);\r\n\r\n              const cleanedText = recognizedText.replace(/[^\\u4e00-\\u9fa5a-zA-Z0-9]/g, '').trim();\r\n              console.log('【清洗后文本】', cleanedText);\r\n\r\n              setTranscription(prev => (prev ? prev + '\\n' + recognizedText : recognizedText));\r\n\r\n              if (cleanedText) {\r\n                // 先检测是否包含打断关键词，若包含，先中断后台数字人说话并停止当前录音/播放等\r\n                if (interruptKeywords.some(kw => cleanedText.includes(kw))) {\r\n                  console.log('【检测到打断关键词】', cleanedText);\r\n                  // 调用后台打断接口\r\n                  interruptSpeaking();\r\n                  // 也可以停止当前录音，重新开始录音（如果需要）\r\n                  stopRecording();\r\n                  // 这里也可以根据需求决定是否立即开始新一轮录音或其他逻辑\r\n                  // startRecording(); // 若想自动开始新录音，可解开此注释\r\n                }\r\n\r\n                // 语音指令切换管家\r\n                if (cleanedText.includes('切换小丽')) {\r\n                  console.log('【匹配成功】切换到小丽');\r\n                  activateButler('xl');\r\n                } else if (cleanedText.includes('切换法师')) {\r\n                  activateButler('cs');\r\n                } else if (cleanedText.includes('小贾')) {\r\n                  activateButler('butler3');\r\n                } else if (cleanedText.includes('星期天')) {\r\n                  activateButler('butler4');\r\n                }\r\n\r\n                sendTextMessage(recognizedText);\r\n              }\r\n            }\r\n          } catch (e) {\r\n            console.error('【解析失败】', e);\r\n          }\r\n        };\r\n\r\n        ws.onopen = () => {\r\n          console.log('[WebSocket] 连接已打开');\r\n          recorder.start()\r\n            .then(() => {\r\n              console.log('[Recorder] 录音开始');\r\n              intervalRef.current = setInterval(() => {\r\n                if (ws.readyState === 1) {\r\n                  const audioBlob = recorder.getAudioBlob();\r\n                  if (audioBlob.size > 0) {\r\n                    console.log('[WebSocket] 发送音频数据，大小：', audioBlob.size);\r\n                    ws.send(audioBlob);\r\n                    recorder.clearBuffer();\r\n                  }\r\n                }\r\n              }, 500);\r\n            })\r\n            .catch(e => {\r\n              alert('启动录音失败: ' + e.message);\r\n              console.error('[Recorder] 启动失败', e);\r\n              ws.close();\r\n              setIsRecording(false);\r\n            });\r\n        };\r\n\r\n        ws.onclose = (event) => {\r\n          console.log('[WebSocket] 连接关闭，代码:', event.code, '原因:', event.reason);\r\n          setIsRecording(false);\r\n          if (intervalRef.current) {\r\n            clearInterval(intervalRef.current);\r\n            intervalRef.current = null;\r\n          }\r\n          wsRef.current = null;\r\n        };\r\n\r\n        ws.onerror = (e) => {\r\n          console.error('[WebSocket] 错误', e);\r\n          alert('WebSocket 连接出错，请检查服务器状态和网络连接。');\r\n        };\r\n\r\n        wsRef.current = ws;\r\n      })\r\n      .catch(error => {\r\n        alert('请求麦克风权限失败: ' + error.message);\r\n        console.error('[startRecording] 获取麦克风权限失败', error);\r\n        setIsRecording(false);\r\n      });\r\n  };\r\n\r\n  // 组件卸载清理\r\n  useEffect(() => {\r\n    unmountedRef.current = false;\r\n    return () => {\r\n      unmountedRef.current = true;\r\n      stopRecording();\r\n    };\r\n  }, []);\r\n\r\n  // 持久化设置\r\n  useEffect(() => {\r\n    try { localStorage.setItem('audioTranscriberLang', lang); } catch {}\r\n  }, [lang]);\r\n\r\n  useEffect(() => {\r\n    try { localStorage.setItem('audioTranscriberSpeakerVerification', speakerVerification.toString()); } catch {}\r\n  }, [speakerVerification]);\r\n\r\n  useEffect(() => {\r\n    try { localStorage.setItem('wakeWordEnabled', wakeWordEnabled.toString()); } catch {}\r\n  }, [wakeWordEnabled]);\r\n\r\n  useEffect(() => {\r\n    try { localStorage.setItem('wakeWords', wakeWords); } catch {}\r\n  }, [wakeWords]);\r\n\r\n  // 暴露所有状态和方法（关键：包含activateButler）\r\n  return (\r\n    <RecorderContext.Provider value={{\r\n      isRecording,\r\n      transcription,\r\n      lang,\r\n      speakerVerification,\r\n      wakeWordEnabled,\r\n      wakeWords,\r\n      setLang,\r\n      setSpeakerVerification,\r\n      setWakeWordEnabled,\r\n      setWakeWords,\r\n      startRecording,\r\n      stopRecording,\r\n      setTranscription,\r\n      activateButler, // 暴露切换管家函数\r\n      interruptSpeaking, // 暴露打断后台数字人说话函数\r\n    }}>\r\n      {children}\r\n    </RecorderContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useRecorderContext() {\r\n  const context = useContext(RecorderContext);\r\n  if (!context) {\r\n    throw new Error('useRecorderContext 必须在 RecorderProvider 内使用');\r\n  }\r\n  return context;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}