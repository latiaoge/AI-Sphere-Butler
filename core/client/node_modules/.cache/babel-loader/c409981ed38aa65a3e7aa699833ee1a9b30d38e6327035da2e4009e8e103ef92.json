{"ast":null,"code":"var _jsxFileName = \"D:\\\\XM\\\\AI-Sphere-Butler\\\\core\\\\client\\\\src\\\\components\\\\WallpaperManager.jsx\",\n  _s = $RefreshSig$();\n// components/WallpaperManager.jsx\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const menuWallpapers = {\n  home: '/core/client/ai-butler/image/bg-home.jpeg',\n  // 备用图片\n  butler: '/core/client/ai-butler/image/bg-butler.jpeg',\n  car: '/core/client/ai-butler/image/bg-car.jpeg',\n  homeassistant: '/core/client/ai-butler/image/bg-homeassistant.jpeg',\n  ops: '/core/client/ai-butler/image/bg-ops.jpeg',\n  settings: '/core/client/ai-butler/image/bg-settings.jpeg'\n};\n\n// 视频文件路径（请替换成实际mp4路径）\nconst homeVideoSrc = '/core/client/ai-butler/video/bg-home.mp4';\nconst WallpaperManager = ({\n  selectedMenu,\n  showGlassTransition\n}) => {\n  _s();\n  const [currentWallpaper, setCurrentWallpaper] = useState(menuWallpapers.home);\n  const [isVideoLoaded, setIsVideoLoaded] = useState(false);\n  const [isVideoError, setIsVideoError] = useState(false);\n  const [isImageLoading, setIsImageLoading] = useState(true);\n  const [imageLoadError, setImageLoadError] = useState(false);\n  useEffect(() => {\n    // 重置状态\n    setIsVideoLoaded(false);\n    setIsVideoError(false);\n    setImageLoadError(false);\n    setIsImageLoading(true);\n    if (selectedMenu !== 'home') {\n      // 其他菜单加载图片\n      const targetWallpaper = menuWallpapers[selectedMenu] || menuWallpapers.home;\n      const img = new Image();\n      img.onload = () => {\n        setCurrentWallpaper(targetWallpaper);\n        setIsImageLoading(false);\n      };\n      img.onerror = () => {\n        console.error('壁纸加载失败:', targetWallpaper);\n        // 尝试加载默认home壁纸\n        const homeImg = new Image();\n        homeImg.onload = () => {\n          setCurrentWallpaper(menuWallpapers.home);\n          setIsImageLoading(false);\n        };\n        homeImg.onerror = () => {\n          setImageLoadError(true);\n          setIsImageLoading(false);\n        };\n        homeImg.src = menuWallpapers.home;\n      };\n      img.src = targetWallpaper;\n    } else {\n      // home菜单时，先尝试加载视频，图片加载状态置为false\n      setIsImageLoading(false);\n    }\n  }, [selectedMenu]);\n\n  // 公共样式\n  const baseStyle = {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    zIndex: -1,\n    pointerEvents: 'none',\n    transition: 'opacity 0.5s ease-in-out'\n  };\n\n  // 视频专用样式，带objectFit\n  const videoStyle = {\n    ...baseStyle,\n    objectFit: 'cover',\n    opacity: isVideoLoaded && !isVideoError ? 1 : 0\n  };\n\n  // 图片专用样式\n  const imageStyle = {\n    ...baseStyle,\n    backgroundImage: `url(${currentWallpaper})`,\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n    opacity: (selectedMenu !== 'home' || isVideoError) && !isImageLoading && !imageLoadError ? 1 : 0\n  };\n\n  // 视频加载成功回调\n  const handleVideoCanPlay = () => {\n    setIsVideoLoaded(true);\n    setIsVideoError(false);\n  };\n\n  // 视频加载失败回调\n  const handleVideoError = () => {\n    console.error('视频加载失败，切换为壁纸');\n    setIsVideoError(true);\n    setIsVideoLoaded(false);\n  };\n\n  // 如果是home菜单，优先显示视频，视频加载失败或没加载时显示壁纸\n  if (selectedMenu === 'home') {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        autoPlay: true,\n        loop: true,\n        muted: true,\n        playsInline: true,\n        preload: \"auto\",\n        style: videoStyle,\n        src: homeVideoSrc,\n        \"aria-hidden\": \"true\",\n        onCanPlay: handleVideoCanPlay,\n        onError: handleVideoError\n      }, \"home-video\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), (isVideoError || !isVideoLoaded) && !isImageLoading && !imageLoadError && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app-wallpaper\",\n        style: imageStyle,\n        \"aria-hidden\": \"true\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true);\n  }\n\n  // 其他菜单只显示图片背景\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!isImageLoading && !imageLoadError && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-wallpaper\",\n      style: imageStyle,\n      \"aria-hidden\": \"true\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }, this), imageLoadError && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-wallpaper\",\n      style: {\n        ...baseStyle,\n        backgroundColor: '#222',\n        opacity: 1\n      },\n      \"aria-hidden\": \"true\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(WallpaperManager, \"39O6O4v587fXkwXwWIczLokqjFk=\");\n_c = WallpaperManager;\nexport default WallpaperManager;\nvar _c;\n$RefreshReg$(_c, \"WallpaperManager\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","menuWallpapers","home","butler","car","homeassistant","ops","settings","homeVideoSrc","WallpaperManager","selectedMenu","showGlassTransition","_s","currentWallpaper","setCurrentWallpaper","isVideoLoaded","setIsVideoLoaded","isVideoError","setIsVideoError","isImageLoading","setIsImageLoading","imageLoadError","setImageLoadError","targetWallpaper","img","Image","onload","onerror","console","error","homeImg","src","baseStyle","position","top","left","width","height","zIndex","pointerEvents","transition","videoStyle","objectFit","opacity","imageStyle","backgroundImage","backgroundSize","backgroundPosition","handleVideoCanPlay","handleVideoError","children","autoPlay","loop","muted","playsInline","preload","style","onCanPlay","onError","fileName","_jsxFileName","lineNumber","columnNumber","className","backgroundColor","_c","$RefreshReg$"],"sources":["D:/XM/AI-Sphere-Butler/core/client/src/components/WallpaperManager.jsx"],"sourcesContent":["// components/WallpaperManager.jsx\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nexport const menuWallpapers = {\r\n  home: '/core/client/ai-butler/image/bg-home.jpeg', // 备用图片\r\n  butler: '/core/client/ai-butler/image/bg-butler.jpeg',\r\n  car: '/core/client/ai-butler/image/bg-car.jpeg',\r\n  homeassistant: '/core/client/ai-butler/image/bg-homeassistant.jpeg',\r\n  ops: '/core/client/ai-butler/image/bg-ops.jpeg',\r\n  settings: '/core/client/ai-butler/image/bg-settings.jpeg',\r\n};\r\n\r\n// 视频文件路径（请替换成实际mp4路径）\r\nconst homeVideoSrc = '/core/client/ai-butler/video/bg-home.mp4';\r\n\r\nconst WallpaperManager = ({ selectedMenu, showGlassTransition }) => {\r\n  const [currentWallpaper, setCurrentWallpaper] = useState(menuWallpapers.home);\r\n  const [isVideoLoaded, setIsVideoLoaded] = useState(false);\r\n  const [isVideoError, setIsVideoError] = useState(false);\r\n  const [isImageLoading, setIsImageLoading] = useState(true);\r\n  const [imageLoadError, setImageLoadError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // 重置状态\r\n    setIsVideoLoaded(false);\r\n    setIsVideoError(false);\r\n    setImageLoadError(false);\r\n    setIsImageLoading(true);\r\n\r\n    if (selectedMenu !== 'home') {\r\n      // 其他菜单加载图片\r\n      const targetWallpaper = menuWallpapers[selectedMenu] || menuWallpapers.home;\r\n\r\n      const img = new Image();\r\n      img.onload = () => {\r\n        setCurrentWallpaper(targetWallpaper);\r\n        setIsImageLoading(false);\r\n      };\r\n      img.onerror = () => {\r\n        console.error('壁纸加载失败:', targetWallpaper);\r\n        // 尝试加载默认home壁纸\r\n        const homeImg = new Image();\r\n        homeImg.onload = () => {\r\n          setCurrentWallpaper(menuWallpapers.home);\r\n          setIsImageLoading(false);\r\n        };\r\n        homeImg.onerror = () => {\r\n          setImageLoadError(true);\r\n          setIsImageLoading(false);\r\n        };\r\n        homeImg.src = menuWallpapers.home;\r\n      };\r\n      img.src = targetWallpaper;\r\n    } else {\r\n      // home菜单时，先尝试加载视频，图片加载状态置为false\r\n      setIsImageLoading(false);\r\n    }\r\n  }, [selectedMenu]);\r\n\r\n  // 公共样式\r\n  const baseStyle = {\r\n    position: 'fixed',\r\n    top: 0,\r\n    left: 0,\r\n    width: '100%',\r\n    height: '100%',\r\n    zIndex: -1,\r\n    pointerEvents: 'none',\r\n    transition: 'opacity 0.5s ease-in-out',\r\n  };\r\n\r\n  // 视频专用样式，带objectFit\r\n  const videoStyle = {\r\n    ...baseStyle,\r\n    objectFit: 'cover',\r\n    opacity: isVideoLoaded && !isVideoError ? 1 : 0,\r\n  };\r\n\r\n  // 图片专用样式\r\n  const imageStyle = {\r\n    ...baseStyle,\r\n    backgroundImage: `url(${currentWallpaper})`,\r\n    backgroundSize: 'cover',\r\n    backgroundPosition: 'center',\r\n    opacity: (selectedMenu !== 'home' || isVideoError) && !isImageLoading && !imageLoadError ? 1 : 0,\r\n  };\r\n\r\n  // 视频加载成功回调\r\n  const handleVideoCanPlay = () => {\r\n    setIsVideoLoaded(true);\r\n    setIsVideoError(false);\r\n  };\r\n\r\n  // 视频加载失败回调\r\n  const handleVideoError = () => {\r\n    console.error('视频加载失败，切换为壁纸');\r\n    setIsVideoError(true);\r\n    setIsVideoLoaded(false);\r\n  };\r\n\r\n  // 如果是home菜单，优先显示视频，视频加载失败或没加载时显示壁纸\r\n  if (selectedMenu === 'home') {\r\n    return (\r\n      <>\r\n        <video\r\n          key=\"home-video\"\r\n          autoPlay\r\n          loop\r\n          muted\r\n          playsInline\r\n          preload=\"auto\"\r\n          style={videoStyle}\r\n          src={homeVideoSrc}\r\n          aria-hidden=\"true\"\r\n          onCanPlay={handleVideoCanPlay}\r\n          onError={handleVideoError}\r\n        />\r\n        {/* 视频加载失败或尚未加载时，显示壁纸作为后备 */}\r\n        {(isVideoError || !isVideoLoaded) && !isImageLoading && !imageLoadError && (\r\n          <div\r\n            className=\"app-wallpaper\"\r\n            style={imageStyle}\r\n            aria-hidden=\"true\"\r\n          />\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n\r\n  // 其他菜单只显示图片背景\r\n  return (\r\n    <>\r\n      {(!isImageLoading && !imageLoadError) && (\r\n        <div\r\n          className=\"app-wallpaper\"\r\n          style={imageStyle}\r\n          aria-hidden=\"true\"\r\n        />\r\n      )}\r\n      {imageLoadError && (\r\n        <div\r\n          className=\"app-wallpaper\"\r\n          style={{\r\n            ...baseStyle,\r\n            backgroundColor: '#222',\r\n            opacity: 1,\r\n          }}\r\n          aria-hidden=\"true\"\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WallpaperManager;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}