{"ast":null,"code":"var _jsxFileName = \"D:\\\\XM\\\\AI-Sphere-Butler\\\\core\\\\client\\\\src\\\\contexts\\\\RecorderProvider.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useRef, useEffect, useContext } from 'react';\nimport { useButler } from '../components/ButlersContext';\nimport { useRecorder } from '../hooks/useRecorder';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RecorderContext = /*#__PURE__*/createContext(null);\n\n// 新增：获取动态服务地址函数，统一读取localStorage中serverUrls配置\nfunction getDynamicUrls() {\n  try {\n    const serverUrlsStr = localStorage.getItem('serverUrls');\n    if (serverUrlsStr) {\n      const serverUrls = JSON.parse(serverUrlsStr);\n      return {\n        switchAvatarUrl: serverUrls.apiBaseUrl ? serverUrls.apiBaseUrl.replace(/\\/+$/, '') + '/api/switch_avatar' : 'http://192.168.168.77:6010/api/switch_avatar',\n        interruptSpeakingUrl: serverUrls.interruptUrl || 'http://192.168.168.77:6010/api/interrupt_speaking',\n        qwenerUrl: serverUrls.qwenerUrl || 'http://192.168.168.77:6010/qwener',\n        wsTranscribeBaseUrl: serverUrls.uploadFileUrl ? serverUrls.uploadFileUrl.replace(/\\/+$/, '') : 'http://192.168.168.77:6007'\n      };\n    }\n  } catch (e) {\n    console.warn('读取serverUrls配置失败，使用默认地址', e);\n  }\n  return {\n    switchAvatarUrl: 'http://192.168.168.77:6010/api/switch_avatar',\n    interruptSpeakingUrl: 'http://192.168.168.77:6010/api/interrupt_speaking',\n    qwenerUrl: 'http://192.168.168.77:6010/qwener',\n    wsTranscribeBaseUrl: 'http://192.168.168.77:6007'\n  };\n}\nexport function RecorderProvider({\n  children\n}) {\n  _s();\n  const {\n    activeButlerId,\n    setActiveButlerId,\n    butlers\n  } = useButler(); // 新增butlers获取所有管家\n\n  const [isRecording, setIsRecording] = useState(false);\n  const [transcription, setTranscription] = useState('');\n  const [lang, setLang] = useState(() => {\n    try {\n      return localStorage.getItem('audioTranscriberLang') || 'auto';\n    } catch {\n      return 'auto';\n    }\n  });\n  const [speakerVerification, setSpeakerVerification] = useState(() => {\n    try {\n      return localStorage.getItem('audioTranscriberSpeakerVerification') === 'true';\n    } catch {\n      return false;\n    }\n  });\n  const [wakeWordEnabled, setWakeWordEnabled] = useState(() => {\n    try {\n      const stored = localStorage.getItem('wakeWordEnabled');\n      return stored === null ? true : stored === 'true';\n    } catch {\n      return true;\n    }\n  });\n  const [wakeWords, setWakeWords] = useState(() => {\n    try {\n      const stored = localStorage.getItem('wakeWords');\n      return stored ? stored : 'xiao li';\n    } catch {\n      return 'xiao li';\n    }\n  });\n\n  // ASR面板可见性状态\n  const [asrPanelVisible, setAsrPanelVisible] = useState(() => {\n    try {\n      const stored = localStorage.getItem('asrPanelVisible');\n      return stored === null ? false : stored === 'true';\n    } catch {\n      return false;\n    }\n  });\n  const recorder = useRecorder();\n  const wsRef = useRef(null);\n  const intervalRef = useRef(null);\n  const unmountedRef = useRef(false);\n\n  // 后台数字人说话打断关键词列表\n  const interruptKeywords = ['先说', '你停一下', '等等', '暂停', '打断'];\n\n  // 统一切换管家函数（支持名称/ID，因名称与ID一致）\n  const activateButler = async target => {\n    if (!target) return;\n    if (target === activeButlerId) {\n      console.log('[activateButler] 已激活该管家，无需切换:', target);\n      return;\n    }\n    const {\n      switchAvatarUrl\n    } = getDynamicUrls();\n    try {\n      // 因名称与ID一致，直接使用target作为ID\n      console.log('[activateButler] 尝试切换到管家（名称/ID）:', target);\n      const resp = await fetch(switchAvatarUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          butler_id: target\n        }) // 传递名称（即ID）\n      });\n      if (!resp.ok) throw new Error('后端错误，状态码: ' + resp.status);\n      const data = await resp.json();\n      if (data.error) throw new Error(data.error);\n      setActiveButlerId(target);\n      console.log('[activateButler] 成功切换管家:', target);\n    } catch (e) {\n      alert('切换管家失败: ' + e.message);\n      console.error('[activateButler] 切换失败:', e);\n    }\n  };\n\n  // 通知后台停止数字人当前说话\n  const interruptSpeaking = async () => {\n    const {\n      interruptSpeakingUrl\n    } = getDynamicUrls();\n    try {\n      const resp = await fetch(interruptSpeakingUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!resp.ok) {\n        console.warn('[interruptSpeaking] 后端停止接口调用失败，状态码:', resp.status);\n      } else {\n        console.log('[interruptSpeaking] 成功通知后台打断数字人说话');\n      }\n    } catch (e) {\n      console.error('[interruptSpeaking] 调用停止接口异常:', e);\n    }\n  };\n\n  // 发送文本消息到服务器\n  const sendTextMessage = async text => {\n    if (!text.trim()) return;\n    const {\n      qwenerUrl\n    } = getDynamicUrls();\n    try {\n      const response = await fetch(qwenerUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text\n        })\n      });\n      if (!response.ok) throw new Error('网络响应失败，状态码: ' + response.status);\n      const data = await response.json();\n      console.log('文本发送成功，服务器返回：', data);\n    } catch (error) {\n      console.error('文本发送失败：', error);\n    }\n  };\n\n  // 停止录音\n  const stopRecording = () => {\n    if (!isRecording) {\n      console.log('[stopRecording] 当前非录音状态，忽略重复调用');\n      return;\n    }\n    if (wsRef.current) {\n      wsRef.current.onclose = null;\n      wsRef.current.close();\n      wsRef.current = null;\n    }\n    recorder.stop();\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n    setIsRecording(false);\n  };\n\n  // 开始录音\n  const startRecording = () => {\n    if (isRecording) {\n      console.log('[startRecording] 已经在录音中，忽略重复调用');\n      return;\n    }\n    setIsRecording(true);\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(() => {\n      if (unmountedRef.current) {\n        stopRecording();\n        return;\n      }\n      let params = [];\n      if (lang) params.push(`lang=${encodeURIComponent(lang)}`);\n      if (speakerVerification) params.push('sv=1');\n      if (wakeWordEnabled) params.push('wakeword=1');\n      if (wakeWords) {\n        const cleanedWakeWords = wakeWords.split(',').map(w => w.trim()).filter(w => w.length > 0).join(',');\n        if (cleanedWakeWords.length > 0) {\n          params.push(`wakewords=${encodeURIComponent(cleanedWakeWords)}`);\n        }\n      }\n      const queryStr = params.length > 0 ? `?${params.join('&')}` : '';\n      const {\n        wsTranscribeBaseUrl\n      } = getDynamicUrls();\n      // 注意这里wsTranscribeBaseUrl可能是http://ip:port，无需强制ws:// prefix，保证协议一致\n      const wsUrl = wsTranscribeBaseUrl.replace(/^http/, 'ws') + `/ws/transcribe${queryStr}`;\n      console.log('[startRecording] 创建 WebSocket 连接', wsUrl);\n      const ws = new WebSocket(wsUrl);\n      ws.binaryType = 'arraybuffer';\n      ws.onmessage = evt => {\n        try {\n          const resJson = JSON.parse(evt.data);\n          if (resJson.code === 0) {\n            const recognizedText = resJson.data || '无识别结果';\n            console.log('【原始识别文本】', recognizedText);\n            const cleanedText = recognizedText.replace(/[^\\u4e00-\\u9fa5a-zA-Z0-9]/g, '').trim();\n            console.log('【清洗后文本】', cleanedText);\n            setTranscription(prev => prev ? prev + '\\n' + recognizedText : recognizedText);\n            if (cleanedText) {\n              // 检测打断关键词\n              if (interruptKeywords.some(kw => cleanedText.includes(kw))) {\n                console.log('【检测到打断关键词】', cleanedText);\n                interruptSpeaking();\n                stopRecording();\n              }\n\n              // 语音指令切换管家（支持名称匹配，因名称与ID一致）\n              const switchCmdMatch = cleanedText.match(/切换(到)?(.+)/); // 匹配\"切换X\"或\"切换到X\"\n              if (switchCmdMatch && switchCmdMatch[2]) {\n                const targetName = switchCmdMatch[2].trim(); // 提取要切换的名称\n                console.log('【识别到切换指令】目标名称:', targetName);\n\n                // 查找是否存在该名称的管家（因名称与ID一致）\n                const targetButler = butlers.find(butler => butler.name.includes(targetName) || targetName.includes(butler.name));\n                if (targetButler) {\n                  activateButler(targetButler.name); // 直接使用名称（即ID）切换\n                } else {\n                  console.log('【未找到对应管家】目标名称:', targetName);\n                }\n              }\n              sendTextMessage(recognizedText);\n            }\n          }\n        } catch (e) {\n          console.error('【解析失败】', e);\n        }\n      };\n      ws.onopen = () => {\n        console.log('[WebSocket] 连接已打开');\n        recorder.start().then(() => {\n          console.log('[Recorder] 录音开始');\n          intervalRef.current = setInterval(() => {\n            if (ws.readyState === 1) {\n              const audioBlob = recorder.getAudioBlob();\n              if (audioBlob.size > 0) {\n                console.log('[WebSocket] 发送音频数据，大小：', audioBlob.size);\n                ws.send(audioBlob);\n                recorder.clearBuffer();\n              }\n            }\n          }, 500);\n        }).catch(e => {\n          alert('启动录音失败: ' + e.message);\n          console.error('[Recorder] 启动失败', e);\n          ws.close();\n          setIsRecording(false);\n        });\n      };\n      ws.onclose = event => {\n        console.log('[WebSocket] 连接关闭，代码:', event.code, '原因:', event.reason);\n        setIsRecording(false);\n        if (intervalRef.current) {\n          clearInterval(intervalRef.current);\n          intervalRef.current = null;\n        }\n        wsRef.current = null;\n      };\n      ws.onerror = e => {\n        console.error('[WebSocket] 错误', e);\n        alert('WebSocket 连接出错，请检查服务器状态和网络连接。');\n      };\n      wsRef.current = ws;\n    }).catch(error => {\n      alert('请求麦克风权限失败: ' + error.message);\n      console.error('[startRecording] 获取麦克风权限失败', error);\n      setIsRecording(false);\n    });\n  };\n\n  // 组件卸载清理\n  useEffect(() => {\n    unmountedRef.current = false;\n    return () => {\n      unmountedRef.current = true;\n      stopRecording();\n    };\n  }, []);\n\n  // 持久化设置\n  useEffect(() => {\n    try {\n      localStorage.setItem('audioTranscriberLang', lang);\n    } catch {}\n  }, [lang]);\n  useEffect(() => {\n    try {\n      localStorage.setItem('audioTranscriberSpeakerVerification', speakerVerification.toString());\n    } catch {}\n  }, [speakerVerification]);\n  useEffect(() => {\n    try {\n      localStorage.setItem('wakeWordEnabled', wakeWordEnabled.toString());\n    } catch {}\n  }, [wakeWordEnabled]);\n  useEffect(() => {\n    try {\n      localStorage.setItem('wakeWords', wakeWords);\n    } catch {}\n  }, [wakeWords]);\n  useEffect(() => {\n    try {\n      localStorage.setItem('asrPanelVisible', asrPanelVisible.toString());\n    } catch {}\n  }, [asrPanelVisible]);\n  return /*#__PURE__*/_jsxDEV(RecorderContext.Provider, {\n    value: {\n      isRecording,\n      transcription,\n      lang,\n      speakerVerification,\n      wakeWordEnabled,\n      wakeWords,\n      setLang,\n      setSpeakerVerification,\n      setWakeWordEnabled,\n      setWakeWords,\n      startRecording,\n      stopRecording,\n      setTranscription,\n      activateButler,\n      interruptSpeaking,\n      asrPanelVisible,\n      setAsrPanelVisible\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 332,\n    columnNumber: 5\n  }, this);\n}\n_s(RecorderProvider, \"vn/jmqGpuM16307NZTx0qa+MiZE=\", false, function () {\n  return [useButler, useRecorder];\n});\n_c = RecorderProvider;\nexport function useRecorderContext() {\n  _s2();\n  const context = useContext(RecorderContext);\n  if (!context) {\n    throw new Error('useRecorderContext 必须在 RecorderProvider 内使用');\n  }\n  return context;\n}\n_s2(useRecorderContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"RecorderProvider\");","map":{"version":3,"names":["React","createContext","useState","useRef","useEffect","useContext","useButler","useRecorder","jsxDEV","_jsxDEV","RecorderContext","getDynamicUrls","serverUrlsStr","localStorage","getItem","serverUrls","JSON","parse","switchAvatarUrl","apiBaseUrl","replace","interruptSpeakingUrl","interruptUrl","qwenerUrl","wsTranscribeBaseUrl","uploadFileUrl","e","console","warn","RecorderProvider","children","_s","activeButlerId","setActiveButlerId","butlers","isRecording","setIsRecording","transcription","setTranscription","lang","setLang","speakerVerification","setSpeakerVerification","wakeWordEnabled","setWakeWordEnabled","stored","wakeWords","setWakeWords","asrPanelVisible","setAsrPanelVisible","recorder","wsRef","intervalRef","unmountedRef","interruptKeywords","activateButler","target","log","resp","fetch","method","headers","body","stringify","butler_id","ok","Error","status","data","json","error","alert","message","interruptSpeaking","sendTextMessage","text","trim","response","stopRecording","current","onclose","close","stop","clearInterval","startRecording","navigator","mediaDevices","getUserMedia","audio","then","params","push","encodeURIComponent","cleanedWakeWords","split","map","w","filter","length","join","queryStr","wsUrl","ws","WebSocket","binaryType","onmessage","evt","resJson","code","recognizedText","cleanedText","prev","some","kw","includes","switchCmdMatch","match","targetName","targetButler","find","butler","name","onopen","start","setInterval","readyState","audioBlob","getAudioBlob","size","send","clearBuffer","catch","event","reason","onerror","setItem","toString","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useRecorderContext","_s2","context","$RefreshReg$"],"sources":["D:/XM/AI-Sphere-Butler/core/client/src/contexts/RecorderProvider.jsx"],"sourcesContent":["import React, { createContext, useState, useRef, useEffect, useContext } from 'react';\r\nimport { useButler } from '../components/ButlersContext';\r\nimport { useRecorder } from '../hooks/useRecorder';\r\n\r\nconst RecorderContext = createContext(null);\r\n\r\n// 新增：获取动态服务地址函数，统一读取localStorage中serverUrls配置\r\nfunction getDynamicUrls() {\r\n  try {\r\n    const serverUrlsStr = localStorage.getItem('serverUrls');\r\n    if (serverUrlsStr) {\r\n      const serverUrls = JSON.parse(serverUrlsStr);\r\n      return {\r\n        switchAvatarUrl: serverUrls.apiBaseUrl ? serverUrls.apiBaseUrl.replace(/\\/+$/, '') + '/api/switch_avatar' : 'http://192.168.168.77:6010/api/switch_avatar',\r\n        interruptSpeakingUrl: serverUrls.interruptUrl || 'http://192.168.168.77:6010/api/interrupt_speaking',\r\n        qwenerUrl: serverUrls.qwenerUrl || 'http://192.168.168.77:6010/qwener',\r\n        wsTranscribeBaseUrl: serverUrls.uploadFileUrl ? serverUrls.uploadFileUrl.replace(/\\/+$/, '') : 'http://192.168.168.77:6007',\r\n      };\r\n    }\r\n  } catch (e) {\r\n    console.warn('读取serverUrls配置失败，使用默认地址', e);\r\n  }\r\n  return {\r\n    switchAvatarUrl: 'http://192.168.168.77:6010/api/switch_avatar',\r\n    interruptSpeakingUrl: 'http://192.168.168.77:6010/api/interrupt_speaking',\r\n    qwenerUrl: 'http://192.168.168.77:6010/qwener',\r\n    wsTranscribeBaseUrl: 'http://192.168.168.77:6007',\r\n  };\r\n}\r\n\r\nexport function RecorderProvider({ children }) {\r\n  const { activeButlerId, setActiveButlerId, butlers } = useButler(); // 新增butlers获取所有管家\r\n\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [transcription, setTranscription] = useState('');\r\n  const [lang, setLang] = useState(() => {\r\n    try {\r\n      return localStorage.getItem('audioTranscriberLang') || 'auto';\r\n    } catch {\r\n      return 'auto';\r\n    }\r\n  });\r\n  const [speakerVerification, setSpeakerVerification] = useState(() => {\r\n    try {\r\n      return localStorage.getItem('audioTranscriberSpeakerVerification') === 'true';\r\n    } catch {\r\n      return false;\r\n    }\r\n  });\r\n\r\n  const [wakeWordEnabled, setWakeWordEnabled] = useState(() => {\r\n    try {\r\n      const stored = localStorage.getItem('wakeWordEnabled');\r\n      return stored === null ? true : stored === 'true';\r\n    } catch {\r\n      return true;\r\n    }\r\n  });\r\n  const [wakeWords, setWakeWords] = useState(() => {\r\n    try {\r\n      const stored = localStorage.getItem('wakeWords');\r\n      return stored ? stored : 'xiao li';\r\n    } catch {\r\n      return 'xiao li';\r\n    }\r\n  });\r\n\r\n  // ASR面板可见性状态\r\n  const [asrPanelVisible, setAsrPanelVisible] = useState(() => {\r\n    try {\r\n      const stored = localStorage.getItem('asrPanelVisible');\r\n      return stored === null ? false : stored === 'true';\r\n    } catch {\r\n      return false;\r\n    }\r\n  });\r\n\r\n  const recorder = useRecorder();\r\n\r\n  const wsRef = useRef(null);\r\n  const intervalRef = useRef(null);\r\n  const unmountedRef = useRef(false);\r\n\r\n  // 后台数字人说话打断关键词列表\r\n  const interruptKeywords = ['先说', '你停一下', '等等', '暂停', '打断'];\r\n\r\n  // 统一切换管家函数（支持名称/ID，因名称与ID一致）\r\n  const activateButler = async (target) => {\r\n    if (!target) return;\r\n    if (target === activeButlerId) {\r\n      console.log('[activateButler] 已激活该管家，无需切换:', target);\r\n      return;\r\n    }\r\n\r\n    const { switchAvatarUrl } = getDynamicUrls();\r\n\r\n    try {\r\n      // 因名称与ID一致，直接使用target作为ID\r\n      console.log('[activateButler] 尝试切换到管家（名称/ID）:', target);\r\n      const resp = await fetch(switchAvatarUrl, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ butler_id: target }), // 传递名称（即ID）\r\n      });\r\n\r\n      if (!resp.ok) throw new Error('后端错误，状态码: ' + resp.status);\r\n      const data = await resp.json();\r\n      if (data.error) throw new Error(data.error);\r\n      \r\n      setActiveButlerId(target);\r\n      console.log('[activateButler] 成功切换管家:', target);\r\n    } catch (e) {\r\n      alert('切换管家失败: ' + e.message);\r\n      console.error('[activateButler] 切换失败:', e);\r\n    }\r\n  };\r\n\r\n  // 通知后台停止数字人当前说话\r\n  const interruptSpeaking = async () => {\r\n    const { interruptSpeakingUrl } = getDynamicUrls();\r\n    try {\r\n      const resp = await fetch(interruptSpeakingUrl, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n      });\r\n      if (!resp.ok) {\r\n        console.warn('[interruptSpeaking] 后端停止接口调用失败，状态码:', resp.status);\r\n      } else {\r\n        console.log('[interruptSpeaking] 成功通知后台打断数字人说话');\r\n      }\r\n    } catch (e) {\r\n      console.error('[interruptSpeaking] 调用停止接口异常:', e);\r\n    }\r\n  };\r\n\r\n  // 发送文本消息到服务器\r\n  const sendTextMessage = async (text) => {\r\n    if (!text.trim()) return;\r\n    const { qwenerUrl } = getDynamicUrls();\r\n    try {\r\n      const response = await fetch(qwenerUrl, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ text }),\r\n      });\r\n      if (!response.ok) throw new Error('网络响应失败，状态码: ' + response.status);\r\n      const data = await response.json();\r\n      console.log('文本发送成功，服务器返回：', data);\r\n    } catch (error) {\r\n      console.error('文本发送失败：', error);\r\n    }\r\n  };\r\n\r\n  // 停止录音\r\n  const stopRecording = () => {\r\n    if (!isRecording) {\r\n      console.log('[stopRecording] 当前非录音状态，忽略重复调用');\r\n      return;\r\n    }\r\n    if (wsRef.current) {\r\n      wsRef.current.onclose = null;\r\n      wsRef.current.close();\r\n      wsRef.current = null;\r\n    }\r\n    recorder.stop();\r\n    if (intervalRef.current) {\r\n      clearInterval(intervalRef.current);\r\n      intervalRef.current = null;\r\n    }\r\n    setIsRecording(false);\r\n  };\r\n\r\n  // 开始录音\r\n  const startRecording = () => {\r\n    if (isRecording) {\r\n      console.log('[startRecording] 已经在录音中，忽略重复调用');\r\n      return;\r\n    }\r\n\r\n    setIsRecording(true);\r\n\r\n    navigator.mediaDevices.getUserMedia({ audio: true })\r\n      .then(() => {\r\n        if (unmountedRef.current) {\r\n          stopRecording();\r\n          return;\r\n        }\r\n        let params = [];\r\n        if (lang) params.push(`lang=${encodeURIComponent(lang)}`);\r\n        if (speakerVerification) params.push('sv=1');\r\n        if (wakeWordEnabled) params.push('wakeword=1');\r\n        if (wakeWords) {\r\n          const cleanedWakeWords = wakeWords.split(',').map(w => w.trim()).filter(w => w.length > 0).join(',');\r\n          if (cleanedWakeWords.length > 0) {\r\n            params.push(`wakewords=${encodeURIComponent(cleanedWakeWords)}`);\r\n          }\r\n        }\r\n        const queryStr = params.length > 0 ? `?${params.join('&')}` : '';\r\n\r\n        const { wsTranscribeBaseUrl } = getDynamicUrls();\r\n        // 注意这里wsTranscribeBaseUrl可能是http://ip:port，无需强制ws:// prefix，保证协议一致\r\n        const wsUrl = wsTranscribeBaseUrl.replace(/^http/, 'ws') + `/ws/transcribe${queryStr}`;\r\n        console.log('[startRecording] 创建 WebSocket 连接', wsUrl);\r\n        const ws = new WebSocket(wsUrl);\r\n        ws.binaryType = 'arraybuffer';\r\n\r\n        ws.onmessage = (evt) => {\r\n          try {\r\n            const resJson = JSON.parse(evt.data);\r\n            if (resJson.code === 0) {\r\n              const recognizedText = resJson.data || '无识别结果';\r\n              console.log('【原始识别文本】', recognizedText);\r\n\r\n              const cleanedText = recognizedText.replace(/[^\\u4e00-\\u9fa5a-zA-Z0-9]/g, '').trim();\r\n              console.log('【清洗后文本】', cleanedText);\r\n\r\n              setTranscription(prev => (prev ? prev + '\\n' + recognizedText : recognizedText));\r\n\r\n              if (cleanedText) {\r\n                // 检测打断关键词\r\n                if (interruptKeywords.some(kw => cleanedText.includes(kw))) {\r\n                  console.log('【检测到打断关键词】', cleanedText);\r\n                  interruptSpeaking();\r\n                  stopRecording();\r\n                }\r\n\r\n                // 语音指令切换管家（支持名称匹配，因名称与ID一致）\r\n                const switchCmdMatch = cleanedText.match(/切换(到)?(.+)/); // 匹配\"切换X\"或\"切换到X\"\r\n                if (switchCmdMatch && switchCmdMatch[2]) {\r\n                  const targetName = switchCmdMatch[2].trim(); // 提取要切换的名称\r\n                  console.log('【识别到切换指令】目标名称:', targetName);\r\n                  \r\n                  // 查找是否存在该名称的管家（因名称与ID一致）\r\n                  const targetButler = butlers.find(butler => \r\n                    butler.name.includes(targetName) || targetName.includes(butler.name)\r\n                  );\r\n                  \r\n                  if (targetButler) {\r\n                    activateButler(targetButler.name); // 直接使用名称（即ID）切换\r\n                  } else {\r\n                    console.log('【未找到对应管家】目标名称:', targetName);\r\n                  }\r\n                }\r\n\r\n                sendTextMessage(recognizedText);\r\n              }\r\n            }\r\n          } catch (e) {\r\n            console.error('【解析失败】', e);\r\n          }\r\n        };\r\n\r\n        ws.onopen = () => {\r\n          console.log('[WebSocket] 连接已打开');\r\n          recorder.start()\r\n            .then(() => {\r\n              console.log('[Recorder] 录音开始');\r\n              intervalRef.current = setInterval(() => {\r\n                if (ws.readyState === 1) {\r\n                  const audioBlob = recorder.getAudioBlob();\r\n                  if (audioBlob.size > 0) {\r\n                    console.log('[WebSocket] 发送音频数据，大小：', audioBlob.size);\r\n                    ws.send(audioBlob);\r\n                    recorder.clearBuffer();\r\n                  }\r\n                }\r\n              }, 500);\r\n            })\r\n            .catch(e => {\r\n              alert('启动录音失败: ' + e.message);\r\n              console.error('[Recorder] 启动失败', e);\r\n              ws.close();\r\n              setIsRecording(false);\r\n            });\r\n        };\r\n\r\n        ws.onclose = (event) => {\r\n          console.log('[WebSocket] 连接关闭，代码:', event.code, '原因:', event.reason);\r\n          setIsRecording(false);\r\n          if (intervalRef.current) {\r\n            clearInterval(intervalRef.current);\r\n            intervalRef.current = null;\r\n          }\r\n          wsRef.current = null;\r\n        };\r\n\r\n        ws.onerror = (e) => {\r\n          console.error('[WebSocket] 错误', e);\r\n          alert('WebSocket 连接出错，请检查服务器状态和网络连接。');\r\n        };\r\n\r\n        wsRef.current = ws;\r\n      })\r\n      .catch(error => {\r\n        alert('请求麦克风权限失败: ' + error.message);\r\n        console.error('[startRecording] 获取麦克风权限失败', error);\r\n        setIsRecording(false);\r\n      });\r\n  };\r\n\r\n  // 组件卸载清理\r\n  useEffect(() => {\r\n    unmountedRef.current = false;\r\n    return () => {\r\n      unmountedRef.current = true;\r\n      stopRecording();\r\n    };\r\n  }, []);\r\n\r\n  // 持久化设置\r\n  useEffect(() => {\r\n    try { localStorage.setItem('audioTranscriberLang', lang); } catch {}\r\n  }, [lang]);\r\n\r\n  useEffect(() => {\r\n    try { localStorage.setItem('audioTranscriberSpeakerVerification', speakerVerification.toString()); } catch {}\r\n  }, [speakerVerification]);\r\n\r\n  useEffect(() => {\r\n    try { localStorage.setItem('wakeWordEnabled', wakeWordEnabled.toString()); } catch {}\r\n  }, [wakeWordEnabled]);\r\n\r\n  useEffect(() => {\r\n    try { localStorage.setItem('wakeWords', wakeWords); } catch {}\r\n  }, [wakeWords]);\r\n\r\n  useEffect(() => {\r\n    try { localStorage.setItem('asrPanelVisible', asrPanelVisible.toString()); } catch {}\r\n  }, [asrPanelVisible]);\r\n\r\n  return (\r\n    <RecorderContext.Provider value={{\r\n      isRecording,\r\n      transcription,\r\n      lang,\r\n      speakerVerification,\r\n      wakeWordEnabled,\r\n      wakeWords,\r\n      setLang,\r\n      setSpeakerVerification,\r\n      setWakeWordEnabled,\r\n      setWakeWords,\r\n      startRecording,\r\n      stopRecording,\r\n      setTranscription,\r\n      activateButler,\r\n      interruptSpeaking,\r\n      asrPanelVisible,\r\n      setAsrPanelVisible\r\n    }}>\r\n      {children}\r\n    </RecorderContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useRecorderContext() {\r\n  const context = useContext(RecorderContext);\r\n  if (!context) {\r\n    throw new Error('useRecorderContext 必须在 RecorderProvider 内使用');\r\n  }\r\n  return context;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}