{"ast":null,"code":"import React,{createContext,useState,useRef,useEffect,useContext}from'react';import{useRecorder}from'../hooks/useRecorder';// 你需要引入管家上下文Hook，假设路径是 '../ButlersContext'，请根据实际路径调整\nimport{useButler}from'../components/ButlersContext';import{jsx as _jsx}from\"react/jsx-runtime\";const RecorderContext=/*#__PURE__*/createContext(null);export function RecorderProvider(_ref){let{children}=_ref;const[isRecording,setIsRecording]=useState(false);const[transcription,setTranscription]=useState('');const[lang,setLang]=useState(()=>{try{return localStorage.getItem('audioTranscriberLang')||'auto';}catch(_unused){return'auto';}});const[speakerVerification,setSpeakerVerification]=useState(()=>{try{return localStorage.getItem('audioTranscriberSpeakerVerification')==='true';}catch(_unused2){return false;}});// 新增：语音唤醒开关及自定义唤醒词状态，支持localStorage持久化\nconst[wakeWordEnabled,setWakeWordEnabled]=useState(()=>{try{const stored=localStorage.getItem('wakeWordEnabled');return stored===null?true:stored==='true';}catch(_unused3){return true;}});const[wakeWords,setWakeWords]=useState(()=>{try{const stored=localStorage.getItem('wakeWords');return stored?stored:'xiao li';}catch(_unused4){return'xiao li';}});// 新增：使用管家Context，用于切换管家ID\nconst{setActiveButlerId}=useButler();const recorder=useRecorder();const wsRef=useRef(null);const intervalRef=useRef(null);const unmountedRef=useRef(false);const sendTextMessage=async text=>{if(!text.trim())return;try{const response=await fetch('https://192.168.1.70:6010/qwener',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({text})});if(!response.ok)throw new Error('网络响应失败，状态码: '+response.status);const data=await response.json();console.log('文本发送成功，服务器返回：',data);}catch(error){console.error('文本发送失败：',error);}};const stopRecording=()=>{if(!isRecording){console.log('[stopRecording] 当前非录音状态，忽略重复调用');return;}console.trace('[stopRecording] 停止录音流程启动，调用栈');if(wsRef.current){console.log('[stopRecording] 关闭 WebSocket 连接');wsRef.current.onclose=null;// 避免触发 onclose 回调死循环\nwsRef.current.close();wsRef.current=null;}recorder.stop();if(intervalRef.current){clearInterval(intervalRef.current);intervalRef.current=null;}setIsRecording(false);};const startRecording=()=>{if(isRecording){console.log('[startRecording] 已经在录音中，忽略重复调用');return;}setIsRecording(true);// 先置为true，防止重复调用\nconsole.log('[startRecording] 请求麦克风权限...');navigator.mediaDevices.getUserMedia({audio:true}).then(()=>{if(unmountedRef.current){stopRecording();return;}let params=[];if(lang)params.push(\"lang=\".concat(encodeURIComponent(lang)));if(speakerVerification)params.push('sv=1');if(wakeWordEnabled)params.push('wakeword=1');if(wakeWords){// 前端约定唤醒词传给后端时用逗号分隔，去除多余空格\nconst cleanedWakeWords=wakeWords.split(',').map(w=>w.trim()).filter(w=>w.length>0).join(',');if(cleanedWakeWords.length>0){params.push(\"wakewords=\".concat(encodeURIComponent(cleanedWakeWords)));}}const queryStr=params.length>0?\"?\".concat(params.join('&')):'';const wsUrl=\"ws://192.168.168.77:6007/ws/transcribe\".concat(queryStr);console.log('[startRecording] 创建 WebSocket 连接',wsUrl);const ws=new WebSocket(wsUrl);ws.binaryType='arraybuffer';ws.onopen=()=>{console.log('[WebSocket] 连接已打开');recorder.start().then(()=>{console.log('[Recorder] 录音开始');intervalRef.current=setInterval(()=>{if(ws.readyState===1){const audioBlob=recorder.getAudioBlob();if(audioBlob.size>0){console.log('[WebSocket] 发送音频数据，大小：',audioBlob.size);ws.send(audioBlob);recorder.clearBuffer();}}},500);}).catch(e=>{alert('启动录音失败: '+e.message);console.error('[Recorder] 启动失败',e);ws.close();setIsRecording(false);});};ws.onmessage=evt=>{try{const resJson=JSON.parse(evt.data);if(resJson.code===0){const recognizedText=resJson.data||'无识别结果';setTranscription(prev=>prev?prev+'\\n'+recognizedText:recognizedText);if(recognizedText&&recognizedText.trim()&&recognizedText!=='无识别结果'){// 新增：基于识别文本切换管家逻辑\n// 你可以根据实际语音关键字来调整这里的条件和id\nif(recognizedText.includes('切换小粒')){setActiveButlerId('xl');}else if(recognizedText.includes('切换禅师')){setActiveButlerId('cs');}else if(recognizedText.includes('小贾')){setActiveButlerId('butler3');}else if(recognizedText.includes('星期天')){setActiveButlerId('butler4');}sendTextMessage(recognizedText);}}else{console.warn('[WebSocket] 返回非0 code:',resJson);}}catch(e){console.error('[WebSocket] 解析转写消息失败',e);setTranscription(prev=>prev?prev+'\\n'+evt.data:evt.data);}};ws.onclose=event=>{console.log('[WebSocket] 连接关闭，代码:',event.code,'原因:',event.reason);setIsRecording(false);if(intervalRef.current){clearInterval(intervalRef.current);intervalRef.current=null;}wsRef.current=null;};ws.onerror=e=>{console.error('[WebSocket] 错误',e);alert('WebSocket 连接出错，请检查服务器状态和网络连接。');};wsRef.current=ws;}).catch(error=>{alert('请求麦克风权限失败: '+error.message);console.error('[startRecording] 获取麦克风权限失败',error);setIsRecording(false);});};// 持久化语言、声纹识别开关、语音唤醒开关和唤醒词\nuseEffect(()=>{try{localStorage.setItem('audioTranscriberLang',lang);}catch(_unused5){}},[lang]);useEffect(()=>{try{localStorage.setItem('audioTranscriberSpeakerVerification',speakerVerification.toString());}catch(_unused6){}},[speakerVerification]);useEffect(()=>{try{localStorage.setItem('wakeWordEnabled',wakeWordEnabled.toString());}catch(_unused7){}},[wakeWordEnabled]);useEffect(()=>{try{localStorage.setItem('wakeWords',wakeWords);}catch(_unused8){}},[wakeWords]);useEffect(()=>{unmountedRef.current=false;return()=>{unmountedRef.current=true;stopRecording();};},[]);return/*#__PURE__*/_jsx(RecorderContext.Provider,{value:{isRecording,transcription,lang,speakerVerification,wakeWordEnabled,wakeWords,setLang,setSpeakerVerification,setWakeWordEnabled,setWakeWords,startRecording,stopRecording,setTranscription},children:children});}export function useRecorderContext(){const context=useContext(RecorderContext);if(!context){throw new Error('useRecorderContext 必须在 RecorderProvider 内使用');}return context;}","map":{"version":3,"names":["React","createContext","useState","useRef","useEffect","useContext","useRecorder","useButler","jsx","_jsx","RecorderContext","RecorderProvider","_ref","children","isRecording","setIsRecording","transcription","setTranscription","lang","setLang","localStorage","getItem","_unused","speakerVerification","setSpeakerVerification","_unused2","wakeWordEnabled","setWakeWordEnabled","stored","_unused3","wakeWords","setWakeWords","_unused4","setActiveButlerId","recorder","wsRef","intervalRef","unmountedRef","sendTextMessage","text","trim","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","console","log","error","stopRecording","trace","current","onclose","close","stop","clearInterval","startRecording","navigator","mediaDevices","getUserMedia","audio","then","params","push","concat","encodeURIComponent","cleanedWakeWords","split","map","w","filter","length","join","queryStr","wsUrl","ws","WebSocket","binaryType","onopen","start","setInterval","readyState","audioBlob","getAudioBlob","size","send","clearBuffer","catch","e","alert","message","onmessage","evt","resJson","parse","code","recognizedText","prev","includes","warn","event","reason","onerror","setItem","_unused5","toString","_unused6","_unused7","_unused8","Provider","value","useRecorderContext","context"],"sources":["D:/XM/AI-Sphere-Butler/core/client/src/contexts/RecorderProvider.jsx"],"sourcesContent":["import React, { createContext, useState, useRef, useEffect, useContext } from 'react';\r\nimport { useRecorder } from '../hooks/useRecorder';\r\n\r\n// 你需要引入管家上下文Hook，假设路径是 '../ButlersContext'，请根据实际路径调整\r\nimport { useButler } from '../components/ButlersContext';\r\n\r\nconst RecorderContext = createContext(null);\r\n\r\nexport function RecorderProvider({ children }) {\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [transcription, setTranscription] = useState('');\r\n  const [lang, setLang] = useState(() => {\r\n    try {\r\n      return localStorage.getItem('audioTranscriberLang') || 'auto';\r\n    } catch {\r\n      return 'auto';\r\n    }\r\n  });\r\n  const [speakerVerification, setSpeakerVerification] = useState(() => {\r\n    try {\r\n      return localStorage.getItem('audioTranscriberSpeakerVerification') === 'true';\r\n    } catch {\r\n      return false;\r\n    }\r\n  });\r\n\r\n  // 新增：语音唤醒开关及自定义唤醒词状态，支持localStorage持久化\r\n  const [wakeWordEnabled, setWakeWordEnabled] = useState(() => {\r\n    try {\r\n      const stored = localStorage.getItem('wakeWordEnabled');\r\n      return stored === null ? true : stored === 'true';\r\n    } catch {\r\n      return true;\r\n    }\r\n  });\r\n  const [wakeWords, setWakeWords] = useState(() => {\r\n    try {\r\n      const stored = localStorage.getItem('wakeWords');\r\n      return stored ? stored : 'xiao li';\r\n    } catch {\r\n      return 'xiao li';\r\n    }\r\n  });\r\n\r\n  // 新增：使用管家Context，用于切换管家ID\r\n  const { setActiveButlerId } = useButler();\r\n\r\n  const recorder = useRecorder();\r\n\r\n  const wsRef = useRef(null);\r\n  const intervalRef = useRef(null);\r\n  const unmountedRef = useRef(false);\r\n\r\n  const sendTextMessage = async (text) => {\r\n    if (!text.trim()) return;\r\n    try {\r\n      const response = await fetch('https://192.168.1.70:6010/qwener', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ text }),\r\n      });\r\n      if (!response.ok) throw new Error('网络响应失败，状态码: ' + response.status);\r\n      const data = await response.json();\r\n      console.log('文本发送成功，服务器返回：', data);\r\n    } catch (error) {\r\n      console.error('文本发送失败：', error);\r\n    }\r\n  };\r\n\r\n  const stopRecording = () => {\r\n    if (!isRecording) {\r\n      console.log('[stopRecording] 当前非录音状态，忽略重复调用');\r\n      return;\r\n    }\r\n    console.trace('[stopRecording] 停止录音流程启动，调用栈');\r\n    if (wsRef.current) {\r\n      console.log('[stopRecording] 关闭 WebSocket 连接');\r\n      wsRef.current.onclose = null; // 避免触发 onclose 回调死循环\r\n      wsRef.current.close();\r\n      wsRef.current = null;\r\n    }\r\n    recorder.stop();\r\n    if (intervalRef.current) {\r\n      clearInterval(intervalRef.current);\r\n      intervalRef.current = null;\r\n    }\r\n    setIsRecording(false);\r\n  };\r\n\r\n  const startRecording = () => {\r\n    if (isRecording) {\r\n      console.log('[startRecording] 已经在录音中，忽略重复调用');\r\n      return;\r\n    }\r\n\r\n    setIsRecording(true); // 先置为true，防止重复调用\r\n\r\n    console.log('[startRecording] 请求麦克风权限...');\r\n    navigator.mediaDevices.getUserMedia({ audio: true })\r\n      .then(() => {\r\n        if (unmountedRef.current) {\r\n          stopRecording();\r\n          return;\r\n        }\r\n        let params = [];\r\n        if (lang) params.push(`lang=${encodeURIComponent(lang)}`);\r\n        if (speakerVerification) params.push('sv=1');\r\n        if (wakeWordEnabled) params.push('wakeword=1');\r\n        if (wakeWords) {\r\n          // 前端约定唤醒词传给后端时用逗号分隔，去除多余空格\r\n          const cleanedWakeWords = wakeWords.split(',').map(w => w.trim()).filter(w => w.length > 0).join(',');\r\n          if (cleanedWakeWords.length > 0) {\r\n            params.push(`wakewords=${encodeURIComponent(cleanedWakeWords)}`);\r\n          }\r\n        }\r\n        const queryStr = params.length > 0 ? `?${params.join('&')}` : '';\r\n\r\n        const wsUrl = `ws://192.168.168.77:6007/ws/transcribe${queryStr}`;\r\n        console.log('[startRecording] 创建 WebSocket 连接', wsUrl);\r\n        const ws = new WebSocket(wsUrl);\r\n        ws.binaryType = 'arraybuffer';\r\n\r\n        ws.onopen = () => {\r\n          console.log('[WebSocket] 连接已打开');\r\n          recorder.start()\r\n            .then(() => {\r\n              console.log('[Recorder] 录音开始');\r\n              intervalRef.current = setInterval(() => {\r\n                if (ws.readyState === 1) {\r\n                  const audioBlob = recorder.getAudioBlob();\r\n                  if (audioBlob.size > 0) {\r\n                    console.log('[WebSocket] 发送音频数据，大小：', audioBlob.size);\r\n                    ws.send(audioBlob);\r\n                    recorder.clearBuffer();\r\n                  }\r\n                }\r\n              }, 500);\r\n            })\r\n            .catch(e => {\r\n              alert('启动录音失败: ' + e.message);\r\n              console.error('[Recorder] 启动失败', e);\r\n              ws.close();\r\n              setIsRecording(false);\r\n            });\r\n        };\r\n\r\n        ws.onmessage = evt => {\r\n          try {\r\n            const resJson = JSON.parse(evt.data);\r\n            if (resJson.code === 0) {\r\n              const recognizedText = resJson.data || '无识别结果';\r\n              setTranscription(prev => (prev ? prev + '\\n' + recognizedText : recognizedText));\r\n              if (recognizedText && recognizedText.trim() && recognizedText !== '无识别结果') {\r\n                // 新增：基于识别文本切换管家逻辑\r\n                // 你可以根据实际语音关键字来调整这里的条件和id\r\n                if (recognizedText.includes('切换小粒')) {\r\n                  setActiveButlerId('xl');\r\n                } else if (recognizedText.includes('切换禅师')) {\r\n                  setActiveButlerId('cs');\r\n                } else if (recognizedText.includes('小贾')) {\r\n                  setActiveButlerId('butler3');\r\n                } else if (recognizedText.includes('星期天')) {\r\n                  setActiveButlerId('butler4');\r\n                }\r\n                sendTextMessage(recognizedText);\r\n              }\r\n            } else {\r\n              console.warn('[WebSocket] 返回非0 code:', resJson);\r\n            }\r\n          } catch (e) {\r\n            console.error('[WebSocket] 解析转写消息失败', e);\r\n            setTranscription(prev => (prev ? prev + '\\n' + evt.data : evt.data));\r\n          }\r\n        };\r\n\r\n        ws.onclose = (event) => {\r\n          console.log('[WebSocket] 连接关闭，代码:', event.code, '原因:', event.reason);\r\n          setIsRecording(false);\r\n          if (intervalRef.current) {\r\n            clearInterval(intervalRef.current);\r\n            intervalRef.current = null;\r\n          }\r\n          wsRef.current = null;\r\n        };\r\n\r\n        ws.onerror = (e) => {\r\n          console.error('[WebSocket] 错误', e);\r\n          alert('WebSocket 连接出错，请检查服务器状态和网络连接。');\r\n        };\r\n\r\n        wsRef.current = ws;\r\n      })\r\n      .catch(error => {\r\n        alert('请求麦克风权限失败: ' + error.message);\r\n        console.error('[startRecording] 获取麦克风权限失败', error);\r\n        setIsRecording(false);\r\n      });\r\n  };\r\n\r\n  // 持久化语言、声纹识别开关、语音唤醒开关和唤醒词\r\n  useEffect(() => {\r\n    try { localStorage.setItem('audioTranscriberLang', lang); } catch {}\r\n  }, [lang]);\r\n\r\n  useEffect(() => {\r\n    try { localStorage.setItem('audioTranscriberSpeakerVerification', speakerVerification.toString()); } catch {}\r\n  }, [speakerVerification]);\r\n\r\n  useEffect(() => {\r\n    try { localStorage.setItem('wakeWordEnabled', wakeWordEnabled.toString()); } catch {}\r\n  }, [wakeWordEnabled]);\r\n\r\n  useEffect(() => {\r\n    try { localStorage.setItem('wakeWords', wakeWords); } catch {}\r\n  }, [wakeWords]);\r\n\r\n  useEffect(() => {\r\n    unmountedRef.current = false;\r\n    return () => {\r\n      unmountedRef.current = true;\r\n      stopRecording();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <RecorderContext.Provider value={{\r\n      isRecording,\r\n      transcription,\r\n      lang,\r\n      speakerVerification,\r\n      wakeWordEnabled,\r\n      wakeWords,\r\n      setLang,\r\n      setSpeakerVerification,\r\n      setWakeWordEnabled,\r\n      setWakeWords,\r\n      startRecording,\r\n      stopRecording,\r\n      setTranscription,\r\n    }}>\r\n      {children}\r\n    </RecorderContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useRecorderContext() {\r\n  const context = useContext(RecorderContext);\r\n  if (!context) {\r\n    throw new Error('useRecorderContext 必须在 RecorderProvider 内使用');\r\n  }\r\n  return context;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}