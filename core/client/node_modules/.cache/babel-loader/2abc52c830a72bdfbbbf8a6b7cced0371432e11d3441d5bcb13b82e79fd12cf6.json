{"ast":null,"code":"import React,{createContext,useState,useRef,useEffect,useContext}from'react';import{useButler}from'../components/ButlersContext';import{useRecorder}from'../hooks/useRecorder';import{jsx as _jsx}from\"react/jsx-runtime\";const RecorderContext=/*#__PURE__*/createContext(null);// 新增：获取动态服务地址函数，统一读取localStorage中serverUrls配置\nfunction getDynamicUrls(){try{const serverUrlsStr=localStorage.getItem('serverUrls');if(serverUrlsStr){const serverUrls=JSON.parse(serverUrlsStr);return{switchAvatarUrl:serverUrls.apiBaseUrl?serverUrls.apiBaseUrl.replace(/\\/+$/,'')+'/api/switch_avatar':'http://192.168.168.77:6010/api/switch_avatar',interruptSpeakingUrl:serverUrls.interruptUrl||'http://192.168.168.77:6010/api/interrupt_speaking',qwenerUrl:serverUrls.qwenerUrl||'http://192.168.168.77:6010/qwener',wsTranscribeBaseUrl:serverUrls.uploadFileUrl?serverUrls.uploadFileUrl.replace(/\\/+$/,''):'http://192.168.168.77:6007'};}}catch(e){console.warn('读取serverUrls配置失败，使用默认地址',e);}return{switchAvatarUrl:'http://192.168.168.77:6010/api/switch_avatar',interruptSpeakingUrl:'http://192.168.168.77:6010/api/interrupt_speaking',qwenerUrl:'http://192.168.168.77:6010/qwener',wsTranscribeBaseUrl:'http://192.168.168.77:6007'};}export function RecorderProvider(_ref){let{children}=_ref;const{activeButlerId,setActiveButlerId,butlers}=useButler();// 新增butlers获取所有管家\nconst[isRecording,setIsRecording]=useState(false);const[transcription,setTranscription]=useState('');const[lang,setLang]=useState(()=>{try{return localStorage.getItem('audioTranscriberLang')||'auto';}catch(_unused){return'auto';}});const[speakerVerification,setSpeakerVerification]=useState(()=>{try{return localStorage.getItem('audioTranscriberSpeakerVerification')==='true';}catch(_unused2){return false;}});const[wakeWordEnabled,setWakeWordEnabled]=useState(()=>{try{const stored=localStorage.getItem('wakeWordEnabled');return stored===null?true:stored==='true';}catch(_unused3){return true;}});const[wakeWords,setWakeWords]=useState(()=>{try{const stored=localStorage.getItem('wakeWords');return stored?stored:'xiao li';}catch(_unused4){return'xiao li';}});// ASR面板可见性状态\nconst[asrPanelVisible,setAsrPanelVisible]=useState(()=>{try{const stored=localStorage.getItem('asrPanelVisible');return stored===null?false:stored==='true';}catch(_unused5){return false;}});const recorder=useRecorder();const wsRef=useRef(null);const intervalRef=useRef(null);const unmountedRef=useRef(false);// 后台数字人说话打断关键词列表\nconst interruptKeywords=['先说','你停一下','等等','暂停','打断'];// 统一切换管家函数（支持名称/ID，因名称与ID一致）\nconst activateButler=async target=>{if(!target)return;if(target===activeButlerId){console.log('[activateButler] 已激活该管家，无需切换:',target);return;}const{switchAvatarUrl}=getDynamicUrls();try{// 因名称与ID一致，直接使用target作为ID\nconsole.log('[activateButler] 尝试切换到管家（名称/ID）:',target);const resp=await fetch(switchAvatarUrl,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({butler_id:target})// 传递名称（即ID）\n});if(!resp.ok)throw new Error('后端错误，状态码: '+resp.status);const data=await resp.json();if(data.error)throw new Error(data.error);setActiveButlerId(target);console.log('[activateButler] 成功切换管家:',target);}catch(e){alert('切换管家失败: '+e.message);console.error('[activateButler] 切换失败:',e);}};// 通知后台停止数字人当前说话\nconst interruptSpeaking=async()=>{const{interruptSpeakingUrl}=getDynamicUrls();try{const resp=await fetch(interruptSpeakingUrl,{method:'POST',headers:{'Content-Type':'application/json'}});if(!resp.ok){console.warn('[interruptSpeaking] 后端停止接口调用失败，状态码:',resp.status);}else{console.log('[interruptSpeaking] 成功通知后台打断数字人说话');}}catch(e){console.error('[interruptSpeaking] 调用停止接口异常:',e);}};// 发送文本消息到服务器\nconst sendTextMessage=async text=>{if(!text.trim())return;const{qwenerUrl}=getDynamicUrls();try{const response=await fetch(qwenerUrl,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({text})});if(!response.ok)throw new Error('网络响应失败，状态码: '+response.status);const data=await response.json();console.log('文本发送成功，服务器返回：',data);}catch(error){console.error('文本发送失败：',error);}};// 停止录音\nconst stopRecording=()=>{if(!isRecording){console.log('[stopRecording] 当前非录音状态，忽略重复调用');return;}if(wsRef.current){wsRef.current.onclose=null;wsRef.current.close();wsRef.current=null;}recorder.stop();if(intervalRef.current){clearInterval(intervalRef.current);intervalRef.current=null;}setIsRecording(false);};// 开始录音\nconst startRecording=()=>{if(isRecording){console.log('[startRecording] 已经在录音中，忽略重复调用');return;}setIsRecording(true);navigator.mediaDevices.getUserMedia({audio:true}).then(()=>{if(unmountedRef.current){stopRecording();return;}let params=[];if(lang)params.push(\"lang=\".concat(encodeURIComponent(lang)));if(speakerVerification)params.push('sv=1');if(wakeWordEnabled)params.push('wakeword=1');if(wakeWords){const cleanedWakeWords=wakeWords.split(',').map(w=>w.trim()).filter(w=>w.length>0).join(',');if(cleanedWakeWords.length>0){params.push(\"wakewords=\".concat(encodeURIComponent(cleanedWakeWords)));}}const queryStr=params.length>0?\"?\".concat(params.join('&')):'';const{wsTranscribeBaseUrl}=getDynamicUrls();// 注意这里wsTranscribeBaseUrl可能是http://ip:port，无需强制ws:// prefix，保证协议一致\nconst wsUrl=wsTranscribeBaseUrl.replace(/^http/,'ws')+\"/ws/transcribe\".concat(queryStr);console.log('[startRecording] 创建 WebSocket 连接',wsUrl);const ws=new WebSocket(wsUrl);ws.binaryType='arraybuffer';ws.onmessage=evt=>{try{const resJson=JSON.parse(evt.data);if(resJson.code===0){const recognizedText=resJson.data||'无识别结果';console.log('【原始识别文本】',recognizedText);const cleanedText=recognizedText.replace(/[^\\u4e00-\\u9fa5a-zA-Z0-9]/g,'').trim();console.log('【清洗后文本】',cleanedText);setTranscription(prev=>prev?prev+'\\n'+recognizedText:recognizedText);if(cleanedText){// 检测打断关键词\nif(interruptKeywords.some(kw=>cleanedText.includes(kw))){console.log('【检测到打断关键词】',cleanedText);interruptSpeaking();stopRecording();}// 语音指令切换管家（支持名称匹配，因名称与ID一致）\nconst switchCmdMatch=cleanedText.match(/切换(到)?(.+)/);// 匹配\"切换X\"或\"切换到X\"\nif(switchCmdMatch&&switchCmdMatch[2]){const targetName=switchCmdMatch[2].trim();// 提取要切换的名称\nconsole.log('【识别到切换指令】目标名称:',targetName);// 查找是否存在该名称的管家（因名称与ID一致）\nconst targetButler=butlers.find(butler=>butler.name.includes(targetName)||targetName.includes(butler.name));if(targetButler){activateButler(targetButler.name);// 直接使用名称（即ID）切换\n}else{console.log('【未找到对应管家】目标名称:',targetName);}}sendTextMessage(recognizedText);}}}catch(e){console.error('【解析失败】',e);}};ws.onopen=()=>{console.log('[WebSocket] 连接已打开');recorder.start().then(()=>{console.log('[Recorder] 录音开始');intervalRef.current=setInterval(()=>{if(ws.readyState===1){const audioBlob=recorder.getAudioBlob();if(audioBlob.size>0){console.log('[WebSocket] 发送音频数据，大小：',audioBlob.size);ws.send(audioBlob);recorder.clearBuffer();}}},500);}).catch(e=>{alert('启动录音失败: '+e.message);console.error('[Recorder] 启动失败',e);ws.close();setIsRecording(false);});};ws.onclose=event=>{console.log('[WebSocket] 连接关闭，代码:',event.code,'原因:',event.reason);setIsRecording(false);if(intervalRef.current){clearInterval(intervalRef.current);intervalRef.current=null;}wsRef.current=null;};ws.onerror=e=>{console.error('[WebSocket] 错误',e);alert('WebSocket 连接出错，请检查服务器状态和网络连接。');};wsRef.current=ws;}).catch(error=>{alert('请求麦克风权限失败: '+error.message);console.error('[startRecording] 获取麦克风权限失败',error);setIsRecording(false);});};// 组件卸载清理\nuseEffect(()=>{unmountedRef.current=false;return()=>{unmountedRef.current=true;stopRecording();};},[]);// 持久化设置\nuseEffect(()=>{try{localStorage.setItem('audioTranscriberLang',lang);}catch(_unused6){}},[lang]);useEffect(()=>{try{localStorage.setItem('audioTranscriberSpeakerVerification',speakerVerification.toString());}catch(_unused7){}},[speakerVerification]);useEffect(()=>{try{localStorage.setItem('wakeWordEnabled',wakeWordEnabled.toString());}catch(_unused8){}},[wakeWordEnabled]);useEffect(()=>{try{localStorage.setItem('wakeWords',wakeWords);}catch(_unused9){}},[wakeWords]);useEffect(()=>{try{localStorage.setItem('asrPanelVisible',asrPanelVisible.toString());}catch(_unused0){}},[asrPanelVisible]);return/*#__PURE__*/_jsx(RecorderContext.Provider,{value:{isRecording,transcription,lang,speakerVerification,wakeWordEnabled,wakeWords,setLang,setSpeakerVerification,setWakeWordEnabled,setWakeWords,startRecording,stopRecording,setTranscription,activateButler,interruptSpeaking,asrPanelVisible,setAsrPanelVisible},children:children});}export function useRecorderContext(){const context=useContext(RecorderContext);if(!context){throw new Error('useRecorderContext 必须在 RecorderProvider 内使用');}return context;}","map":{"version":3,"names":["React","createContext","useState","useRef","useEffect","useContext","useButler","useRecorder","jsx","_jsx","RecorderContext","getDynamicUrls","serverUrlsStr","localStorage","getItem","serverUrls","JSON","parse","switchAvatarUrl","apiBaseUrl","replace","interruptSpeakingUrl","interruptUrl","qwenerUrl","wsTranscribeBaseUrl","uploadFileUrl","e","console","warn","RecorderProvider","_ref","children","activeButlerId","setActiveButlerId","butlers","isRecording","setIsRecording","transcription","setTranscription","lang","setLang","_unused","speakerVerification","setSpeakerVerification","_unused2","wakeWordEnabled","setWakeWordEnabled","stored","_unused3","wakeWords","setWakeWords","_unused4","asrPanelVisible","setAsrPanelVisible","_unused5","recorder","wsRef","intervalRef","unmountedRef","interruptKeywords","activateButler","target","log","resp","fetch","method","headers","body","stringify","butler_id","ok","Error","status","data","json","error","alert","message","interruptSpeaking","sendTextMessage","text","trim","response","stopRecording","current","onclose","close","stop","clearInterval","startRecording","navigator","mediaDevices","getUserMedia","audio","then","params","push","concat","encodeURIComponent","cleanedWakeWords","split","map","w","filter","length","join","queryStr","wsUrl","ws","WebSocket","binaryType","onmessage","evt","resJson","code","recognizedText","cleanedText","prev","some","kw","includes","switchCmdMatch","match","targetName","targetButler","find","butler","name","onopen","start","setInterval","readyState","audioBlob","getAudioBlob","size","send","clearBuffer","catch","event","reason","onerror","setItem","_unused6","toString","_unused7","_unused8","_unused9","_unused0","Provider","value","useRecorderContext","context"],"sources":["D:/XM/AI-Sphere-Butler/core/client/src/contexts/RecorderProvider.jsx"],"sourcesContent":["import React, { createContext, useState, useRef, useEffect, useContext } from 'react';\r\nimport { useButler } from '../components/ButlersContext';\r\nimport { useRecorder } from '../hooks/useRecorder';\r\n\r\nconst RecorderContext = createContext(null);\r\n\r\n// 新增：获取动态服务地址函数，统一读取localStorage中serverUrls配置\r\nfunction getDynamicUrls() {\r\n  try {\r\n    const serverUrlsStr = localStorage.getItem('serverUrls');\r\n    if (serverUrlsStr) {\r\n      const serverUrls = JSON.parse(serverUrlsStr);\r\n      return {\r\n        switchAvatarUrl: serverUrls.apiBaseUrl ? serverUrls.apiBaseUrl.replace(/\\/+$/, '') + '/api/switch_avatar' : 'http://192.168.168.77:6010/api/switch_avatar',\r\n        interruptSpeakingUrl: serverUrls.interruptUrl || 'http://192.168.168.77:6010/api/interrupt_speaking',\r\n        qwenerUrl: serverUrls.qwenerUrl || 'http://192.168.168.77:6010/qwener',\r\n        wsTranscribeBaseUrl: serverUrls.uploadFileUrl ? serverUrls.uploadFileUrl.replace(/\\/+$/, '') : 'http://192.168.168.77:6007',\r\n      };\r\n    }\r\n  } catch (e) {\r\n    console.warn('读取serverUrls配置失败，使用默认地址', e);\r\n  }\r\n  return {\r\n    switchAvatarUrl: 'http://192.168.168.77:6010/api/switch_avatar',\r\n    interruptSpeakingUrl: 'http://192.168.168.77:6010/api/interrupt_speaking',\r\n    qwenerUrl: 'http://192.168.168.77:6010/qwener',\r\n    wsTranscribeBaseUrl: 'http://192.168.168.77:6007',\r\n  };\r\n}\r\n\r\nexport function RecorderProvider({ children }) {\r\n  const { activeButlerId, setActiveButlerId, butlers } = useButler(); // 新增butlers获取所有管家\r\n\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [transcription, setTranscription] = useState('');\r\n  const [lang, setLang] = useState(() => {\r\n    try {\r\n      return localStorage.getItem('audioTranscriberLang') || 'auto';\r\n    } catch {\r\n      return 'auto';\r\n    }\r\n  });\r\n  const [speakerVerification, setSpeakerVerification] = useState(() => {\r\n    try {\r\n      return localStorage.getItem('audioTranscriberSpeakerVerification') === 'true';\r\n    } catch {\r\n      return false;\r\n    }\r\n  });\r\n\r\n  const [wakeWordEnabled, setWakeWordEnabled] = useState(() => {\r\n    try {\r\n      const stored = localStorage.getItem('wakeWordEnabled');\r\n      return stored === null ? true : stored === 'true';\r\n    } catch {\r\n      return true;\r\n    }\r\n  });\r\n  const [wakeWords, setWakeWords] = useState(() => {\r\n    try {\r\n      const stored = localStorage.getItem('wakeWords');\r\n      return stored ? stored : 'xiao li';\r\n    } catch {\r\n      return 'xiao li';\r\n    }\r\n  });\r\n\r\n  // ASR面板可见性状态\r\n  const [asrPanelVisible, setAsrPanelVisible] = useState(() => {\r\n    try {\r\n      const stored = localStorage.getItem('asrPanelVisible');\r\n      return stored === null ? false : stored === 'true';\r\n    } catch {\r\n      return false;\r\n    }\r\n  });\r\n\r\n  const recorder = useRecorder();\r\n\r\n  const wsRef = useRef(null);\r\n  const intervalRef = useRef(null);\r\n  const unmountedRef = useRef(false);\r\n\r\n  // 后台数字人说话打断关键词列表\r\n  const interruptKeywords = ['先说', '你停一下', '等等', '暂停', '打断'];\r\n\r\n  // 统一切换管家函数（支持名称/ID，因名称与ID一致）\r\n  const activateButler = async (target) => {\r\n    if (!target) return;\r\n    if (target === activeButlerId) {\r\n      console.log('[activateButler] 已激活该管家，无需切换:', target);\r\n      return;\r\n    }\r\n\r\n    const { switchAvatarUrl } = getDynamicUrls();\r\n\r\n    try {\r\n      // 因名称与ID一致，直接使用target作为ID\r\n      console.log('[activateButler] 尝试切换到管家（名称/ID）:', target);\r\n      const resp = await fetch(switchAvatarUrl, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ butler_id: target }), // 传递名称（即ID）\r\n      });\r\n\r\n      if (!resp.ok) throw new Error('后端错误，状态码: ' + resp.status);\r\n      const data = await resp.json();\r\n      if (data.error) throw new Error(data.error);\r\n      \r\n      setActiveButlerId(target);\r\n      console.log('[activateButler] 成功切换管家:', target);\r\n    } catch (e) {\r\n      alert('切换管家失败: ' + e.message);\r\n      console.error('[activateButler] 切换失败:', e);\r\n    }\r\n  };\r\n\r\n  // 通知后台停止数字人当前说话\r\n  const interruptSpeaking = async () => {\r\n    const { interruptSpeakingUrl } = getDynamicUrls();\r\n    try {\r\n      const resp = await fetch(interruptSpeakingUrl, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n      });\r\n      if (!resp.ok) {\r\n        console.warn('[interruptSpeaking] 后端停止接口调用失败，状态码:', resp.status);\r\n      } else {\r\n        console.log('[interruptSpeaking] 成功通知后台打断数字人说话');\r\n      }\r\n    } catch (e) {\r\n      console.error('[interruptSpeaking] 调用停止接口异常:', e);\r\n    }\r\n  };\r\n\r\n  // 发送文本消息到服务器\r\n  const sendTextMessage = async (text) => {\r\n    if (!text.trim()) return;\r\n    const { qwenerUrl } = getDynamicUrls();\r\n    try {\r\n      const response = await fetch(qwenerUrl, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ text }),\r\n      });\r\n      if (!response.ok) throw new Error('网络响应失败，状态码: ' + response.status);\r\n      const data = await response.json();\r\n      console.log('文本发送成功，服务器返回：', data);\r\n    } catch (error) {\r\n      console.error('文本发送失败：', error);\r\n    }\r\n  };\r\n\r\n  // 停止录音\r\n  const stopRecording = () => {\r\n    if (!isRecording) {\r\n      console.log('[stopRecording] 当前非录音状态，忽略重复调用');\r\n      return;\r\n    }\r\n    if (wsRef.current) {\r\n      wsRef.current.onclose = null;\r\n      wsRef.current.close();\r\n      wsRef.current = null;\r\n    }\r\n    recorder.stop();\r\n    if (intervalRef.current) {\r\n      clearInterval(intervalRef.current);\r\n      intervalRef.current = null;\r\n    }\r\n    setIsRecording(false);\r\n  };\r\n\r\n  // 开始录音\r\n  const startRecording = () => {\r\n    if (isRecording) {\r\n      console.log('[startRecording] 已经在录音中，忽略重复调用');\r\n      return;\r\n    }\r\n\r\n    setIsRecording(true);\r\n\r\n    navigator.mediaDevices.getUserMedia({ audio: true })\r\n      .then(() => {\r\n        if (unmountedRef.current) {\r\n          stopRecording();\r\n          return;\r\n        }\r\n        let params = [];\r\n        if (lang) params.push(`lang=${encodeURIComponent(lang)}`);\r\n        if (speakerVerification) params.push('sv=1');\r\n        if (wakeWordEnabled) params.push('wakeword=1');\r\n        if (wakeWords) {\r\n          const cleanedWakeWords = wakeWords.split(',').map(w => w.trim()).filter(w => w.length > 0).join(',');\r\n          if (cleanedWakeWords.length > 0) {\r\n            params.push(`wakewords=${encodeURIComponent(cleanedWakeWords)}`);\r\n          }\r\n        }\r\n        const queryStr = params.length > 0 ? `?${params.join('&')}` : '';\r\n\r\n        const { wsTranscribeBaseUrl } = getDynamicUrls();\r\n        // 注意这里wsTranscribeBaseUrl可能是http://ip:port，无需强制ws:// prefix，保证协议一致\r\n        const wsUrl = wsTranscribeBaseUrl.replace(/^http/, 'ws') + `/ws/transcribe${queryStr}`;\r\n        console.log('[startRecording] 创建 WebSocket 连接', wsUrl);\r\n        const ws = new WebSocket(wsUrl);\r\n        ws.binaryType = 'arraybuffer';\r\n\r\n        ws.onmessage = (evt) => {\r\n          try {\r\n            const resJson = JSON.parse(evt.data);\r\n            if (resJson.code === 0) {\r\n              const recognizedText = resJson.data || '无识别结果';\r\n              console.log('【原始识别文本】', recognizedText);\r\n\r\n              const cleanedText = recognizedText.replace(/[^\\u4e00-\\u9fa5a-zA-Z0-9]/g, '').trim();\r\n              console.log('【清洗后文本】', cleanedText);\r\n\r\n              setTranscription(prev => (prev ? prev + '\\n' + recognizedText : recognizedText));\r\n\r\n              if (cleanedText) {\r\n                // 检测打断关键词\r\n                if (interruptKeywords.some(kw => cleanedText.includes(kw))) {\r\n                  console.log('【检测到打断关键词】', cleanedText);\r\n                  interruptSpeaking();\r\n                  stopRecording();\r\n                }\r\n\r\n                // 语音指令切换管家（支持名称匹配，因名称与ID一致）\r\n                const switchCmdMatch = cleanedText.match(/切换(到)?(.+)/); // 匹配\"切换X\"或\"切换到X\"\r\n                if (switchCmdMatch && switchCmdMatch[2]) {\r\n                  const targetName = switchCmdMatch[2].trim(); // 提取要切换的名称\r\n                  console.log('【识别到切换指令】目标名称:', targetName);\r\n                  \r\n                  // 查找是否存在该名称的管家（因名称与ID一致）\r\n                  const targetButler = butlers.find(butler => \r\n                    butler.name.includes(targetName) || targetName.includes(butler.name)\r\n                  );\r\n                  \r\n                  if (targetButler) {\r\n                    activateButler(targetButler.name); // 直接使用名称（即ID）切换\r\n                  } else {\r\n                    console.log('【未找到对应管家】目标名称:', targetName);\r\n                  }\r\n                }\r\n\r\n                sendTextMessage(recognizedText);\r\n              }\r\n            }\r\n          } catch (e) {\r\n            console.error('【解析失败】', e);\r\n          }\r\n        };\r\n\r\n        ws.onopen = () => {\r\n          console.log('[WebSocket] 连接已打开');\r\n          recorder.start()\r\n            .then(() => {\r\n              console.log('[Recorder] 录音开始');\r\n              intervalRef.current = setInterval(() => {\r\n                if (ws.readyState === 1) {\r\n                  const audioBlob = recorder.getAudioBlob();\r\n                  if (audioBlob.size > 0) {\r\n                    console.log('[WebSocket] 发送音频数据，大小：', audioBlob.size);\r\n                    ws.send(audioBlob);\r\n                    recorder.clearBuffer();\r\n                  }\r\n                }\r\n              }, 500);\r\n            })\r\n            .catch(e => {\r\n              alert('启动录音失败: ' + e.message);\r\n              console.error('[Recorder] 启动失败', e);\r\n              ws.close();\r\n              setIsRecording(false);\r\n            });\r\n        };\r\n\r\n        ws.onclose = (event) => {\r\n          console.log('[WebSocket] 连接关闭，代码:', event.code, '原因:', event.reason);\r\n          setIsRecording(false);\r\n          if (intervalRef.current) {\r\n            clearInterval(intervalRef.current);\r\n            intervalRef.current = null;\r\n          }\r\n          wsRef.current = null;\r\n        };\r\n\r\n        ws.onerror = (e) => {\r\n          console.error('[WebSocket] 错误', e);\r\n          alert('WebSocket 连接出错，请检查服务器状态和网络连接。');\r\n        };\r\n\r\n        wsRef.current = ws;\r\n      })\r\n      .catch(error => {\r\n        alert('请求麦克风权限失败: ' + error.message);\r\n        console.error('[startRecording] 获取麦克风权限失败', error);\r\n        setIsRecording(false);\r\n      });\r\n  };\r\n\r\n  // 组件卸载清理\r\n  useEffect(() => {\r\n    unmountedRef.current = false;\r\n    return () => {\r\n      unmountedRef.current = true;\r\n      stopRecording();\r\n    };\r\n  }, []);\r\n\r\n  // 持久化设置\r\n  useEffect(() => {\r\n    try { localStorage.setItem('audioTranscriberLang', lang); } catch {}\r\n  }, [lang]);\r\n\r\n  useEffect(() => {\r\n    try { localStorage.setItem('audioTranscriberSpeakerVerification', speakerVerification.toString()); } catch {}\r\n  }, [speakerVerification]);\r\n\r\n  useEffect(() => {\r\n    try { localStorage.setItem('wakeWordEnabled', wakeWordEnabled.toString()); } catch {}\r\n  }, [wakeWordEnabled]);\r\n\r\n  useEffect(() => {\r\n    try { localStorage.setItem('wakeWords', wakeWords); } catch {}\r\n  }, [wakeWords]);\r\n\r\n  useEffect(() => {\r\n    try { localStorage.setItem('asrPanelVisible', asrPanelVisible.toString()); } catch {}\r\n  }, [asrPanelVisible]);\r\n\r\n  return (\r\n    <RecorderContext.Provider value={{\r\n      isRecording,\r\n      transcription,\r\n      lang,\r\n      speakerVerification,\r\n      wakeWordEnabled,\r\n      wakeWords,\r\n      setLang,\r\n      setSpeakerVerification,\r\n      setWakeWordEnabled,\r\n      setWakeWords,\r\n      startRecording,\r\n      stopRecording,\r\n      setTranscription,\r\n      activateButler,\r\n      interruptSpeaking,\r\n      asrPanelVisible,\r\n      setAsrPanelVisible\r\n    }}>\r\n      {children}\r\n    </RecorderContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useRecorderContext() {\r\n  const context = useContext(RecorderContext);\r\n  if (!context) {\r\n    throw new Error('useRecorderContext 必须在 RecorderProvider 内使用');\r\n  }\r\n  return context;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}