{"ast":null,"code":"var _jsxFileName = \"D:\\\\XM\\\\AI-Sphere-Butler\\\\core\\\\client\\\\src\\\\components\\\\AudioTranscriber.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useRecorder } from '../hooks/useRecorder';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function AudioTranscriber() {\n  _s();\n  // 录音状态\n  const [isRecording, setIsRecording] = useState(false);\n  // 转写文本内容\n  const [transcription, setTranscription] = useState('');\n  // 语言参数，默认 auto\n  // 初始化时尝试从 localStorage 读取，避免切换页面重置\n  const [lang, setLang] = useState(() => {\n    try {\n      return localStorage.getItem('audioTranscriberLang') || 'auto';\n    } catch {\n      return 'auto';\n    }\n  });\n  // 是否开启声纹识别\n  // 初始化时尝试从 localStorage 读取，避免切换页面重置\n  const [speakerVerification, setSpeakerVerification] = useState(() => {\n    try {\n      return localStorage.getItem('audioTranscriberSpeakerVerification') === 'true';\n    } catch {\n      return false;\n    }\n  });\n\n  // 自定义录音 Hook，管理录音功能\n  const recorder = useRecorder();\n\n  // WebSocket 实例引用\n  const wsRef = useRef(null);\n  // 定时发送音频的定时器引用\n  const intervalRef = useRef(null);\n\n  // 拖拽相关引用，仅用于麦克风按钮\n  const micButtonRef = useRef(null);\n  const isDraggingRef = useRef(false);\n  const offsetXRef = useRef(0);\n  const offsetYRef = useRef(0);\n\n  // localStorage 保存位置的 key\n  const storageKey = 'audioTranscriberMicButtonPosition';\n\n  // 新增声纹识别录音状态和上传状态\n  const [isSpeakerRecording, setIsSpeakerRecording] = useState(false);\n  const [speakerUploadStatus, setSpeakerUploadStatus] = useState('');\n  const speakerRecorderRef = useRef(null);\n  const speakerAudioChunksRef = useRef([]);\n\n  /**\r\n   * 发送文本消息到 LLM 服务\r\n   * @param {string} text - 要发送的文本\r\n   */\n  const sendTextMessage = async text => {\n    if (!text.trim()) return;\n    try {\n      const response = await fetch('https://192.168.1.70:6010/qwener', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text\n        })\n      });\n      if (!response.ok) {\n        throw new Error('网络响应失败，状态码: ' + response.status);\n      }\n      const data = await response.json();\n      console.log('文本发送成功，服务器返回：', data);\n    } catch (error) {\n      console.error('文本发送失败：', error);\n    }\n  };\n\n  // 组件卸载时清理资源\n  // 优化：仅停止录音和释放资源，如果页面切换卸载了组件，则资源释放正常\n  useEffect(() => {\n    return () => {\n      stopRecording();\n      stopSpeakerRecording();\n    };\n  }, []);\n\n  // 监听语言和声纹识别开关的变化，保存状态到 localStorage，确保切换页时记忆选择\n  useEffect(() => {\n    try {\n      localStorage.setItem('audioTranscriberLang', lang);\n    } catch {}\n  }, [lang]);\n  useEffect(() => {\n    try {\n      localStorage.setItem('audioTranscriberSpeakerVerification', speakerVerification.toString());\n    } catch {}\n  }, [speakerVerification]);\n\n  /**\r\n   * 启动录音并建立 WebSocket 连接\r\n   */\n  function startRecording() {\n    if (isRecording) return;\n\n    // 先请求麦克风权限\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(() => {\n      // 根据语言和声纹识别参数拼接 WebSocket URL 查询参数\n      let params = [];\n      if (lang) params.push(`lang=${encodeURIComponent(lang)}`);\n      if (speakerVerification) params.push('sv=1'); // 声纹识别参数，勾选时添加\n      const queryStr = params.length > 0 ? `?${params.join('&')}` : '';\n\n      // 请根据实际服务器地址修改此处 ws 地址和端口\n      const wsUrl = `ws://192.168.168.77:6007/ws/transcribe${queryStr}`;\n      const ws = new WebSocket(wsUrl);\n      ws.binaryType = 'arraybuffer';\n      ws.onopen = () => {\n        console.log('WebSocket 已连接');\n\n        // 启动录音\n        recorder.start().catch(e => {\n          alert('启动录音失败: ' + e.message);\n          ws.close();\n        });\n\n        // 定时发送音频数据（每 500ms 发送一次）\n        intervalRef.current = setInterval(() => {\n          if (ws.readyState === 1) {\n            const audioBlob = recorder.getAudioBlob();\n            if (audioBlob.size > 0) {\n              console.log('发送音频数据，大小：', audioBlob.size);\n              ws.send(audioBlob);\n              recorder.clearBuffer();\n            }\n          }\n        }, 500);\n      };\n      ws.onmessage = evt => {\n        try {\n          const resJson = JSON.parse(evt.data);\n          if (resJson.code === 0) {\n            // 收到转写正确结果\n            const recognizedText = resJson.data || '无识别结果';\n\n            // 更新转写文本展示\n            setTranscription(prev => prev ? prev + '\\n' + recognizedText : recognizedText);\n\n            // 识别到有效文本时，发送给后端 LLM 服务\n            if (recognizedText && recognizedText.trim() && recognizedText !== '无识别结果') {\n              sendTextMessage(recognizedText);\n            }\n          } else {\n            // 其它code（如2）不显示也不发送\n            // 如果需要显示错误或提示，可以在这里添加逻辑\n            // 当前忽略非0 code消息\n          }\n        } catch (e) {\n          console.error('解析转写消息失败', e);\n          setTranscription(prev => prev ? prev + '\\n' + evt.data : evt.data);\n        }\n      };\n      ws.onclose = () => {\n        console.log('WebSocket 已关闭');\n        stopRecording();\n      };\n      ws.onerror = e => {\n        console.error('WebSocket 错误', e);\n      };\n      wsRef.current = ws;\n      setIsRecording(true);\n    }).catch(error => {\n      alert('请求麦克风权限失败: ' + error.message);\n    });\n  }\n\n  /**\r\n   * 停止录音并关闭 WebSocket 连接\r\n   */\n  function stopRecording() {\n    if (!isRecording) return;\n    if (wsRef.current) {\n      wsRef.current.close();\n      wsRef.current = null;\n    }\n    recorder.stop();\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n    setIsRecording(false);\n  }\n\n  /**\r\n   * 新增：开始录制2秒音频用于声纹识别\r\n   */\n  function startSpeakerRecording() {\n    if (isSpeakerRecording) return;\n    setSpeakerUploadStatus('请求麦克风权限...');\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => {\n      setSpeakerUploadStatus('开始录音2秒...');\n      speakerAudioChunksRef.current = [];\n      const options = {\n        mimeType: 'audio/wav'\n      }; // 一些浏览器不支持wav mimeType，下面用默认就好\n      let mediaRecorder;\n      try {\n        mediaRecorder = new MediaRecorder(stream, options);\n      } catch (e) {\n        // 失败则不传mimeType，使用默认格式\n        mediaRecorder = new MediaRecorder(stream);\n      }\n      speakerRecorderRef.current = mediaRecorder;\n      mediaRecorder.ondataavailable = event => {\n        if (event.data && event.data.size > 0) {\n          speakerAudioChunksRef.current.push(event.data);\n        }\n      };\n      mediaRecorder.onstop = async () => {\n        setSpeakerUploadStatus('录音结束，准备上传...');\n        const blob = new Blob(speakerAudioChunksRef.current, {\n          type: 'audio/wav'\n        });\n\n        // 发送上传请求（请修改URL为后端实际接口）\n        try {\n          const formData = new FormData();\n          formData.append('file', blob, 'speaker.wav');\n\n          // 这里示例用POST到服务器上传接口，路径请根据后端实际修改\n          const uploadUrl = 'http://192.168.168.77:6007/api/uploadSpeaker';\n          const res = await fetch(uploadUrl, {\n            method: 'POST',\n            body: formData\n          });\n          if (!res.ok) {\n            throw new Error(`上传失败，状态码: ${res.status}`);\n          }\n          const result = await res.json();\n          setSpeakerUploadStatus('上传成功');\n          console.log('上传成功，服务器返回：', result);\n        } catch (err) {\n          setSpeakerUploadStatus('上传失败: ' + err.message);\n          console.error('上传失败', err);\n        }\n        // 停止所有音频轨道释放麦克风\n        stream.getTracks().forEach(track => track.stop());\n        setTimeout(() => setSpeakerUploadStatus(''), 3000);\n        setIsSpeakerRecording(false);\n      };\n      mediaRecorder.start();\n      setIsSpeakerRecording(true);\n\n      // 2秒后停止录音\n      setTimeout(() => {\n        if (speakerRecorderRef.current && speakerRecorderRef.current.state !== 'inactive') {\n          speakerRecorderRef.current.stop();\n        }\n      }, 2000);\n    }).catch(err => {\n      setSpeakerUploadStatus('获取麦克风权限失败: ' + err.message);\n      console.error('获取麦克风权限失败', err);\n    });\n  }\n\n  /**\r\n   * 新增：停止声纹录音（如果需要手动停止）\r\n   */\n  function stopSpeakerRecording() {\n    if (speakerRecorderRef.current && speakerRecorderRef.current.state !== 'inactive') {\n      speakerRecorderRef.current.stop();\n      setIsSpeakerRecording(false);\n    }\n  }\n\n  // 拖拽事件处理，仅麦克风按钮\n  useEffect(() => {\n    if (!micButtonRef.current) return;\n    const button = micButtonRef.current;\n\n    // 读取并恢复按钮位置\n    const savedPosStr = localStorage.getItem(storageKey);\n    let left = 26;\n    let top = 26;\n    if (savedPosStr) {\n      try {\n        const pos = JSON.parse(savedPosStr);\n        if (typeof pos.left === 'number' && typeof pos.top === 'number' && pos.left >= 0 && pos.top >= 0) {\n          left = pos.left;\n          top = pos.top;\n        }\n      } catch {\n        // 解析失败忽略，使用默认\n      }\n    }\n    button.style.position = 'fixed';\n    button.style.left = `${left}px`;\n    button.style.top = `${top}px`;\n    button.style.zIndex = '10000';\n    button.style.cursor = 'grab';\n\n    // 拖拽相关变量\n    isDraggingRef.current = false;\n    offsetXRef.current = 0;\n    offsetYRef.current = 0;\n    const onMouseDown = e => {\n      if (e.button !== 0) return; // 仅左键拖拽\n      isDraggingRef.current = true;\n      offsetXRef.current = e.clientX - button.offsetLeft;\n      offsetYRef.current = e.clientY - button.offsetTop;\n      button.style.cursor = 'grabbing';\n      e.preventDefault();\n    };\n    const onMouseMove = e => {\n      if (!isDraggingRef.current) return;\n      let newLeft = e.clientX - offsetXRef.current;\n      let newTop = e.clientY - offsetYRef.current;\n      const maxLeft = window.innerWidth - button.offsetWidth;\n      const maxTop = window.innerHeight - button.offsetHeight;\n      newLeft = Math.min(Math.max(0, newLeft), maxLeft);\n      newTop = Math.min(Math.max(0, newTop), maxTop);\n      button.style.left = `${newLeft}px`;\n      button.style.top = `${newTop}px`;\n    };\n    const onMouseUp = () => {\n      if (!isDraggingRef.current) return;\n      isDraggingRef.current = false;\n      button.style.cursor = 'grab';\n\n      // 保存位置\n      localStorage.setItem(storageKey, JSON.stringify({\n        left: button.offsetLeft,\n        top: button.offsetTop\n      }));\n    };\n    const onTouchStart = e => {\n      if (e.touches.length === 0) return;\n      isDraggingRef.current = true;\n      const touch = e.touches[0];\n      offsetXRef.current = touch.clientX - button.offsetLeft;\n      offsetYRef.current = touch.clientY - button.offsetTop;\n      button.style.cursor = 'grabbing';\n    };\n    const onTouchMove = e => {\n      if (!isDraggingRef.current || e.touches.length === 0) return;\n      const touch = e.touches[0];\n      let newLeft = touch.clientX - offsetXRef.current;\n      let newTop = touch.clientY - offsetYRef.current;\n      const maxLeft = window.innerWidth - button.offsetWidth;\n      const maxTop = window.innerHeight - button.offsetHeight;\n      newLeft = Math.min(Math.max(0, newLeft), maxLeft);\n      newTop = Math.min(Math.max(0, newTop), maxTop);\n      button.style.left = `${newLeft}px`;\n      button.style.top = `${newTop}px`;\n      e.preventDefault();\n    };\n    const onTouchEnd = () => {\n      if (!isDraggingRef.current) return;\n      isDraggingRef.current = false;\n      button.style.cursor = 'grab';\n\n      // 保存位置\n      localStorage.setItem(storageKey, JSON.stringify({\n        left: button.offsetLeft,\n        top: button.offsetTop\n      }));\n    };\n    button.addEventListener('mousedown', onMouseDown);\n    document.addEventListener('mousemove', onMouseMove);\n    document.addEventListener('mouseup', onMouseUp);\n    button.addEventListener('touchstart', onTouchStart, {\n      passive: false\n    });\n    document.addEventListener('touchmove', onTouchMove, {\n      passive: false\n    });\n    document.addEventListener('touchend', onTouchEnd);\n    return () => {\n      button.removeEventListener('mousedown', onMouseDown);\n      document.removeEventListener('mousemove', onMouseMove);\n      document.removeEventListener('mouseup', onMouseUp);\n      button.removeEventListener('touchstart', onTouchStart);\n      document.removeEventListener('touchmove', onTouchMove);\n      document.removeEventListener('touchend', onTouchEnd);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"style\", {\n      children: `\n        /* 麦克风按钮样式 */\n        #mic-button-wrapper {\n          position: fixed;\n          z-index: 10000;\n          user-select: none;\n          pointer-events: auto;\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          gap: 4px;\n          /* 位置由JS直接设置mic-button-wrapper定位 */\n        }\n\n        #listening-text {\n          font-size: 12px;\n          color: rgba(128, 128, 128, 0.7);\n          user-select: none;\n          pointer-events: none;\n          font-weight: 500;\n          opacity: 0;\n          transition: opacity 0.3s ease;\n          height: 16px;\n          line-height: 16px;\n        }\n        #listening-text.visible {\n          opacity: 1;\n        }\n\n        #mic-button {\n          background: none;\n          border: none;\n          padding: 0;\n          outline: none;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          filter: none;\n          transition: filter 0.3s ease;\n\n          width: 68px;\n          height: 68px;\n          cursor: grab;\n          /* 不再设置fixed定位，由wrapper定位 */\n        }\n        #mic-button.recording {\n          filter: drop-shadow(0 0 5px red);\n        }\n        #mic-button img {\n          width: 48px;\n          height: 48px;\n          user-select: none;\n          pointer-events: none;\n          -webkit-user-drag: none;\n        }\n\n        /* 语言和声纹识别区域样式 */\n        #controls-container {\n          max-width: 700px;\n          margin: 20px auto 12px auto;\n          font-family: Arial, sans-serif;\n          color: white;\n          display: flex;\n          align-items: center;\n          gap: 20px;\n          user-select: none;\n        }\n        #controls-container label {\n          font-size: 14px;\n          user-select: none;\n        }\n        #langInput {\n          padding: 4px;\n          font-size: 14px;\n          width: 120px;\n          background-color: #333;\n          border: 1px solid #666;\n          border-radius: 3px;\n          color: white;\n          user-select: text;\n        }\n        #speakerVerificationLabel {\n          display: flex;\n          align-items: center;\n          font-size: 14px;\n          user-select: none;\n        }\n        #speakerVerificationLabel input {\n          margin-right: 6px;\n        }\n\n        /* 新增声纹录音按钮样式 */\n        #speaker-record-button {\n          background: #444;\n          border: 1px solid #666;\n          border-radius: 6px;\n          color: white;\n          padding: 6px 14px;\n          font-size: 14px;\n          cursor: pointer;\n          user-select: none;\n          transition: background-color 0.3s ease;\n          outline: none;\n        }\n        #speaker-record-button:hover:not(:disabled) {\n          background-color: #666;\n        }\n        #speaker-record-status {\n          margin-top: 6px;\n          font-size: 12px;\n          color: #ccc;\n          min-height: 18px;\n          font-family: monospace;\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"mic-button-wrapper\",\n      ref: micButtonRef,\n      style: {\n        left: 26,\n        top: 26,\n        position: 'fixed'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"listening-text\",\n        className: isRecording ? 'visible' : '',\n        \"aria-live\": \"polite\",\n        role: \"status\",\n        children: \"\\u8046\\u542C\\u4E2D...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"mic-button\",\n        className: isRecording ? 'recording' : '',\n        onClick: () => isRecording ? stopRecording() : startRecording(),\n        \"aria-label\": isRecording ? '停止录音' : '开始录音',\n        title: isRecording ? '点击停止录音' : '点击开始录音',\n        type: \"button\",\n        disabled: isSpeakerRecording,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/core/client/ai-butler/image/mic-icon.png\",\n          alt: \"\\u9EA6\\u514B\\u98CE\",\n          draggable: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 556,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 536,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"controls-container\",\n      \"aria-label\": \"\\u8BED\\u97F3\\u8BC6\\u522B\\u8BBE\\u7F6E\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"langInput\",\n        children: \"\\u8BED\\u8A00\\uFF1A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"langInput\",\n        type: \"text\",\n        value: lang,\n        onChange: e => setLang(e.target.value),\n        disabled: isRecording || isSpeakerRecording,\n        placeholder: \"auto\",\n        autoComplete: \"off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        id: \"speakerVerificationLabel\",\n        htmlFor: \"speakerVerificationCheckbox\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"speakerVerificationCheckbox\",\n          type: \"checkbox\",\n          checked: speakerVerification,\n          disabled: isRecording || isSpeakerRecording,\n          onChange: e => setSpeakerVerification(e.target.checked)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 578,\n          columnNumber: 11\n        }, this), \"\\u58F0\\u7EB9\\u8BC6\\u522B\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 577,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"speaker-record-button\",\n        onClick: startSpeakerRecording,\n        disabled: isRecording || isSpeakerRecording,\n        type: \"button\",\n        \"aria-live\": \"polite\",\n        \"aria-label\": \"\\u5F55\\u5236\\u58F0\\u7EB9\",\n        title: \"\\u5F55\\u5236\\u7EA62\\u79D2\\u58F0\\u97F3\\u7528\\u4E8E\\u58F0\\u7EB9\\u8BC6\\u522B\\uFF0C\\u5F55\\u5236\\u5B8C\\u6210\\u81EA\\u52A8\\u4E0A\\u4F20\",\n        children: \"\\u5F55\\u5236\\u58F0\\u7EB9 (2\\u79D2)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 589,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 7\n    }, this), speakerUploadStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"speaker-record-status\",\n      role: \"alert\",\n      \"aria-live\": \"polite\",\n      \"aria-atomic\": \"true\",\n      style: {\n        maxWidth: 700,\n        margin: '4px auto 0 auto'\n      },\n      children: speakerUploadStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 604,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"transcriptionResult\",\n      style: {\n        maxWidth: 700,\n        margin: '12px auto 20px auto',\n        fontFamily: 'Arial, sans-serif',\n        whiteSpace: 'pre-wrap',\n        backgroundColor: 'transparent',\n        padding: 10,\n        border: '1px solid transparent',\n        borderRadius: 5,\n        minHeight: 150,\n        fontFamily: 'monospace',\n        fontSize: 14,\n        overflowY: 'auto',\n        maxHeight: 300,\n        userSelect: 'text',\n        color: transcription ? 'white' : 'rgba(255, 255, 255, 0.5)'\n      },\n      children: transcription || '识别文字展示区...'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 616,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(AudioTranscriber, \"KFCnyXNAcRNz4qWVUJFY3Z8oswk=\", false, function () {\n  return [useRecorder];\n});\n_c = AudioTranscriber;\nvar _c;\n$RefreshReg$(_c, \"AudioTranscriber\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useRecorder","jsxDEV","_jsxDEV","Fragment","_Fragment","AudioTranscriber","_s","isRecording","setIsRecording","transcription","setTranscription","lang","setLang","localStorage","getItem","speakerVerification","setSpeakerVerification","recorder","wsRef","intervalRef","micButtonRef","isDraggingRef","offsetXRef","offsetYRef","storageKey","isSpeakerRecording","setIsSpeakerRecording","speakerUploadStatus","setSpeakerUploadStatus","speakerRecorderRef","speakerAudioChunksRef","sendTextMessage","text","trim","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","console","log","error","stopRecording","stopSpeakerRecording","setItem","toString","startRecording","navigator","mediaDevices","getUserMedia","audio","then","params","push","encodeURIComponent","queryStr","length","join","wsUrl","ws","WebSocket","binaryType","onopen","start","catch","e","alert","message","close","current","setInterval","readyState","audioBlob","getAudioBlob","size","send","clearBuffer","onmessage","evt","resJson","parse","code","recognizedText","prev","onclose","onerror","stop","clearInterval","startSpeakerRecording","stream","options","mimeType","mediaRecorder","MediaRecorder","ondataavailable","event","onstop","blob","Blob","type","formData","FormData","append","uploadUrl","res","result","err","getTracks","forEach","track","setTimeout","state","button","savedPosStr","left","top","pos","style","position","zIndex","cursor","onMouseDown","clientX","offsetLeft","clientY","offsetTop","preventDefault","onMouseMove","newLeft","newTop","maxLeft","window","innerWidth","offsetWidth","maxTop","innerHeight","offsetHeight","Math","min","max","onMouseUp","onTouchStart","touches","touch","onTouchMove","onTouchEnd","addEventListener","document","passive","removeEventListener","children","fileName","_jsxFileName","lineNumber","columnNumber","id","ref","className","role","onClick","title","disabled","src","alt","draggable","htmlFor","value","onChange","target","placeholder","autoComplete","checked","maxWidth","margin","fontFamily","whiteSpace","backgroundColor","padding","border","borderRadius","minHeight","fontSize","overflowY","maxHeight","userSelect","color","_c","$RefreshReg$"],"sources":["D:/XM/AI-Sphere-Butler/core/client/src/components/AudioTranscriber.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { useRecorder } from '../hooks/useRecorder';\r\n\r\nexport default function AudioTranscriber() {\r\n  // 录音状态\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  // 转写文本内容\r\n  const [transcription, setTranscription] = useState('');\r\n  // 语言参数，默认 auto\r\n  // 初始化时尝试从 localStorage 读取，避免切换页面重置\r\n  const [lang, setLang] = useState(() => {\r\n    try {\r\n      return localStorage.getItem('audioTranscriberLang') || 'auto';\r\n    } catch {\r\n      return 'auto';\r\n    }\r\n  });\r\n  // 是否开启声纹识别\r\n  // 初始化时尝试从 localStorage 读取，避免切换页面重置\r\n  const [speakerVerification, setSpeakerVerification] = useState(() => {\r\n    try {\r\n      return localStorage.getItem('audioTranscriberSpeakerVerification') === 'true';\r\n    } catch {\r\n      return false;\r\n    }\r\n  });\r\n\r\n  // 自定义录音 Hook，管理录音功能\r\n  const recorder = useRecorder();\r\n\r\n  // WebSocket 实例引用\r\n  const wsRef = useRef(null);\r\n  // 定时发送音频的定时器引用\r\n  const intervalRef = useRef(null);\r\n\r\n  // 拖拽相关引用，仅用于麦克风按钮\r\n  const micButtonRef = useRef(null);\r\n  const isDraggingRef = useRef(false);\r\n  const offsetXRef = useRef(0);\r\n  const offsetYRef = useRef(0);\r\n\r\n  // localStorage 保存位置的 key\r\n  const storageKey = 'audioTranscriberMicButtonPosition';\r\n\r\n  // 新增声纹识别录音状态和上传状态\r\n  const [isSpeakerRecording, setIsSpeakerRecording] = useState(false);\r\n  const [speakerUploadStatus, setSpeakerUploadStatus] = useState('');\r\n  const speakerRecorderRef = useRef(null);\r\n  const speakerAudioChunksRef = useRef([]);\r\n\r\n  /**\r\n   * 发送文本消息到 LLM 服务\r\n   * @param {string} text - 要发送的文本\r\n   */\r\n  const sendTextMessage = async (text) => {\r\n    if (!text.trim()) return;\r\n\r\n    try {\r\n      const response = await fetch('https://192.168.1.70:6010/qwener', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ text }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('网络响应失败，状态码: ' + response.status);\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('文本发送成功，服务器返回：', data);\r\n    } catch (error) {\r\n      console.error('文本发送失败：', error);\r\n    }\r\n  };\r\n\r\n  // 组件卸载时清理资源\r\n  // 优化：仅停止录音和释放资源，如果页面切换卸载了组件，则资源释放正常\r\n  useEffect(() => {\r\n    return () => {\r\n      stopRecording();\r\n      stopSpeakerRecording();\r\n    };\r\n  }, []);\r\n\r\n  // 监听语言和声纹识别开关的变化，保存状态到 localStorage，确保切换页时记忆选择\r\n  useEffect(() => {\r\n    try {\r\n      localStorage.setItem('audioTranscriberLang', lang);\r\n    } catch {}\r\n  }, [lang]);\r\n\r\n  useEffect(() => {\r\n    try {\r\n      localStorage.setItem('audioTranscriberSpeakerVerification', speakerVerification.toString());\r\n    } catch {}\r\n  }, [speakerVerification]);\r\n\r\n  /**\r\n   * 启动录音并建立 WebSocket 连接\r\n   */\r\n  function startRecording() {\r\n    if (isRecording) return;\r\n\r\n    // 先请求麦克风权限\r\n    navigator.mediaDevices.getUserMedia({ audio: true })\r\n      .then(() => {\r\n        // 根据语言和声纹识别参数拼接 WebSocket URL 查询参数\r\n        let params = [];\r\n        if (lang) params.push(`lang=${encodeURIComponent(lang)}`);\r\n        if (speakerVerification) params.push('sv=1'); // 声纹识别参数，勾选时添加\r\n        const queryStr = params.length > 0 ? `?${params.join('&')}` : '';\r\n\r\n        // 请根据实际服务器地址修改此处 ws 地址和端口\r\n        const wsUrl = `ws://192.168.168.77:6007/ws/transcribe${queryStr}`;\r\n        const ws = new WebSocket(wsUrl);\r\n        ws.binaryType = 'arraybuffer';\r\n\r\n        ws.onopen = () => {\r\n          console.log('WebSocket 已连接');\r\n\r\n          // 启动录音\r\n          recorder.start().catch((e) => {\r\n            alert('启动录音失败: ' + e.message);\r\n            ws.close();\r\n          });\r\n\r\n          // 定时发送音频数据（每 500ms 发送一次）\r\n          intervalRef.current = setInterval(() => {\r\n            if (ws.readyState === 1) {\r\n              const audioBlob = recorder.getAudioBlob();\r\n              if (audioBlob.size > 0) {\r\n                console.log('发送音频数据，大小：', audioBlob.size);\r\n                ws.send(audioBlob);\r\n                recorder.clearBuffer();\r\n              }\r\n            }\r\n          }, 500);\r\n        };\r\n\r\n        ws.onmessage = (evt) => {\r\n          try {\r\n            const resJson = JSON.parse(evt.data);\r\n            if (resJson.code === 0) {\r\n              // 收到转写正确结果\r\n              const recognizedText = resJson.data || '无识别结果';\r\n\r\n              // 更新转写文本展示\r\n              setTranscription((prev) => (prev ? prev + '\\n' + recognizedText : recognizedText));\r\n\r\n              // 识别到有效文本时，发送给后端 LLM 服务\r\n              if (recognizedText && recognizedText.trim() && recognizedText !== '无识别结果') {\r\n                sendTextMessage(recognizedText);\r\n              }\r\n            } else {\r\n              // 其它code（如2）不显示也不发送\r\n              // 如果需要显示错误或提示，可以在这里添加逻辑\r\n              // 当前忽略非0 code消息\r\n            }\r\n          } catch (e) {\r\n            console.error('解析转写消息失败', e);\r\n            setTranscription((prev) => (prev ? prev + '\\n' + evt.data : evt.data));\r\n          }\r\n        };\r\n\r\n        ws.onclose = () => {\r\n          console.log('WebSocket 已关闭');\r\n          stopRecording();\r\n        };\r\n\r\n        ws.onerror = (e) => {\r\n          console.error('WebSocket 错误', e);\r\n        };\r\n\r\n        wsRef.current = ws;\r\n        setIsRecording(true);\r\n      })\r\n      .catch((error) => {\r\n        alert('请求麦克风权限失败: ' + error.message);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * 停止录音并关闭 WebSocket 连接\r\n   */\r\n  function stopRecording() {\r\n    if (!isRecording) return;\r\n\r\n    if (wsRef.current) {\r\n      wsRef.current.close();\r\n      wsRef.current = null;\r\n    }\r\n    recorder.stop();\r\n\r\n    if (intervalRef.current) {\r\n      clearInterval(intervalRef.current);\r\n      intervalRef.current = null;\r\n    }\r\n\r\n    setIsRecording(false);\r\n  }\r\n\r\n  /**\r\n   * 新增：开始录制2秒音频用于声纹识别\r\n   */\r\n  function startSpeakerRecording() {\r\n    if (isSpeakerRecording) return;\r\n\r\n    setSpeakerUploadStatus('请求麦克风权限...');\r\n    navigator.mediaDevices.getUserMedia({ audio: true })\r\n      .then((stream) => {\r\n        setSpeakerUploadStatus('开始录音2秒...');\r\n        speakerAudioChunksRef.current = [];\r\n        const options = { mimeType: 'audio/wav' }; // 一些浏览器不支持wav mimeType，下面用默认就好\r\n        let mediaRecorder;\r\n        try {\r\n          mediaRecorder = new MediaRecorder(stream, options);\r\n        } catch (e) {\r\n          // 失败则不传mimeType，使用默认格式\r\n          mediaRecorder = new MediaRecorder(stream);\r\n        }\r\n        speakerRecorderRef.current = mediaRecorder;\r\n\r\n        mediaRecorder.ondataavailable = (event) => {\r\n          if (event.data && event.data.size > 0) {\r\n            speakerAudioChunksRef.current.push(event.data);\r\n          }\r\n        };\r\n\r\n        mediaRecorder.onstop = async () => {\r\n          setSpeakerUploadStatus('录音结束，准备上传...');\r\n          const blob = new Blob(speakerAudioChunksRef.current, { type: 'audio/wav' });\r\n\r\n          // 发送上传请求（请修改URL为后端实际接口）\r\n          try {\r\n            const formData = new FormData();\r\n            formData.append('file', blob, 'speaker.wav');\r\n\r\n            // 这里示例用POST到服务器上传接口，路径请根据后端实际修改\r\n            const uploadUrl = 'http://192.168.168.77:6007/api/uploadSpeaker';\r\n\r\n            const res = await fetch(uploadUrl, {\r\n              method: 'POST',\r\n              body: formData,\r\n            });\r\n\r\n            if (!res.ok) {\r\n              throw new Error(`上传失败，状态码: ${res.status}`);\r\n            }\r\n            const result = await res.json();\r\n            setSpeakerUploadStatus('上传成功');\r\n            console.log('上传成功，服务器返回：', result);\r\n          } catch (err) {\r\n            setSpeakerUploadStatus('上传失败: ' + err.message);\r\n            console.error('上传失败', err);\r\n          }\r\n          // 停止所有音频轨道释放麦克风\r\n          stream.getTracks().forEach(track => track.stop());\r\n          setTimeout(() => setSpeakerUploadStatus(''), 3000);\r\n          setIsSpeakerRecording(false);\r\n        };\r\n\r\n        mediaRecorder.start();\r\n\r\n        setIsSpeakerRecording(true);\r\n\r\n        // 2秒后停止录音\r\n        setTimeout(() => {\r\n          if (speakerRecorderRef.current && speakerRecorderRef.current.state !== 'inactive') {\r\n            speakerRecorderRef.current.stop();\r\n          }\r\n        }, 2000);\r\n      })\r\n      .catch((err) => {\r\n        setSpeakerUploadStatus('获取麦克风权限失败: ' + err.message);\r\n        console.error('获取麦克风权限失败', err);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * 新增：停止声纹录音（如果需要手动停止）\r\n   */\r\n  function stopSpeakerRecording() {\r\n    if (speakerRecorderRef.current && speakerRecorderRef.current.state !== 'inactive') {\r\n      speakerRecorderRef.current.stop();\r\n      setIsSpeakerRecording(false);\r\n    }\r\n  }\r\n\r\n  // 拖拽事件处理，仅麦克风按钮\r\n  useEffect(() => {\r\n    if (!micButtonRef.current) return;\r\n    const button = micButtonRef.current;\r\n\r\n    // 读取并恢复按钮位置\r\n    const savedPosStr = localStorage.getItem(storageKey);\r\n    let left = 26;\r\n    let top = 26;\r\n    if (savedPosStr) {\r\n      try {\r\n        const pos = JSON.parse(savedPosStr);\r\n        if (\r\n          typeof pos.left === 'number' &&\r\n          typeof pos.top === 'number' &&\r\n          pos.left >= 0 &&\r\n          pos.top >= 0\r\n        ) {\r\n          left = pos.left;\r\n          top = pos.top;\r\n        }\r\n      } catch {\r\n        // 解析失败忽略，使用默认\r\n      }\r\n    }\r\n\r\n    button.style.position = 'fixed';\r\n    button.style.left = `${left}px`;\r\n    button.style.top = `${top}px`;\r\n    button.style.zIndex = '10000';\r\n    button.style.cursor = 'grab';\r\n\r\n    // 拖拽相关变量\r\n    isDraggingRef.current = false;\r\n    offsetXRef.current = 0;\r\n    offsetYRef.current = 0;\r\n\r\n    const onMouseDown = (e) => {\r\n      if (e.button !== 0) return; // 仅左键拖拽\r\n      isDraggingRef.current = true;\r\n      offsetXRef.current = e.clientX - button.offsetLeft;\r\n      offsetYRef.current = e.clientY - button.offsetTop;\r\n      button.style.cursor = 'grabbing';\r\n      e.preventDefault();\r\n    };\r\n    const onMouseMove = (e) => {\r\n      if (!isDraggingRef.current) return;\r\n      let newLeft = e.clientX - offsetXRef.current;\r\n      let newTop = e.clientY - offsetYRef.current;\r\n\r\n      const maxLeft = window.innerWidth - button.offsetWidth;\r\n      const maxTop = window.innerHeight - button.offsetHeight;\r\n      newLeft = Math.min(Math.max(0, newLeft), maxLeft);\r\n      newTop = Math.min(Math.max(0, newTop), maxTop);\r\n\r\n      button.style.left = `${newLeft}px`;\r\n      button.style.top = `${newTop}px`;\r\n    };\r\n    const onMouseUp = () => {\r\n      if (!isDraggingRef.current) return;\r\n      isDraggingRef.current = false;\r\n      button.style.cursor = 'grab';\r\n\r\n      // 保存位置\r\n      localStorage.setItem(\r\n        storageKey,\r\n        JSON.stringify({ left: button.offsetLeft, top: button.offsetTop })\r\n      );\r\n    };\r\n\r\n    const onTouchStart = (e) => {\r\n      if (e.touches.length === 0) return;\r\n      isDraggingRef.current = true;\r\n      const touch = e.touches[0];\r\n      offsetXRef.current = touch.clientX - button.offsetLeft;\r\n      offsetYRef.current = touch.clientY - button.offsetTop;\r\n      button.style.cursor = 'grabbing';\r\n    };\r\n    const onTouchMove = (e) => {\r\n      if (!isDraggingRef.current || e.touches.length === 0) return;\r\n      const touch = e.touches[0];\r\n      let newLeft = touch.clientX - offsetXRef.current;\r\n      let newTop = touch.clientY - offsetYRef.current;\r\n\r\n      const maxLeft = window.innerWidth - button.offsetWidth;\r\n      const maxTop = window.innerHeight - button.offsetHeight;\r\n      newLeft = Math.min(Math.max(0, newLeft), maxLeft);\r\n      newTop = Math.min(Math.max(0, newTop), maxTop);\r\n\r\n      button.style.left = `${newLeft}px`;\r\n      button.style.top = `${newTop}px`;\r\n\r\n      e.preventDefault();\r\n    };\r\n    const onTouchEnd = () => {\r\n      if (!isDraggingRef.current) return;\r\n      isDraggingRef.current = false;\r\n      button.style.cursor = 'grab';\r\n\r\n      // 保存位置\r\n      localStorage.setItem(\r\n        storageKey,\r\n        JSON.stringify({ left: button.offsetLeft, top: button.offsetTop })\r\n      );\r\n    };\r\n\r\n    button.addEventListener('mousedown', onMouseDown);\r\n    document.addEventListener('mousemove', onMouseMove);\r\n    document.addEventListener('mouseup', onMouseUp);\r\n\r\n    button.addEventListener('touchstart', onTouchStart, { passive: false });\r\n    document.addEventListener('touchmove', onTouchMove, { passive: false });\r\n    document.addEventListener('touchend', onTouchEnd);\r\n\r\n    return () => {\r\n      button.removeEventListener('mousedown', onMouseDown);\r\n      document.removeEventListener('mousemove', onMouseMove);\r\n      document.removeEventListener('mouseup', onMouseUp);\r\n\r\n      button.removeEventListener('touchstart', onTouchStart);\r\n      document.removeEventListener('touchmove', onTouchMove);\r\n      document.removeEventListener('touchend', onTouchEnd);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <style>{`\r\n        /* 麦克风按钮样式 */\r\n        #mic-button-wrapper {\r\n          position: fixed;\r\n          z-index: 10000;\r\n          user-select: none;\r\n          pointer-events: auto;\r\n          display: flex;\r\n          flex-direction: column;\r\n          align-items: center;\r\n          gap: 4px;\r\n          /* 位置由JS直接设置mic-button-wrapper定位 */\r\n        }\r\n\r\n        #listening-text {\r\n          font-size: 12px;\r\n          color: rgba(128, 128, 128, 0.7);\r\n          user-select: none;\r\n          pointer-events: none;\r\n          font-weight: 500;\r\n          opacity: 0;\r\n          transition: opacity 0.3s ease;\r\n          height: 16px;\r\n          line-height: 16px;\r\n        }\r\n        #listening-text.visible {\r\n          opacity: 1;\r\n        }\r\n\r\n        #mic-button {\r\n          background: none;\r\n          border: none;\r\n          padding: 0;\r\n          outline: none;\r\n          display: flex;\r\n          align-items: center;\r\n          justify-content: center;\r\n          filter: none;\r\n          transition: filter 0.3s ease;\r\n\r\n          width: 68px;\r\n          height: 68px;\r\n          cursor: grab;\r\n          /* 不再设置fixed定位，由wrapper定位 */\r\n        }\r\n        #mic-button.recording {\r\n          filter: drop-shadow(0 0 5px red);\r\n        }\r\n        #mic-button img {\r\n          width: 48px;\r\n          height: 48px;\r\n          user-select: none;\r\n          pointer-events: none;\r\n          -webkit-user-drag: none;\r\n        }\r\n\r\n        /* 语言和声纹识别区域样式 */\r\n        #controls-container {\r\n          max-width: 700px;\r\n          margin: 20px auto 12px auto;\r\n          font-family: Arial, sans-serif;\r\n          color: white;\r\n          display: flex;\r\n          align-items: center;\r\n          gap: 20px;\r\n          user-select: none;\r\n        }\r\n        #controls-container label {\r\n          font-size: 14px;\r\n          user-select: none;\r\n        }\r\n        #langInput {\r\n          padding: 4px;\r\n          font-size: 14px;\r\n          width: 120px;\r\n          background-color: #333;\r\n          border: 1px solid #666;\r\n          border-radius: 3px;\r\n          color: white;\r\n          user-select: text;\r\n        }\r\n        #speakerVerificationLabel {\r\n          display: flex;\r\n          align-items: center;\r\n          font-size: 14px;\r\n          user-select: none;\r\n        }\r\n        #speakerVerificationLabel input {\r\n          margin-right: 6px;\r\n        }\r\n\r\n        /* 新增声纹录音按钮样式 */\r\n        #speaker-record-button {\r\n          background: #444;\r\n          border: 1px solid #666;\r\n          border-radius: 6px;\r\n          color: white;\r\n          padding: 6px 14px;\r\n          font-size: 14px;\r\n          cursor: pointer;\r\n          user-select: none;\r\n          transition: background-color 0.3s ease;\r\n          outline: none;\r\n        }\r\n        #speaker-record-button:hover:not(:disabled) {\r\n          background-color: #666;\r\n        }\r\n        #speaker-record-status {\r\n          margin-top: 6px;\r\n          font-size: 12px;\r\n          color: #ccc;\r\n          min-height: 18px;\r\n          font-family: monospace;\r\n          white-space: nowrap;\r\n          overflow: hidden;\r\n          text-overflow: ellipsis;\r\n        }\r\n      `}</style>\r\n\r\n      {/* 麦克风及“聆听中”容器，控制整体定位、拖拽 */}\r\n      <div\r\n        id=\"mic-button-wrapper\"\r\n        ref={micButtonRef}\r\n        style={{ left: 26, top: 26, position: 'fixed' }}\r\n      >\r\n        {/* 聆听中提示 */}\r\n        <div id=\"listening-text\" className={isRecording ? 'visible' : ''} aria-live=\"polite\" role=\"status\">\r\n          聆听中...\r\n        </div>\r\n\r\n        {/* 麦克风按钮 */}\r\n        <button\r\n          id=\"mic-button\"\r\n          className={isRecording ? 'recording' : ''}\r\n          onClick={() => (isRecording ? stopRecording() : startRecording())}\r\n          aria-label={isRecording ? '停止录音' : '开始录音'}\r\n          title={isRecording ? '点击停止录音' : '点击开始录音'}\r\n          type=\"button\"\r\n          disabled={isSpeakerRecording}\r\n        >\r\n          <img\r\n            src=\"/core/client/ai-butler/image/mic-icon.png\"\r\n            alt=\"麦克风\"\r\n            draggable={false}\r\n          />\r\n        </button>\r\n      </div>\r\n\r\n      {/* 语言和声纹识别控制 */}\r\n      <div id=\"controls-container\" aria-label=\"语音识别设置\">\r\n        <label htmlFor=\"langInput\">语言：</label>\r\n        <input\r\n          id=\"langInput\"\r\n          type=\"text\"\r\n          value={lang}\r\n          onChange={(e) => setLang(e.target.value)}\r\n          disabled={isRecording || isSpeakerRecording}\r\n          placeholder=\"auto\"\r\n          autoComplete=\"off\"\r\n        />\r\n\r\n        <label id=\"speakerVerificationLabel\" htmlFor=\"speakerVerificationCheckbox\">\r\n          <input\r\n            id=\"speakerVerificationCheckbox\"\r\n            type=\"checkbox\"\r\n            checked={speakerVerification}\r\n            disabled={isRecording || isSpeakerRecording}\r\n            onChange={(e) => setSpeakerVerification(e.target.checked)}\r\n          />\r\n          声纹识别\r\n        </label>\r\n\r\n        {/* 新增声纹录音按钮 */}\r\n        <button\r\n          id=\"speaker-record-button\"\r\n          onClick={startSpeakerRecording}\r\n          disabled={isRecording || isSpeakerRecording}\r\n          type=\"button\"\r\n          aria-live=\"polite\"\r\n          aria-label=\"录制声纹\"\r\n          title=\"录制约2秒声音用于声纹识别，录制完成自动上传\"\r\n        >\r\n          录制声纹 (2秒)\r\n        </button>\r\n      </div>\r\n\r\n      {/* 声纹上传状态显示 */}\r\n      {speakerUploadStatus && (\r\n        <div\r\n          id=\"speaker-record-status\"\r\n          role=\"alert\"\r\n          aria-live=\"polite\"\r\n          aria-atomic=\"true\"\r\n          style={{ maxWidth: 700, margin: '4px auto 0 auto' }}\r\n        >\r\n          {speakerUploadStatus}\r\n        </div>\r\n      )}\r\n\r\n      {/* 转写结果展示 */}\r\n      <div\r\n        id=\"transcriptionResult\"\r\n        style={{\r\n          maxWidth: 700,\r\n          margin: '12px auto 20px auto',\r\n          fontFamily: 'Arial, sans-serif',\r\n          whiteSpace: 'pre-wrap',\r\n          backgroundColor: 'transparent',\r\n          padding: 10,\r\n          border: '1px solid transparent',\r\n          borderRadius: 5,\r\n          minHeight: 150,\r\n          fontFamily: 'monospace',\r\n          fontSize: 14,\r\n          overflowY: 'auto',\r\n          maxHeight: 300,\r\n          userSelect: 'text',\r\n          color: transcription ? 'white' : 'rgba(255, 255, 255, 0.5)',\r\n        }}\r\n      >\r\n        {transcription || '识别文字展示区...'}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}