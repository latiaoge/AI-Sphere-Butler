{"ast":null,"code":"var _jsxFileName = \"D:\\\\XM\\\\AI-Sphere-Butler\\\\core\\\\client\\\\src\\\\components\\\\AudioTranscriber.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useRecorderContext } from '../contexts/RecorderProvider'; // 注意路径根据实际调整\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function AudioTranscriber() {\n  _s();\n  // 从全局录音上下文中取状态和操作\n  const {\n    isRecording,\n    transcription,\n    lang,\n    speakerVerification,\n    setLang,\n    setSpeakerVerification,\n    startRecording,\n    stopRecording,\n    setTranscription\n  } = useRecorderContext();\n\n  // 拖拽相关引用，仅用于麦克风按钮\n  const micButtonRef = useRef(null);\n  const isDraggingRef = useRef(false);\n  const offsetXRef = useRef(0);\n  const offsetYRef = useRef(0);\n\n  // localStorage 保存位置的 key\n  const storageKey = 'audioTranscriberMicButtonPosition';\n\n  // 新增声纹识别录音状态和上传状态（保持本组件私有状态）\n  const [isSpeakerRecording, setIsSpeakerRecording] = useState(false);\n  const [speakerUploadStatus, setSpeakerUploadStatus] = useState('');\n  const speakerRecorderRef = useRef(null);\n  const speakerAudioChunksRef = useRef([]);\n\n  /**\r\n   * 发送文本消息到 LLM 服务\r\n   * @param {string} text - 要发送的文本\r\n   */\n  const sendTextMessage = async text => {\n    if (!text.trim()) return;\n    try {\n      const response = await fetch('https://192.168.1.70:6010/qwener', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text\n        })\n      });\n      if (!response.ok) {\n        throw new Error('网络响应失败，状态码: ' + response.status);\n      }\n      const data = await response.json();\n      console.log('文本发送成功，服务器返回：', data);\n    } catch (error) {\n      console.error('文本发送失败：', error);\n    }\n  };\n\n  // 组件卸载时清理资源\n  useEffect(() => {\n    return () => {\n      stopRecording();\n      stopSpeakerRecording();\n    };\n  }, []); // 这里改成空依赖数组，避免多次调用\n\n  // 监听语言和声纹识别开关的变化，保存状态到 localStorage，确保切换页时记忆选择\n  useEffect(() => {\n    try {\n      localStorage.setItem('audioTranscriberLang', lang);\n    } catch {}\n  }, [lang]);\n  useEffect(() => {\n    try {\n      localStorage.setItem('audioTranscriberSpeakerVerification', speakerVerification.toString());\n    } catch {}\n  }, [speakerVerification]);\n\n  /**\r\n   * 新增：开始录制2秒音频用于声纹识别\r\n   */\n  function startSpeakerRecording() {\n    if (isSpeakerRecording) return;\n    setSpeakerUploadStatus('请求麦克风权限...');\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => {\n      setSpeakerUploadStatus('开始录音2秒...');\n      speakerAudioChunksRef.current = [];\n      const options = {\n        mimeType: 'audio/wav'\n      }; // 一些浏览器不支持wav mimeType，下面用默认就好\n      let mediaRecorder;\n      try {\n        mediaRecorder = new MediaRecorder(stream, options);\n      } catch (e) {\n        // 失败则不传mimeType，使用默认格式\n        mediaRecorder = new MediaRecorder(stream);\n      }\n      speakerRecorderRef.current = mediaRecorder;\n      mediaRecorder.ondataavailable = event => {\n        if (event.data && event.data.size > 0) {\n          speakerAudioChunksRef.current.push(event.data);\n        }\n      };\n      mediaRecorder.onstop = async () => {\n        setSpeakerUploadStatus('录音结束，准备上传...');\n        const blob = new Blob(speakerAudioChunksRef.current, {\n          type: 'audio/wav'\n        });\n\n        // 发送上传请求（请修改URL为后端实际接口）\n        try {\n          const formData = new FormData();\n          formData.append('file', blob, 'speaker.wav');\n\n          // 这里示例用POST到服务器上传接口，路径请根据后端实际修改\n          const uploadUrl = 'http://192.168.168.77:6007/api/uploadSpeaker';\n          const res = await fetch(uploadUrl, {\n            method: 'POST',\n            body: formData\n          });\n          if (!res.ok) {\n            throw new Error(`上传失败，状态码: ${res.status}`);\n          }\n          const result = await res.json();\n          setSpeakerUploadStatus('上传成功');\n          console.log('上传成功，服务器返回：', result);\n        } catch (err) {\n          setSpeakerUploadStatus('上传失败: ' + err.message);\n          console.error('上传失败', err);\n        }\n        // 停止所有音频轨道释放麦克风\n        stream.getTracks().forEach(track => track.stop());\n        setTimeout(() => setSpeakerUploadStatus(''), 3000);\n        setIsSpeakerRecording(false);\n      };\n      mediaRecorder.start();\n      setIsSpeakerRecording(true);\n\n      // 2秒后停止录音\n      setTimeout(() => {\n        if (speakerRecorderRef.current && speakerRecorderRef.current.state !== 'inactive') {\n          speakerRecorderRef.current.stop();\n        }\n      }, 2000);\n    }).catch(err => {\n      setSpeakerUploadStatus('获取麦克风权限失败: ' + err.message);\n      console.error('获取麦克风权限失败', err);\n    });\n  }\n\n  /**\r\n   * 新增：停止声纹录音（如果需要手动停止）\r\n   */\n  function stopSpeakerRecording() {\n    if (speakerRecorderRef.current && speakerRecorderRef.current.state !== 'inactive') {\n      speakerRecorderRef.current.stop();\n      setIsSpeakerRecording(false);\n    }\n  }\n\n  // 拖拽事件处理，仅麦克风按钮\n  useEffect(() => {\n    if (!micButtonRef.current) return;\n    const button = micButtonRef.current;\n\n    // 读取并恢复按钮位置\n    const savedPosStr = localStorage.getItem(storageKey);\n    let left = 26;\n    let top = 26;\n    if (savedPosStr) {\n      try {\n        const pos = JSON.parse(savedPosStr);\n        if (typeof pos.left === 'number' && typeof pos.top === 'number' && pos.left >= 0 && pos.top >= 0) {\n          left = pos.left;\n          top = pos.top;\n        }\n      } catch {\n        // 解析失败忽略，使用默认\n      }\n    }\n    button.style.position = 'fixed';\n    button.style.left = `${left}px`;\n    button.style.top = `${top}px`;\n    button.style.zIndex = '10000';\n    button.style.cursor = 'grab';\n\n    // 拖拽相关变量\n    isDraggingRef.current = false;\n    offsetXRef.current = 0;\n    offsetYRef.current = 0;\n    const onMouseDown = e => {\n      if (e.button !== 0) return; // 仅左键拖拽\n      isDraggingRef.current = true;\n      offsetXRef.current = e.clientX - button.offsetLeft;\n      offsetYRef.current = e.clientY - button.offsetTop;\n      button.style.cursor = 'grabbing';\n      e.preventDefault();\n    };\n    const onMouseMove = e => {\n      if (!isDraggingRef.current) return;\n      let newLeft = e.clientX - offsetXRef.current;\n      let newTop = e.clientY - offsetYRef.current;\n      const maxLeft = window.innerWidth - button.offsetWidth;\n      const maxTop = window.innerHeight - button.offsetHeight;\n      newLeft = Math.min(Math.max(0, newLeft), maxLeft);\n      newTop = Math.min(Math.max(0, newTop), maxTop);\n      button.style.left = `${newLeft}px`;\n      button.style.top = `${newTop}px`;\n    };\n    const onMouseUp = () => {\n      if (!isDraggingRef.current) return;\n      isDraggingRef.current = false;\n      button.style.cursor = 'grab';\n\n      // 保存位置\n      localStorage.setItem(storageKey, JSON.stringify({\n        left: button.offsetLeft,\n        top: button.offsetTop\n      }));\n    };\n    const onTouchStart = e => {\n      if (e.touches.length === 0) return;\n      isDraggingRef.current = true;\n      const touch = e.touches[0];\n      offsetXRef.current = touch.clientX - button.offsetLeft;\n      offsetYRef.current = touch.clientY - button.offsetTop;\n      button.style.cursor = 'grabbing';\n    };\n    const onTouchMove = e => {\n      if (!isDraggingRef.current || e.touches.length === 0) return;\n      const touch = e.touches[0];\n      let newLeft = touch.clientX - offsetXRef.current;\n      let newTop = touch.clientY - offsetYRef.current;\n      const maxLeft = window.innerWidth - button.offsetWidth;\n      const maxTop = window.innerHeight - button.offsetHeight;\n      newLeft = Math.min(Math.max(0, newLeft), maxLeft);\n      newTop = Math.min(Math.max(0, newTop), maxTop);\n      button.style.left = `${newLeft}px`;\n      button.style.top = `${newTop}px`;\n      e.preventDefault();\n    };\n    const onTouchEnd = () => {\n      if (!isDraggingRef.current) return;\n      isDraggingRef.current = false;\n      button.style.cursor = 'grab';\n\n      // 保存位置\n      localStorage.setItem(storageKey, JSON.stringify({\n        left: button.offsetLeft,\n        top: button.offsetTop\n      }));\n    };\n    button.addEventListener('mousedown', onMouseDown);\n    document.addEventListener('mousemove', onMouseMove);\n    document.addEventListener('mouseup', onMouseUp);\n    button.addEventListener('touchstart', onTouchStart, {\n      passive: false\n    });\n    document.addEventListener('touchmove', onTouchMove, {\n      passive: false\n    });\n    document.addEventListener('touchend', onTouchEnd);\n    return () => {\n      button.removeEventListener('mousedown', onMouseDown);\n      document.removeEventListener('mousemove', onMouseMove);\n      document.removeEventListener('mouseup', onMouseUp);\n      button.removeEventListener('touchstart', onTouchStart);\n      document.removeEventListener('touchmove', onTouchMove);\n      document.removeEventListener('touchend', onTouchEnd);\n    };\n  }, []);\n\n  // 新增波纹动画相关，useState管理波纹数组\n  const [ripples, setRipples] = useState([]);\n  const rippleCountRef = useRef(0);\n  const speakerButtonRef = useRef(null);\n\n  // 录制声纹按钮点击函数封装，附加波纹效果\n  const handleSpeakerRecordClick = event => {\n    if (isRecording || isSpeakerRecording) return; // 禁止多次点击\n\n    createRipple(event);\n    startSpeakerRecording();\n  };\n\n  // 创建波纹，添加到ripples数组\n  const createRipple = event => {\n    if (!speakerButtonRef.current) return;\n    const rect = speakerButtonRef.current.getBoundingClientRect();\n    const size = Math.max(rect.width, rect.height);\n    const x = event.clientX - rect.left - size / 2;\n    const y = event.clientY - rect.top - size / 2;\n    const newRipple = {\n      key: rippleCountRef.current,\n      size,\n      x,\n      y\n    };\n    rippleCountRef.current += 1;\n    setRipples(oldRipples => [...oldRipples, newRipple]);\n\n    // 1秒后自动移除波纹\n    setTimeout(() => {\n      setRipples(oldRipples => oldRipples.filter(r => r.key !== newRipple.key));\n    }, 1000);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"style\", {\n      children: `\n        /* 麦克风按钮样式 */\n        #mic-button-wrapper {\n          position: fixed;\n          z-index: 10000;\n          user-select: none;\n          pointer-events: auto;\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          gap: 4px;\n          /* 位置由JS直接设置mic-button-wrapper定位 */\n        }\n\n        #listening-text {\n          font-size: 12px;\n          color: rgba(128, 128, 128, 0.7);\n          user-select: none;\n          pointer-events: none;\n          font-weight: 500;\n          opacity: 0;\n          transition: opacity 0.3s ease;\n          height: 16px;\n          line-height: 16px;\n        }\n        #listening-text.visible {\n          opacity: 1;\n        }\n\n        #mic-button {\n          background: none;\n          border: none;\n          padding: 0;\n          outline: none;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          filter: none;\n          transition: filter 0.3s ease;\n\n          width: 68px;\n          height: 68px;\n          cursor: grab;\n          /* 不再设置fixed定位，由wrapper定位 */\n        }\n        #mic-button.recording {\n          filter: drop-shadow(0 0 5px red);\n        }\n        #mic-button img {\n          width: 48px;\n          height: 48px;\n          user-select: none;\n          pointer-events: none;\n          -webkit-user-drag: none;\n        }\n\n        /* 语言和声纹识别区域样式 */\n        #controls-container {\n          max-width: 700px;\n          margin: 20px auto 12px auto;\n          font-family: Arial, sans-serif;\n          color: white;\n          display: flex;\n          align-items: center;\n          gap: 20px;\n          user-select: none;\n        }\n        #controls-container label {\n          font-size: 14px;\n          user-select: none;\n        }\n        #langInput {\n          padding: 4px;\n          font-size: 12px;\n          width: 120px;\n          background-color: #333;\n          border: 1px solid #666;\n          border-radius: 3px;\n          color: white;\n          user-select: text;\n        }\n        #speakerVerificationLabel {\n          display: flex;\n          align-items: center;\n          font-size: 8px;\n          user-select: none;\n        }\n        #speakerVerificationLabel input {\n          margin-right: 3px;\n        }\n\n        /* 纯 CSS 玻璃态按钮：录制声纹按钮替换 */\n        #speaker-record-button {\n          position: relative;\n          overflow: hidden;\n          background: rgba(255, 255, 255, 0.1);\n          border-radius: 16px;\n          border: 1px solid rgba(255, 255, 255, 0.3);\n          color: white;\n          padding: 3px 10px;\n          font-size: 16px;\n          font-weight: 600;\n          cursor: pointer;\n          user-select: none;\n          box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);\n          backdrop-filter: blur(12px);\n          -webkit-backdrop-filter: blur(12px);\n          transition: all 0.3s ease;\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          outline: none;\n          border-image: none; /* 去除原动画边框 */\n        }\n        #speaker-record-button:hover:not(:disabled) {\n          background: rgba(255, 255, 255, 0.2);\n          box-shadow: 0 8px 40px rgba(255, 255, 255, 0.3);\n          transform: scale(1.05);\n          filter: brightness(1.1);\n        }\n        #speaker-record-button:disabled {\n          opacity: 0.4;\n          cursor: not-allowed;\n          box-shadow: none;\n          background: rgba(255, 255, 255, 0.05);\n          filter: none;\n          transform: none;\n        }\n\n        /* 额外光泽层 */\n        #speaker-record-button::before {\n          content: '';\n          position: absolute;\n          top: -100%;\n          left: -100%;\n          width: 100%;\n          height: 100%;\n          background: radial-gradient(circle at 10% 10%, rgba(255, 255, 255, 0.3), transparent 10%);\n          pointer-events: none;\n          filter: blur(10px);\n          opacity: 0.6;\n          transition: opacity 0.3s ease;\n          border-radius: inherit;\n          z-index: 0;\n        }\n\n        /* 保留波纹效果的样式 */\n        .ripple {\n          position: absolute;\n          border-radius: 50%;\n          background: rgba(91, 155, 255, 0.7);\n          animation: rippleEffect 1s ease-out;\n          pointer-events: none;\n          transform: scale(0);\n          opacity: 0.75;\n          z-index: 1;\n        }\n\n        @keyframes rippleEffect {\n          to {\n            transform: scale(4);\n            opacity: 0;\n          }\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"mic-button-wrapper\",\n      ref: micButtonRef,\n      style: {\n        left: 26,\n        top: 26,\n        position: 'fixed'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"listening-text\",\n        className: isRecording ? 'visible' : '',\n        \"aria-live\": \"polite\",\n        role: \"status\",\n        children: \"\\u8046\\u542C\\u4E2D...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"mic-button\",\n        className: isRecording ? 'recording' : '',\n        onClick: () => isRecording ? stopRecording() : startRecording(),\n        \"aria-label\": isRecording ? '停止录音' : '开始录音',\n        title: isRecording ? '点击停止录音' : '点击开始录音',\n        type: \"button\",\n        disabled: isSpeakerRecording,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/core/client/ai-butler/image/mic-icon.png\",\n          alt: \"\\u9EA6\\u514B\\u98CE\",\n          draggable: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"controls-container\",\n      \"aria-label\": \"\\u8BED\\u97F3\\u8BC6\\u522B\\u8BBE\\u7F6E\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"langInput\",\n        children: \"\\u8BED\\u8A00\\uFF1A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"langInput\",\n        type: \"text\",\n        value: lang,\n        onChange: e => setLang(e.target.value),\n        disabled: isRecording || isSpeakerRecording,\n        placeholder: \"auto\",\n        autoComplete: \"off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        id: \"speakerVerificationLabel\",\n        htmlFor: \"speakerVerificationCheckbox\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"speakerVerificationCheckbox\",\n          type: \"checkbox\",\n          checked: speakerVerification,\n          disabled: isRecording || isSpeakerRecording,\n          onChange: e => setSpeakerVerification(e.target.checked)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 11\n        }, this), \"\\u58F0\\u7EB9\\u8BC6\\u522B\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"speaker-record-button\",\n        ref: speakerButtonRef,\n        onClick: handleSpeakerRecordClick,\n        disabled: isRecording || isSpeakerRecording,\n        type: \"button\",\n        \"aria-live\": \"polite\",\n        \"aria-label\": \"\\u5F55\\u5236\\u58F0\\u7EB9\",\n        title: \"\\u5F55\\u5236\\u7EA62\\u79D2\\u58F0\\u97F3\\u7528\\u4E8E\\u58F0\\u7EB9\\u8BC6\\u522B\\uFF0C\\u5F55\\u5236\\u5B8C\\u6210\\u81EA\\u52A8\\u4E0A\\u4F20\",\n        children: [\"\\u5F55\\u5236\\u58F0\\u7EB9 (2\\u79D2)\", ripples.map(({\n          key,\n          size,\n          x,\n          y\n        }) => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"ripple\",\n          style: {\n            width: size,\n            height: size,\n            top: y,\n            left: x\n          }\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 527,\n      columnNumber: 7\n    }, this), speakerUploadStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"speaker-record-status\",\n      role: \"alert\",\n      \"aria-live\": \"polite\",\n      \"aria-atomic\": \"true\",\n      style: {\n        maxWidth: 700,\n        margin: '4px auto 0 auto'\n      },\n      children: speakerUploadStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 579,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"transcriptionResult\",\n      style: {\n        maxWidth: 700,\n        margin: '12px auto 20px auto',\n        fontFamily: 'Arial, sans-serif',\n        whiteSpace: 'pre-wrap',\n        backgroundColor: 'transparent',\n        padding: 10,\n        border: '1px solid transparent',\n        borderRadius: 5,\n        minHeight: 150,\n        fontFamily: 'monospace',\n        fontSize: 14,\n        overflowY: 'auto',\n        maxHeight: 300,\n        userSelect: 'text',\n        color: transcription ? 'white' : 'rgba(255, 255, 255, 0.5)'\n      },\n      children: transcription || '识别文字展示区...'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 591,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(AudioTranscriber, \"Dn+sdm5rPuDjbTXZUKYJXbscrN4=\", false, function () {\n  return [useRecorderContext];\n});\n_c = AudioTranscriber;\nvar _c;\n$RefreshReg$(_c, \"AudioTranscriber\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useRecorderContext","jsxDEV","_jsxDEV","Fragment","_Fragment","AudioTranscriber","_s","isRecording","transcription","lang","speakerVerification","setLang","setSpeakerVerification","startRecording","stopRecording","setTranscription","micButtonRef","isDraggingRef","offsetXRef","offsetYRef","storageKey","isSpeakerRecording","setIsSpeakerRecording","speakerUploadStatus","setSpeakerUploadStatus","speakerRecorderRef","speakerAudioChunksRef","sendTextMessage","text","trim","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","console","log","error","stopSpeakerRecording","localStorage","setItem","toString","startSpeakerRecording","navigator","mediaDevices","getUserMedia","audio","then","stream","current","options","mimeType","mediaRecorder","MediaRecorder","e","ondataavailable","event","size","push","onstop","blob","Blob","type","formData","FormData","append","uploadUrl","res","result","err","message","getTracks","forEach","track","stop","setTimeout","start","state","catch","button","savedPosStr","getItem","left","top","pos","parse","style","position","zIndex","cursor","onMouseDown","clientX","offsetLeft","clientY","offsetTop","preventDefault","onMouseMove","newLeft","newTop","maxLeft","window","innerWidth","offsetWidth","maxTop","innerHeight","offsetHeight","Math","min","max","onMouseUp","onTouchStart","touches","length","touch","onTouchMove","onTouchEnd","addEventListener","document","passive","removeEventListener","ripples","setRipples","rippleCountRef","speakerButtonRef","handleSpeakerRecordClick","createRipple","rect","getBoundingClientRect","width","height","x","y","newRipple","key","oldRipples","filter","r","children","fileName","_jsxFileName","lineNumber","columnNumber","id","ref","className","role","onClick","title","disabled","src","alt","draggable","htmlFor","value","onChange","target","placeholder","autoComplete","checked","map","maxWidth","margin","fontFamily","whiteSpace","backgroundColor","padding","border","borderRadius","minHeight","fontSize","overflowY","maxHeight","userSelect","color","_c","$RefreshReg$"],"sources":["D:/XM/AI-Sphere-Butler/core/client/src/components/AudioTranscriber.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { useRecorderContext } from '../contexts/RecorderProvider'; // 注意路径根据实际调整\r\n\r\nexport default function AudioTranscriber() {\r\n  // 从全局录音上下文中取状态和操作\r\n  const {\r\n    isRecording,\r\n    transcription,\r\n    lang,\r\n    speakerVerification,\r\n    setLang,\r\n    setSpeakerVerification,\r\n    startRecording,\r\n    stopRecording,\r\n    setTranscription,\r\n  } = useRecorderContext();\r\n\r\n  // 拖拽相关引用，仅用于麦克风按钮\r\n  const micButtonRef = useRef(null);\r\n  const isDraggingRef = useRef(false);\r\n  const offsetXRef = useRef(0);\r\n  const offsetYRef = useRef(0);\r\n\r\n  // localStorage 保存位置的 key\r\n  const storageKey = 'audioTranscriberMicButtonPosition';\r\n\r\n  // 新增声纹识别录音状态和上传状态（保持本组件私有状态）\r\n  const [isSpeakerRecording, setIsSpeakerRecording] = useState(false);\r\n  const [speakerUploadStatus, setSpeakerUploadStatus] = useState('');\r\n  const speakerRecorderRef = useRef(null);\r\n  const speakerAudioChunksRef = useRef([]);\r\n\r\n  /**\r\n   * 发送文本消息到 LLM 服务\r\n   * @param {string} text - 要发送的文本\r\n   */\r\n  const sendTextMessage = async (text) => {\r\n    if (!text.trim()) return;\r\n\r\n    try {\r\n      const response = await fetch('https://192.168.1.70:6010/qwener', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ text }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('网络响应失败，状态码: ' + response.status);\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('文本发送成功，服务器返回：', data);\r\n    } catch (error) {\r\n      console.error('文本发送失败：', error);\r\n    }\r\n  };\r\n\r\n  // 组件卸载时清理资源\r\n  useEffect(() => {\r\n    return () => {\r\n      stopRecording();\r\n      stopSpeakerRecording();\r\n    };\r\n  }, []);  // 这里改成空依赖数组，避免多次调用\r\n\r\n  // 监听语言和声纹识别开关的变化，保存状态到 localStorage，确保切换页时记忆选择\r\n  useEffect(() => {\r\n    try {\r\n      localStorage.setItem('audioTranscriberLang', lang);\r\n    } catch {}\r\n  }, [lang]);\r\n\r\n  useEffect(() => {\r\n    try {\r\n      localStorage.setItem('audioTranscriberSpeakerVerification', speakerVerification.toString());\r\n    } catch {}\r\n  }, [speakerVerification]);\r\n\r\n  /**\r\n   * 新增：开始录制2秒音频用于声纹识别\r\n   */\r\n  function startSpeakerRecording() {\r\n    if (isSpeakerRecording) return;\r\n\r\n    setSpeakerUploadStatus('请求麦克风权限...');\r\n    navigator.mediaDevices.getUserMedia({ audio: true })\r\n      .then((stream) => {\r\n        setSpeakerUploadStatus('开始录音2秒...');\r\n        speakerAudioChunksRef.current = [];\r\n        const options = { mimeType: 'audio/wav' }; // 一些浏览器不支持wav mimeType，下面用默认就好\r\n        let mediaRecorder;\r\n        try {\r\n          mediaRecorder = new MediaRecorder(stream, options);\r\n        } catch (e) {\r\n          // 失败则不传mimeType，使用默认格式\r\n          mediaRecorder = new MediaRecorder(stream);\r\n        }\r\n        speakerRecorderRef.current = mediaRecorder;\r\n\r\n        mediaRecorder.ondataavailable = (event) => {\r\n          if (event.data && event.data.size > 0) {\r\n            speakerAudioChunksRef.current.push(event.data);\r\n          }\r\n        };\r\n\r\n        mediaRecorder.onstop = async () => {\r\n          setSpeakerUploadStatus('录音结束，准备上传...');\r\n          const blob = new Blob(speakerAudioChunksRef.current, { type: 'audio/wav' });\r\n\r\n          // 发送上传请求（请修改URL为后端实际接口）\r\n          try {\r\n            const formData = new FormData();\r\n            formData.append('file', blob, 'speaker.wav');\r\n\r\n            // 这里示例用POST到服务器上传接口，路径请根据后端实际修改\r\n            const uploadUrl = 'http://192.168.168.77:6007/api/uploadSpeaker';\r\n\r\n            const res = await fetch(uploadUrl, {\r\n              method: 'POST',\r\n              body: formData,\r\n            });\r\n\r\n            if (!res.ok) {\r\n              throw new Error(`上传失败，状态码: ${res.status}`);\r\n            }\r\n            const result = await res.json();\r\n            setSpeakerUploadStatus('上传成功');\r\n            console.log('上传成功，服务器返回：', result);\r\n          } catch (err) {\r\n            setSpeakerUploadStatus('上传失败: ' + err.message);\r\n            console.error('上传失败', err);\r\n          }\r\n          // 停止所有音频轨道释放麦克风\r\n          stream.getTracks().forEach(track => track.stop());\r\n          setTimeout(() => setSpeakerUploadStatus(''), 3000);\r\n          setIsSpeakerRecording(false);\r\n        };\r\n\r\n        mediaRecorder.start();\r\n\r\n        setIsSpeakerRecording(true);\r\n\r\n        // 2秒后停止录音\r\n        setTimeout(() => {\r\n          if (speakerRecorderRef.current && speakerRecorderRef.current.state !== 'inactive') {\r\n            speakerRecorderRef.current.stop();\r\n          }\r\n        }, 2000);\r\n      })\r\n      .catch((err) => {\r\n        setSpeakerUploadStatus('获取麦克风权限失败: ' + err.message);\r\n        console.error('获取麦克风权限失败', err);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * 新增：停止声纹录音（如果需要手动停止）\r\n   */\r\n  function stopSpeakerRecording() {\r\n    if (speakerRecorderRef.current && speakerRecorderRef.current.state !== 'inactive') {\r\n      speakerRecorderRef.current.stop();\r\n      setIsSpeakerRecording(false);\r\n    }\r\n  }\r\n\r\n  // 拖拽事件处理，仅麦克风按钮\r\n  useEffect(() => {\r\n    if (!micButtonRef.current) return;\r\n    const button = micButtonRef.current;\r\n\r\n    // 读取并恢复按钮位置\r\n    const savedPosStr = localStorage.getItem(storageKey);\r\n    let left = 26;\r\n    let top = 26;\r\n    if (savedPosStr) {\r\n      try {\r\n        const pos = JSON.parse(savedPosStr);\r\n        if (\r\n          typeof pos.left === 'number' &&\r\n          typeof pos.top === 'number' &&\r\n          pos.left >= 0 &&\r\n          pos.top >= 0\r\n        ) {\r\n          left = pos.left;\r\n          top = pos.top;\r\n        }\r\n      } catch {\r\n        // 解析失败忽略，使用默认\r\n      }\r\n    }\r\n\r\n    button.style.position = 'fixed';\r\n    button.style.left = `${left}px`;\r\n    button.style.top = `${top}px`;\r\n    button.style.zIndex = '10000';\r\n    button.style.cursor = 'grab';\r\n\r\n    // 拖拽相关变量\r\n    isDraggingRef.current = false;\r\n    offsetXRef.current = 0;\r\n    offsetYRef.current = 0;\r\n\r\n    const onMouseDown = (e) => {\r\n      if (e.button !== 0) return; // 仅左键拖拽\r\n      isDraggingRef.current = true;\r\n      offsetXRef.current = e.clientX - button.offsetLeft;\r\n      offsetYRef.current = e.clientY - button.offsetTop;\r\n      button.style.cursor = 'grabbing';\r\n      e.preventDefault();\r\n    };\r\n    const onMouseMove = (e) => {\r\n      if (!isDraggingRef.current) return;\r\n      let newLeft = e.clientX - offsetXRef.current;\r\n      let newTop = e.clientY - offsetYRef.current;\r\n\r\n      const maxLeft = window.innerWidth - button.offsetWidth;\r\n      const maxTop = window.innerHeight - button.offsetHeight;\r\n      newLeft = Math.min(Math.max(0, newLeft), maxLeft);\r\n      newTop = Math.min(Math.max(0, newTop), maxTop);\r\n\r\n      button.style.left = `${newLeft}px`;\r\n      button.style.top = `${newTop}px`;\r\n    };\r\n    const onMouseUp = () => {\r\n      if (!isDraggingRef.current) return;\r\n      isDraggingRef.current = false;\r\n      button.style.cursor = 'grab';\r\n\r\n      // 保存位置\r\n      localStorage.setItem(\r\n        storageKey,\r\n        JSON.stringify({ left: button.offsetLeft, top: button.offsetTop })\r\n      );\r\n    };\r\n\r\n    const onTouchStart = (e) => {\r\n      if (e.touches.length === 0) return;\r\n      isDraggingRef.current = true;\r\n      const touch = e.touches[0];\r\n      offsetXRef.current = touch.clientX - button.offsetLeft;\r\n      offsetYRef.current = touch.clientY - button.offsetTop;\r\n      button.style.cursor = 'grabbing';\r\n    };\r\n    const onTouchMove = (e) => {\r\n      if (!isDraggingRef.current || e.touches.length === 0) return;\r\n      const touch = e.touches[0];\r\n      let newLeft = touch.clientX - offsetXRef.current;\r\n      let newTop = touch.clientY - offsetYRef.current;\r\n\r\n      const maxLeft = window.innerWidth - button.offsetWidth;\r\n      const maxTop = window.innerHeight - button.offsetHeight;\r\n      newLeft = Math.min(Math.max(0, newLeft), maxLeft);\r\n      newTop = Math.min(Math.max(0, newTop), maxTop);\r\n\r\n      button.style.left = `${newLeft}px`;\r\n      button.style.top = `${newTop}px`;\r\n\r\n      e.preventDefault();\r\n    };\r\n    const onTouchEnd = () => {\r\n      if (!isDraggingRef.current) return;\r\n      isDraggingRef.current = false;\r\n      button.style.cursor = 'grab';\r\n\r\n      // 保存位置\r\n      localStorage.setItem(\r\n        storageKey,\r\n        JSON.stringify({ left: button.offsetLeft, top: button.offsetTop })\r\n      );\r\n    };\r\n\r\n    button.addEventListener('mousedown', onMouseDown);\r\n    document.addEventListener('mousemove', onMouseMove);\r\n    document.addEventListener('mouseup', onMouseUp);\r\n\r\n    button.addEventListener('touchstart', onTouchStart, { passive: false });\r\n    document.addEventListener('touchmove', onTouchMove, { passive: false });\r\n    document.addEventListener('touchend', onTouchEnd);\r\n\r\n    return () => {\r\n      button.removeEventListener('mousedown', onMouseDown);\r\n      document.removeEventListener('mousemove', onMouseMove);\r\n      document.removeEventListener('mouseup', onMouseUp);\r\n\r\n      button.removeEventListener('touchstart', onTouchStart);\r\n      document.removeEventListener('touchmove', onTouchMove);\r\n      document.removeEventListener('touchend', onTouchEnd);\r\n    };\r\n  }, []);\r\n\r\n  // 新增波纹动画相关，useState管理波纹数组\r\n  const [ripples, setRipples] = useState([]);\r\n  const rippleCountRef = useRef(0);\r\n  const speakerButtonRef = useRef(null);\r\n\r\n  // 录制声纹按钮点击函数封装，附加波纹效果\r\n  const handleSpeakerRecordClick = (event) => {\r\n    if (isRecording || isSpeakerRecording) return; // 禁止多次点击\r\n\r\n    createRipple(event);\r\n    startSpeakerRecording();\r\n  };\r\n\r\n  // 创建波纹，添加到ripples数组\r\n  const createRipple = (event) => {\r\n    if (!speakerButtonRef.current) return;\r\n\r\n    const rect = speakerButtonRef.current.getBoundingClientRect();\r\n    const size = Math.max(rect.width, rect.height);\r\n    const x = event.clientX - rect.left - size / 2;\r\n    const y = event.clientY - rect.top - size / 2;\r\n\r\n    const newRipple = {\r\n      key: rippleCountRef.current,\r\n      size,\r\n      x,\r\n      y,\r\n    };\r\n    rippleCountRef.current += 1;\r\n\r\n    setRipples((oldRipples) => [...oldRipples, newRipple]);\r\n\r\n    // 1秒后自动移除波纹\r\n    setTimeout(() => {\r\n      setRipples((oldRipples) => oldRipples.filter(r => r.key !== newRipple.key));\r\n    }, 1000);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <style>{`\r\n        /* 麦克风按钮样式 */\r\n        #mic-button-wrapper {\r\n          position: fixed;\r\n          z-index: 10000;\r\n          user-select: none;\r\n          pointer-events: auto;\r\n          display: flex;\r\n          flex-direction: column;\r\n          align-items: center;\r\n          gap: 4px;\r\n          /* 位置由JS直接设置mic-button-wrapper定位 */\r\n        }\r\n\r\n        #listening-text {\r\n          font-size: 12px;\r\n          color: rgba(128, 128, 128, 0.7);\r\n          user-select: none;\r\n          pointer-events: none;\r\n          font-weight: 500;\r\n          opacity: 0;\r\n          transition: opacity 0.3s ease;\r\n          height: 16px;\r\n          line-height: 16px;\r\n        }\r\n        #listening-text.visible {\r\n          opacity: 1;\r\n        }\r\n\r\n        #mic-button {\r\n          background: none;\r\n          border: none;\r\n          padding: 0;\r\n          outline: none;\r\n          display: flex;\r\n          align-items: center;\r\n          justify-content: center;\r\n          filter: none;\r\n          transition: filter 0.3s ease;\r\n\r\n          width: 68px;\r\n          height: 68px;\r\n          cursor: grab;\r\n          /* 不再设置fixed定位，由wrapper定位 */\r\n        }\r\n        #mic-button.recording {\r\n          filter: drop-shadow(0 0 5px red);\r\n        }\r\n        #mic-button img {\r\n          width: 48px;\r\n          height: 48px;\r\n          user-select: none;\r\n          pointer-events: none;\r\n          -webkit-user-drag: none;\r\n        }\r\n\r\n        /* 语言和声纹识别区域样式 */\r\n        #controls-container {\r\n          max-width: 700px;\r\n          margin: 20px auto 12px auto;\r\n          font-family: Arial, sans-serif;\r\n          color: white;\r\n          display: flex;\r\n          align-items: center;\r\n          gap: 20px;\r\n          user-select: none;\r\n        }\r\n        #controls-container label {\r\n          font-size: 14px;\r\n          user-select: none;\r\n        }\r\n        #langInput {\r\n          padding: 4px;\r\n          font-size: 12px;\r\n          width: 120px;\r\n          background-color: #333;\r\n          border: 1px solid #666;\r\n          border-radius: 3px;\r\n          color: white;\r\n          user-select: text;\r\n        }\r\n        #speakerVerificationLabel {\r\n          display: flex;\r\n          align-items: center;\r\n          font-size: 8px;\r\n          user-select: none;\r\n        }\r\n        #speakerVerificationLabel input {\r\n          margin-right: 3px;\r\n        }\r\n\r\n        /* 纯 CSS 玻璃态按钮：录制声纹按钮替换 */\r\n        #speaker-record-button {\r\n          position: relative;\r\n          overflow: hidden;\r\n          background: rgba(255, 255, 255, 0.1);\r\n          border-radius: 16px;\r\n          border: 1px solid rgba(255, 255, 255, 0.3);\r\n          color: white;\r\n          padding: 3px 10px;\r\n          font-size: 16px;\r\n          font-weight: 600;\r\n          cursor: pointer;\r\n          user-select: none;\r\n          box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);\r\n          backdrop-filter: blur(12px);\r\n          -webkit-backdrop-filter: blur(12px);\r\n          transition: all 0.3s ease;\r\n          display: inline-flex;\r\n          align-items: center;\r\n          justify-content: center;\r\n          outline: none;\r\n          border-image: none; /* 去除原动画边框 */\r\n        }\r\n        #speaker-record-button:hover:not(:disabled) {\r\n          background: rgba(255, 255, 255, 0.2);\r\n          box-shadow: 0 8px 40px rgba(255, 255, 255, 0.3);\r\n          transform: scale(1.05);\r\n          filter: brightness(1.1);\r\n        }\r\n        #speaker-record-button:disabled {\r\n          opacity: 0.4;\r\n          cursor: not-allowed;\r\n          box-shadow: none;\r\n          background: rgba(255, 255, 255, 0.05);\r\n          filter: none;\r\n          transform: none;\r\n        }\r\n\r\n        /* 额外光泽层 */\r\n        #speaker-record-button::before {\r\n          content: '';\r\n          position: absolute;\r\n          top: -100%;\r\n          left: -100%;\r\n          width: 100%;\r\n          height: 100%;\r\n          background: radial-gradient(circle at 10% 10%, rgba(255, 255, 255, 0.3), transparent 10%);\r\n          pointer-events: none;\r\n          filter: blur(10px);\r\n          opacity: 0.6;\r\n          transition: opacity 0.3s ease;\r\n          border-radius: inherit;\r\n          z-index: 0;\r\n        }\r\n\r\n        /* 保留波纹效果的样式 */\r\n        .ripple {\r\n          position: absolute;\r\n          border-radius: 50%;\r\n          background: rgba(91, 155, 255, 0.7);\r\n          animation: rippleEffect 1s ease-out;\r\n          pointer-events: none;\r\n          transform: scale(0);\r\n          opacity: 0.75;\r\n          z-index: 1;\r\n        }\r\n\r\n        @keyframes rippleEffect {\r\n          to {\r\n            transform: scale(4);\r\n            opacity: 0;\r\n          }\r\n        }\r\n      `}</style>\r\n\r\n      {/* 麦克风及“聆听中”容器，控制整体定位、拖拽 */}\r\n      <div\r\n        id=\"mic-button-wrapper\"\r\n        ref={micButtonRef}\r\n        style={{ left: 26, top: 26, position: 'fixed' }}\r\n      >\r\n        {/* 聆听中提示 */}\r\n        <div id=\"listening-text\" className={isRecording ? 'visible' : ''} aria-live=\"polite\" role=\"status\">\r\n          聆听中...\r\n        </div>\r\n\r\n        {/* 麦克风按钮 */}\r\n        <button\r\n          id=\"mic-button\"\r\n          className={isRecording ? 'recording' : ''}\r\n          onClick={() => (isRecording ? stopRecording() : startRecording())}\r\n          aria-label={isRecording ? '停止录音' : '开始录音'}\r\n          title={isRecording ? '点击停止录音' : '点击开始录音'}\r\n          type=\"button\"\r\n          disabled={isSpeakerRecording}\r\n        >\r\n          <img\r\n            src=\"/core/client/ai-butler/image/mic-icon.png\"\r\n            alt=\"麦克风\"\r\n            draggable={false}\r\n          />\r\n        </button>\r\n      </div>\r\n\r\n      {/* 语言和声纹识别控制 */}\r\n      <div id=\"controls-container\" aria-label=\"语音识别设置\">\r\n        <label htmlFor=\"langInput\">语言：</label>\r\n        <input\r\n          id=\"langInput\"\r\n          type=\"text\"\r\n          value={lang}\r\n          onChange={(e) => setLang(e.target.value)}\r\n          disabled={isRecording || isSpeakerRecording}\r\n          placeholder=\"auto\"\r\n          autoComplete=\"off\"\r\n        />\r\n\r\n        <label id=\"speakerVerificationLabel\" htmlFor=\"speakerVerificationCheckbox\">\r\n          <input\r\n            id=\"speakerVerificationCheckbox\"\r\n            type=\"checkbox\"\r\n            checked={speakerVerification}\r\n            disabled={isRecording || isSpeakerRecording}\r\n            onChange={(e) => setSpeakerVerification(e.target.checked)}\r\n          />\r\n          声纹识别\r\n        </label>\r\n\r\n        {/* 纯 CSS 玻璃态录制声纹按钮 */}\r\n        <button\r\n          id=\"speaker-record-button\"\r\n          ref={speakerButtonRef}\r\n          onClick={handleSpeakerRecordClick}\r\n          disabled={isRecording || isSpeakerRecording}\r\n          type=\"button\"\r\n          aria-live=\"polite\"\r\n          aria-label=\"录制声纹\"\r\n          title=\"录制约2秒声音用于声纹识别，录制完成自动上传\"\r\n        >\r\n          录制声纹 (2秒)\r\n          {ripples.map(({ key, size, x, y }) => (\r\n            <span\r\n              key={key}\r\n              className=\"ripple\"\r\n              style={{\r\n                width: size,\r\n                height: size,\r\n                top: y,\r\n                left: x,\r\n              }}\r\n            />\r\n          ))}\r\n        </button>\r\n      </div>\r\n\r\n      {/* 声纹上传状态显示 */}\r\n      {speakerUploadStatus && (\r\n        <div\r\n          id=\"speaker-record-status\"\r\n          role=\"alert\"\r\n          aria-live=\"polite\"\r\n          aria-atomic=\"true\"\r\n          style={{ maxWidth: 700, margin: '4px auto 0 auto' }}\r\n        >\r\n          {speakerUploadStatus}\r\n        </div>\r\n      )}\r\n\r\n      {/* 转写结果展示 */}\r\n      <div\r\n        id=\"transcriptionResult\"\r\n        style={{\r\n          maxWidth: 700,\r\n          margin: '12px auto 20px auto',\r\n          fontFamily: 'Arial, sans-serif',\r\n          whiteSpace: 'pre-wrap',\r\n          backgroundColor: 'transparent',\r\n          padding: 10,\r\n          border: '1px solid transparent',\r\n          borderRadius: 5,\r\n          minHeight: 150,\r\n          fontFamily: 'monospace',\r\n          fontSize: 14,\r\n          overflowY: 'auto',\r\n          maxHeight: 300,\r\n          userSelect: 'text',\r\n          color: transcription ? 'white' : 'rgba(255, 255, 255, 0.5)',\r\n        }}\r\n      >\r\n        {transcription || '识别文字展示区...'}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,SAASC,kBAAkB,QAAQ,8BAA8B,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEnE,eAAe,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EACzC;EACA,MAAM;IACJC,WAAW;IACXC,aAAa;IACbC,IAAI;IACJC,mBAAmB;IACnBC,OAAO;IACPC,sBAAsB;IACtBC,cAAc;IACdC,aAAa;IACbC;EACF,CAAC,GAAGf,kBAAkB,CAAC,CAAC;;EAExB;EACA,MAAMgB,YAAY,GAAGlB,MAAM,CAAC,IAAI,CAAC;EACjC,MAAMmB,aAAa,GAAGnB,MAAM,CAAC,KAAK,CAAC;EACnC,MAAMoB,UAAU,GAAGpB,MAAM,CAAC,CAAC,CAAC;EAC5B,MAAMqB,UAAU,GAAGrB,MAAM,CAAC,CAAC,CAAC;;EAE5B;EACA,MAAMsB,UAAU,GAAG,mCAAmC;;EAEtD;EACA,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGzB,QAAQ,CAAC,KAAK,CAAC;EACnE,MAAM,CAAC0B,mBAAmB,EAAEC,sBAAsB,CAAC,GAAG3B,QAAQ,CAAC,EAAE,CAAC;EAClE,MAAM4B,kBAAkB,GAAG3B,MAAM,CAAC,IAAI,CAAC;EACvC,MAAM4B,qBAAqB,GAAG5B,MAAM,CAAC,EAAE,CAAC;;EAExC;AACF;AACA;AACA;EACE,MAAM6B,eAAe,GAAG,MAAOC,IAAI,IAAK;IACtC,IAAI,CAACA,IAAI,CAACC,IAAI,CAAC,CAAC,EAAE;IAElB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EAAE;QAC/DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAER;QAAK,CAAC;MAC/B,CAAC,CAAC;MAEF,IAAI,CAACE,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,cAAc,GAAGR,QAAQ,CAACS,MAAM,CAAC;MACnD;MAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MAClCC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEH,IAAI,CAAC;IACpC,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;IACjC;EACF,CAAC;;EAED;EACA7C,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACXe,aAAa,CAAC,CAAC;MACf+B,oBAAoB,CAAC,CAAC;IACxB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAE;;EAET;EACA9C,SAAS,CAAC,MAAM;IACd,IAAI;MACF+C,YAAY,CAACC,OAAO,CAAC,sBAAsB,EAAEtC,IAAI,CAAC;IACpD,CAAC,CAAC,MAAM,CAAC;EACX,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EAEVV,SAAS,CAAC,MAAM;IACd,IAAI;MACF+C,YAAY,CAACC,OAAO,CAAC,qCAAqC,EAAErC,mBAAmB,CAACsC,QAAQ,CAAC,CAAC,CAAC;IAC7F,CAAC,CAAC,MAAM,CAAC;EACX,CAAC,EAAE,CAACtC,mBAAmB,CAAC,CAAC;;EAEzB;AACF;AACA;EACE,SAASuC,qBAAqBA,CAAA,EAAG;IAC/B,IAAI5B,kBAAkB,EAAE;IAExBG,sBAAsB,CAAC,YAAY,CAAC;IACpC0B,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC,CACjDC,IAAI,CAAEC,MAAM,IAAK;MAChB/B,sBAAsB,CAAC,WAAW,CAAC;MACnCE,qBAAqB,CAAC8B,OAAO,GAAG,EAAE;MAClC,MAAMC,OAAO,GAAG;QAAEC,QAAQ,EAAE;MAAY,CAAC,CAAC,CAAC;MAC3C,IAAIC,aAAa;MACjB,IAAI;QACFA,aAAa,GAAG,IAAIC,aAAa,CAACL,MAAM,EAAEE,OAAO,CAAC;MACpD,CAAC,CAAC,OAAOI,CAAC,EAAE;QACV;QACAF,aAAa,GAAG,IAAIC,aAAa,CAACL,MAAM,CAAC;MAC3C;MACA9B,kBAAkB,CAAC+B,OAAO,GAAGG,aAAa;MAE1CA,aAAa,CAACG,eAAe,GAAIC,KAAK,IAAK;QACzC,IAAIA,KAAK,CAACvB,IAAI,IAAIuB,KAAK,CAACvB,IAAI,CAACwB,IAAI,GAAG,CAAC,EAAE;UACrCtC,qBAAqB,CAAC8B,OAAO,CAACS,IAAI,CAACF,KAAK,CAACvB,IAAI,CAAC;QAChD;MACF,CAAC;MAEDmB,aAAa,CAACO,MAAM,GAAG,YAAY;QACjC1C,sBAAsB,CAAC,cAAc,CAAC;QACtC,MAAM2C,IAAI,GAAG,IAAIC,IAAI,CAAC1C,qBAAqB,CAAC8B,OAAO,EAAE;UAAEa,IAAI,EAAE;QAAY,CAAC,CAAC;;QAE3E;QACA,IAAI;UACF,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;UAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEL,IAAI,EAAE,aAAa,CAAC;;UAE5C;UACA,MAAMM,SAAS,GAAG,8CAA8C;UAEhE,MAAMC,GAAG,GAAG,MAAM3C,KAAK,CAAC0C,SAAS,EAAE;YACjCzC,MAAM,EAAE,MAAM;YACdE,IAAI,EAAEoC;UACR,CAAC,CAAC;UAEF,IAAI,CAACI,GAAG,CAACrC,EAAE,EAAE;YACX,MAAM,IAAIC,KAAK,CAAC,aAAaoC,GAAG,CAACnC,MAAM,EAAE,CAAC;UAC5C;UACA,MAAMoC,MAAM,GAAG,MAAMD,GAAG,CAACjC,IAAI,CAAC,CAAC;UAC/BjB,sBAAsB,CAAC,MAAM,CAAC;UAC9BkB,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEgC,MAAM,CAAC;QACpC,CAAC,CAAC,OAAOC,GAAG,EAAE;UACZpD,sBAAsB,CAAC,QAAQ,GAAGoD,GAAG,CAACC,OAAO,CAAC;UAC9CnC,OAAO,CAACE,KAAK,CAAC,MAAM,EAAEgC,GAAG,CAAC;QAC5B;QACA;QACArB,MAAM,CAACuB,SAAS,CAAC,CAAC,CAACC,OAAO,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC;QACjDC,UAAU,CAAC,MAAM1D,sBAAsB,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;QAClDF,qBAAqB,CAAC,KAAK,CAAC;MAC9B,CAAC;MAEDqC,aAAa,CAACwB,KAAK,CAAC,CAAC;MAErB7D,qBAAqB,CAAC,IAAI,CAAC;;MAE3B;MACA4D,UAAU,CAAC,MAAM;QACf,IAAIzD,kBAAkB,CAAC+B,OAAO,IAAI/B,kBAAkB,CAAC+B,OAAO,CAAC4B,KAAK,KAAK,UAAU,EAAE;UACjF3D,kBAAkB,CAAC+B,OAAO,CAACyB,IAAI,CAAC,CAAC;QACnC;MACF,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC,CACDI,KAAK,CAAET,GAAG,IAAK;MACdpD,sBAAsB,CAAC,aAAa,GAAGoD,GAAG,CAACC,OAAO,CAAC;MACnDnC,OAAO,CAACE,KAAK,CAAC,WAAW,EAAEgC,GAAG,CAAC;IACjC,CAAC,CAAC;EACN;;EAEA;AACF;AACA;EACE,SAAS/B,oBAAoBA,CAAA,EAAG;IAC9B,IAAIpB,kBAAkB,CAAC+B,OAAO,IAAI/B,kBAAkB,CAAC+B,OAAO,CAAC4B,KAAK,KAAK,UAAU,EAAE;MACjF3D,kBAAkB,CAAC+B,OAAO,CAACyB,IAAI,CAAC,CAAC;MACjC3D,qBAAqB,CAAC,KAAK,CAAC;IAC9B;EACF;;EAEA;EACAvB,SAAS,CAAC,MAAM;IACd,IAAI,CAACiB,YAAY,CAACwC,OAAO,EAAE;IAC3B,MAAM8B,MAAM,GAAGtE,YAAY,CAACwC,OAAO;;IAEnC;IACA,MAAM+B,WAAW,GAAGzC,YAAY,CAAC0C,OAAO,CAACpE,UAAU,CAAC;IACpD,IAAIqE,IAAI,GAAG,EAAE;IACb,IAAIC,GAAG,GAAG,EAAE;IACZ,IAAIH,WAAW,EAAE;MACf,IAAI;QACF,MAAMI,GAAG,GAAGxD,IAAI,CAACyD,KAAK,CAACL,WAAW,CAAC;QACnC,IACE,OAAOI,GAAG,CAACF,IAAI,KAAK,QAAQ,IAC5B,OAAOE,GAAG,CAACD,GAAG,KAAK,QAAQ,IAC3BC,GAAG,CAACF,IAAI,IAAI,CAAC,IACbE,GAAG,CAACD,GAAG,IAAI,CAAC,EACZ;UACAD,IAAI,GAAGE,GAAG,CAACF,IAAI;UACfC,GAAG,GAAGC,GAAG,CAACD,GAAG;QACf;MACF,CAAC,CAAC,MAAM;QACN;MAAA;IAEJ;IAEAJ,MAAM,CAACO,KAAK,CAACC,QAAQ,GAAG,OAAO;IAC/BR,MAAM,CAACO,KAAK,CAACJ,IAAI,GAAG,GAAGA,IAAI,IAAI;IAC/BH,MAAM,CAACO,KAAK,CAACH,GAAG,GAAG,GAAGA,GAAG,IAAI;IAC7BJ,MAAM,CAACO,KAAK,CAACE,MAAM,GAAG,OAAO;IAC7BT,MAAM,CAACO,KAAK,CAACG,MAAM,GAAG,MAAM;;IAE5B;IACA/E,aAAa,CAACuC,OAAO,GAAG,KAAK;IAC7BtC,UAAU,CAACsC,OAAO,GAAG,CAAC;IACtBrC,UAAU,CAACqC,OAAO,GAAG,CAAC;IAEtB,MAAMyC,WAAW,GAAIpC,CAAC,IAAK;MACzB,IAAIA,CAAC,CAACyB,MAAM,KAAK,CAAC,EAAE,OAAO,CAAC;MAC5BrE,aAAa,CAACuC,OAAO,GAAG,IAAI;MAC5BtC,UAAU,CAACsC,OAAO,GAAGK,CAAC,CAACqC,OAAO,GAAGZ,MAAM,CAACa,UAAU;MAClDhF,UAAU,CAACqC,OAAO,GAAGK,CAAC,CAACuC,OAAO,GAAGd,MAAM,CAACe,SAAS;MACjDf,MAAM,CAACO,KAAK,CAACG,MAAM,GAAG,UAAU;MAChCnC,CAAC,CAACyC,cAAc,CAAC,CAAC;IACpB,CAAC;IACD,MAAMC,WAAW,GAAI1C,CAAC,IAAK;MACzB,IAAI,CAAC5C,aAAa,CAACuC,OAAO,EAAE;MAC5B,IAAIgD,OAAO,GAAG3C,CAAC,CAACqC,OAAO,GAAGhF,UAAU,CAACsC,OAAO;MAC5C,IAAIiD,MAAM,GAAG5C,CAAC,CAACuC,OAAO,GAAGjF,UAAU,CAACqC,OAAO;MAE3C,MAAMkD,OAAO,GAAGC,MAAM,CAACC,UAAU,GAAGtB,MAAM,CAACuB,WAAW;MACtD,MAAMC,MAAM,GAAGH,MAAM,CAACI,WAAW,GAAGzB,MAAM,CAAC0B,YAAY;MACvDR,OAAO,GAAGS,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEX,OAAO,CAAC,EAAEE,OAAO,CAAC;MACjDD,MAAM,GAAGQ,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEV,MAAM,CAAC,EAAEK,MAAM,CAAC;MAE9CxB,MAAM,CAACO,KAAK,CAACJ,IAAI,GAAG,GAAGe,OAAO,IAAI;MAClClB,MAAM,CAACO,KAAK,CAACH,GAAG,GAAG,GAAGe,MAAM,IAAI;IAClC,CAAC;IACD,MAAMW,SAAS,GAAGA,CAAA,KAAM;MACtB,IAAI,CAACnG,aAAa,CAACuC,OAAO,EAAE;MAC5BvC,aAAa,CAACuC,OAAO,GAAG,KAAK;MAC7B8B,MAAM,CAACO,KAAK,CAACG,MAAM,GAAG,MAAM;;MAE5B;MACAlD,YAAY,CAACC,OAAO,CAClB3B,UAAU,EACVe,IAAI,CAACC,SAAS,CAAC;QAAEqD,IAAI,EAAEH,MAAM,CAACa,UAAU;QAAET,GAAG,EAAEJ,MAAM,CAACe;MAAU,CAAC,CACnE,CAAC;IACH,CAAC;IAED,MAAMgB,YAAY,GAAIxD,CAAC,IAAK;MAC1B,IAAIA,CAAC,CAACyD,OAAO,CAACC,MAAM,KAAK,CAAC,EAAE;MAC5BtG,aAAa,CAACuC,OAAO,GAAG,IAAI;MAC5B,MAAMgE,KAAK,GAAG3D,CAAC,CAACyD,OAAO,CAAC,CAAC,CAAC;MAC1BpG,UAAU,CAACsC,OAAO,GAAGgE,KAAK,CAACtB,OAAO,GAAGZ,MAAM,CAACa,UAAU;MACtDhF,UAAU,CAACqC,OAAO,GAAGgE,KAAK,CAACpB,OAAO,GAAGd,MAAM,CAACe,SAAS;MACrDf,MAAM,CAACO,KAAK,CAACG,MAAM,GAAG,UAAU;IAClC,CAAC;IACD,MAAMyB,WAAW,GAAI5D,CAAC,IAAK;MACzB,IAAI,CAAC5C,aAAa,CAACuC,OAAO,IAAIK,CAAC,CAACyD,OAAO,CAACC,MAAM,KAAK,CAAC,EAAE;MACtD,MAAMC,KAAK,GAAG3D,CAAC,CAACyD,OAAO,CAAC,CAAC,CAAC;MAC1B,IAAId,OAAO,GAAGgB,KAAK,CAACtB,OAAO,GAAGhF,UAAU,CAACsC,OAAO;MAChD,IAAIiD,MAAM,GAAGe,KAAK,CAACpB,OAAO,GAAGjF,UAAU,CAACqC,OAAO;MAE/C,MAAMkD,OAAO,GAAGC,MAAM,CAACC,UAAU,GAAGtB,MAAM,CAACuB,WAAW;MACtD,MAAMC,MAAM,GAAGH,MAAM,CAACI,WAAW,GAAGzB,MAAM,CAAC0B,YAAY;MACvDR,OAAO,GAAGS,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEX,OAAO,CAAC,EAAEE,OAAO,CAAC;MACjDD,MAAM,GAAGQ,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEV,MAAM,CAAC,EAAEK,MAAM,CAAC;MAE9CxB,MAAM,CAACO,KAAK,CAACJ,IAAI,GAAG,GAAGe,OAAO,IAAI;MAClClB,MAAM,CAACO,KAAK,CAACH,GAAG,GAAG,GAAGe,MAAM,IAAI;MAEhC5C,CAAC,CAACyC,cAAc,CAAC,CAAC;IACpB,CAAC;IACD,MAAMoB,UAAU,GAAGA,CAAA,KAAM;MACvB,IAAI,CAACzG,aAAa,CAACuC,OAAO,EAAE;MAC5BvC,aAAa,CAACuC,OAAO,GAAG,KAAK;MAC7B8B,MAAM,CAACO,KAAK,CAACG,MAAM,GAAG,MAAM;;MAE5B;MACAlD,YAAY,CAACC,OAAO,CAClB3B,UAAU,EACVe,IAAI,CAACC,SAAS,CAAC;QAAEqD,IAAI,EAAEH,MAAM,CAACa,UAAU;QAAET,GAAG,EAAEJ,MAAM,CAACe;MAAU,CAAC,CACnE,CAAC;IACH,CAAC;IAEDf,MAAM,CAACqC,gBAAgB,CAAC,WAAW,EAAE1B,WAAW,CAAC;IACjD2B,QAAQ,CAACD,gBAAgB,CAAC,WAAW,EAAEpB,WAAW,CAAC;IACnDqB,QAAQ,CAACD,gBAAgB,CAAC,SAAS,EAAEP,SAAS,CAAC;IAE/C9B,MAAM,CAACqC,gBAAgB,CAAC,YAAY,EAAEN,YAAY,EAAE;MAAEQ,OAAO,EAAE;IAAM,CAAC,CAAC;IACvED,QAAQ,CAACD,gBAAgB,CAAC,WAAW,EAAEF,WAAW,EAAE;MAAEI,OAAO,EAAE;IAAM,CAAC,CAAC;IACvED,QAAQ,CAACD,gBAAgB,CAAC,UAAU,EAAED,UAAU,CAAC;IAEjD,OAAO,MAAM;MACXpC,MAAM,CAACwC,mBAAmB,CAAC,WAAW,EAAE7B,WAAW,CAAC;MACpD2B,QAAQ,CAACE,mBAAmB,CAAC,WAAW,EAAEvB,WAAW,CAAC;MACtDqB,QAAQ,CAACE,mBAAmB,CAAC,SAAS,EAAEV,SAAS,CAAC;MAElD9B,MAAM,CAACwC,mBAAmB,CAAC,YAAY,EAAET,YAAY,CAAC;MACtDO,QAAQ,CAACE,mBAAmB,CAAC,WAAW,EAAEL,WAAW,CAAC;MACtDG,QAAQ,CAACE,mBAAmB,CAAC,UAAU,EAAEJ,UAAU,CAAC;IACtD,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAM,CAACK,OAAO,EAAEC,UAAU,CAAC,GAAGnI,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAMoI,cAAc,GAAGnI,MAAM,CAAC,CAAC,CAAC;EAChC,MAAMoI,gBAAgB,GAAGpI,MAAM,CAAC,IAAI,CAAC;;EAErC;EACA,MAAMqI,wBAAwB,GAAIpE,KAAK,IAAK;IAC1C,IAAIxD,WAAW,IAAIc,kBAAkB,EAAE,OAAO,CAAC;;IAE/C+G,YAAY,CAACrE,KAAK,CAAC;IACnBd,qBAAqB,CAAC,CAAC;EACzB,CAAC;;EAED;EACA,MAAMmF,YAAY,GAAIrE,KAAK,IAAK;IAC9B,IAAI,CAACmE,gBAAgB,CAAC1E,OAAO,EAAE;IAE/B,MAAM6E,IAAI,GAAGH,gBAAgB,CAAC1E,OAAO,CAAC8E,qBAAqB,CAAC,CAAC;IAC7D,MAAMtE,IAAI,GAAGiD,IAAI,CAACE,GAAG,CAACkB,IAAI,CAACE,KAAK,EAAEF,IAAI,CAACG,MAAM,CAAC;IAC9C,MAAMC,CAAC,GAAG1E,KAAK,CAACmC,OAAO,GAAGmC,IAAI,CAAC5C,IAAI,GAAGzB,IAAI,GAAG,CAAC;IAC9C,MAAM0E,CAAC,GAAG3E,KAAK,CAACqC,OAAO,GAAGiC,IAAI,CAAC3C,GAAG,GAAG1B,IAAI,GAAG,CAAC;IAE7C,MAAM2E,SAAS,GAAG;MAChBC,GAAG,EAAEX,cAAc,CAACzE,OAAO;MAC3BQ,IAAI;MACJyE,CAAC;MACDC;IACF,CAAC;IACDT,cAAc,CAACzE,OAAO,IAAI,CAAC;IAE3BwE,UAAU,CAAEa,UAAU,IAAK,CAAC,GAAGA,UAAU,EAAEF,SAAS,CAAC,CAAC;;IAEtD;IACAzD,UAAU,CAAC,MAAM;MACf8C,UAAU,CAAEa,UAAU,IAAKA,UAAU,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACH,GAAG,KAAKD,SAAS,CAACC,GAAG,CAAC,CAAC;IAC7E,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;EAED,oBACE1I,OAAA,CAAAE,SAAA;IAAA4I,QAAA,gBACE9I,OAAA;MAAA8I,QAAA,EAAQ;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAGVlJ,OAAA;MACEmJ,EAAE,EAAC,oBAAoB;MA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}